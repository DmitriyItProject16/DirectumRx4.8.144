
// ==================================================================
// AcquaintanceCompleteNotification.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class AcquaintanceCompleteNotificationFilter<T> :
      global::Sungero.Workflow.Server.NoticeFilter<T>
      where T : class, global::Sungero.RecordManagement.IAcquaintanceCompleteNotification
    {
      protected new global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationFilterState Filter { get; private set; }

      private global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationFilterState filter
      {
        get
        {
          return this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedFilter(query);
      }

      public AcquaintanceCompleteNotificationFilter(global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationFilterState filter)
      : base()
      {
        this.Filter = filter;
      }

      protected AcquaintanceCompleteNotificationFilter()
      {
      }
    }
    public class AcquaintanceCompleteNotificationSearchDialogModel : global::Sungero.Workflow.Server.NoticeSearchDialogModel
        {
                  public override global::System.Int64? Id { get; protected set; }
                  public override global::System.String Subject { get; protected set; }
                  public override global::System.Boolean? HasSubtasksInProcess { get; protected set; }


                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Author { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Performer { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Status { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Importance { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Deadline { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Created { get; protected set; }




        }





  [global::Sungero.Domain.Filter(typeof(global::Sungero.RecordManagement.Server.AcquaintanceCompleteNotificationFilter<global::Sungero.RecordManagement.IAcquaintanceCompleteNotification>))]

  public class AcquaintanceCompleteNotification :
    global::Sungero.Workflow.Server.Notice, global::Sungero.RecordManagement.IAcquaintanceCompleteNotification, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("8484c5ba-5646-4327-9158-cd9fe0eb082b");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.RecordManagement.Server.AcquaintanceCompleteNotification.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.RecordManagement.IAcquaintanceCompleteNotification, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Subject; }
      set { this.Subject = value; }
    }

    public new virtual global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationState State
    {
      get { return (global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.RecordManagement.Shared.AcquaintanceCompleteNotificationState(this);
    }

    public new virtual global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationInfo Info
    {
      get { return (global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationInfo)base.Info; }
    }

    public new virtual global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationAccessRights AccessRights
    {
      get { return (global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.RecordManagement.Server.AcquaintanceCompleteNotificationAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.RecordManagement.Server.AcquaintanceCompleteNotificationFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.RecordManagement.Shared.AcquaintanceCompleteNotificationFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.RecordManagement.AcquaintanceCompleteNotificationServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.RecordManagement.AcquaintanceCompleteNotificationSharedHandlers(this);
    }










    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      var instance = Sungero.Metadata.Services.AppliedTypesManager.CreateInstance("Sungero.RecordManagement.AcquaintanceCompleteNotificationCreatingFromServerHandler", new object[] { (global::Sungero.RecordManagement.IAcquaintanceCompleteNotification)entitySource, this.Info });
      if (instance != null)
        return (global::Sungero.Domain.Shared.EntityCreatingFromServerHandler)instance;

      return new global::Sungero.RecordManagement.AcquaintanceCompleteNotificationCreatingFromServerHandler((global::Sungero.RecordManagement.IAcquaintanceCompleteNotification)entitySource, this.Info);
    }

    #region Framework events



    #endregion


    public AcquaintanceCompleteNotification()
    {
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentCreated += this.AttachmentCreatedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentAdded += this.AttachmentAddedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentDeleted += this.AttachmentDeletedHandler;


    }

    #region Workflow attachments
    public virtual global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationDocumentGroupAttachments DocumentGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.AcquaintanceCompleteNotificationDocumentGroupAttachments(this);
      }
    }
    public virtual global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationAddendaGroupAttachments AddendaGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.AcquaintanceCompleteNotificationAddendaGroupAttachments(this);
      }
    }
    public virtual global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationOtherGroupAttachments OtherGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.AcquaintanceCompleteNotificationOtherGroupAttachments(this);
      }
    }


    private void AttachmentCreatedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentCreatedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentGroup")
      {
        ((global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationSharedHandlers)this.SharedHandlers).DocumentGroupCreated(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "AddendaGroup")
      {
        ((global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationSharedHandlers)this.SharedHandlers).AddendaGroupCreated(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationSharedHandlers)this.SharedHandlers).OtherGroupCreated(e);
        return;
      }

    }

    private void AttachmentAddedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentAddedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentGroup")
      {
        ((global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationSharedHandlers)this.SharedHandlers).DocumentGroupAdded(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "AddendaGroup")
      {
        ((global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationSharedHandlers)this.SharedHandlers).AddendaGroupAdded(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationSharedHandlers)this.SharedHandlers).OtherGroupAdded(e);
        return;
      }

    }

    private void AttachmentDeletedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentDeletedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentGroup")
      {
        ((global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationSharedHandlers)this.SharedHandlers).DocumentGroupDeleted(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "AddendaGroup")
      {
        ((global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationSharedHandlers)this.SharedHandlers).AddendaGroupDeleted(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationSharedHandlers)this.SharedHandlers).OtherGroupDeleted(e);
        return;
      }

    }
    #endregion


  }
}

// ==================================================================
// AcquaintanceCompleteNotificationHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement
{

  public partial class AcquaintanceCompleteNotificationFilteringServerHandler<T>
    : global::Sungero.Domain.EntityFilteringServerHandler<T>  
    where T : class, global::Sungero.RecordManagement.IAcquaintanceCompleteNotification
  {
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected new global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationFilterState Filter { get; private set; }

    private global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationFilterState _filter
    {
      get
      {
        return this.Filter;
      }
    }

    public AcquaintanceCompleteNotificationFilteringServerHandler(global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationFilterState filter)
    : base()
    {
      this.Filter = filter;
    }

    protected AcquaintanceCompleteNotificationFilteringServerHandler()
    {
    }

    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.FilteringEventArgs e)
    {
      return query;
    }


  }

  public partial class AcquaintanceCompleteNotificationSearchDialogServerHandler : global::Sungero.Workflow.NoticeSearchDialogServerHandler
   {
     private global::Sungero.RecordManagement.Server.AcquaintanceCompleteNotificationSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.RecordManagement.Server.AcquaintanceCompleteNotificationSearchDialogModel)this.Dialog;
       }
     }

     public AcquaintanceCompleteNotificationSearchDialogServerHandler(global::Sungero.RecordManagement.Server.AcquaintanceCompleteNotificationSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class AcquaintanceCompleteNotificationServerHandlers : global::Sungero.Workflow.NoticeServerHandlers
  {
    private global::Sungero.RecordManagement.IAcquaintanceCompleteNotification _obj
    {
      get { return (global::Sungero.RecordManagement.IAcquaintanceCompleteNotification)this.Entity; }
    }

    public AcquaintanceCompleteNotificationServerHandlers(global::Sungero.RecordManagement.IAcquaintanceCompleteNotification entity)
      : base(entity)
    {
    }
  }

  public partial class AcquaintanceCompleteNotificationCreatingFromServerHandler : global::Sungero.Workflow.NoticeCreatingFromServerHandler
  {
    private global::Sungero.RecordManagement.IAcquaintanceCompleteNotification _source
    {
      get { return (global::Sungero.RecordManagement.IAcquaintanceCompleteNotification)this.Source; }
    }

    private global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationInfo _info
    {
      get { return (global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationInfo)this._Info; }
    }

    public AcquaintanceCompleteNotificationCreatingFromServerHandler(global::Sungero.RecordManagement.IAcquaintanceCompleteNotification source, global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// AcquaintanceCompleteNotificationEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
}

// ==================================================================
// AcquaintanceCompleteNotificationAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class AcquaintanceCompleteNotificationAccessRights : 
    Sungero.Workflow.Server.NoticeAccessRights, Sungero.RecordManagement.IAcquaintanceCompleteNotificationAccessRights
  {

    public AcquaintanceCompleteNotificationAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class AcquaintanceCompleteNotificationTypeAccessRights : 
    Sungero.Workflow.Server.NoticeTypeAccessRights, Sungero.RecordManagement.IAcquaintanceCompleteNotificationAccessRights
  {

    public AcquaintanceCompleteNotificationTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// AcquaintanceCompleteNotificationRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class AcquaintanceCompleteNotificationRepositoryImplementer<T> : 
      global::Sungero.Workflow.Server.NoticeRepositoryImplementer<T>,
      global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationRepositoryImplementer<T>
      where T : global::Sungero.RecordManagement.IAcquaintanceCompleteNotification 
    {
       public new global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationAccessRights AccessRights
       {
          get { return (global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationAccessRights)base.AccessRights; }
       }

       public new global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationInfo Info
       {
          get { return (global::Sungero.RecordManagement.IAcquaintanceCompleteNotificationInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.RecordManagement.Server.AcquaintanceCompleteNotificationTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// AcquaintanceCompleteNotificationPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
}

// ==================================================================
// AcquaintanceCompleteNotificationServerFunctions.g.cs
// ==================================================================

namespace Sungero.RecordManagement.Server
{
  public partial class AcquaintanceCompleteNotificationFunctions : global::Sungero.Workflow.Server.NoticeFunctions
  {
    private global::Sungero.RecordManagement.IAcquaintanceCompleteNotification _obj
    {
      get { return (global::Sungero.RecordManagement.IAcquaintanceCompleteNotification)this.Entity; }
    }

    public AcquaintanceCompleteNotificationFunctions(global::Sungero.RecordManagement.IAcquaintanceCompleteNotification entity) : base(entity) { }
  }
}

// ==================================================================
// AcquaintanceCompleteNotificationFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Functions
{
  internal static class AcquaintanceCompleteNotification
  {
  }
}

// ==================================================================
// AcquaintanceCompleteNotificationServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class AcquaintanceCompleteNotificationServerPublicFunctions : global::Sungero.RecordManagement.Server.IAcquaintanceCompleteNotificationServerPublicFunctions
  {
  }
}

// ==================================================================
// AcquaintanceCompleteNotificationQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Queries
{
  public class AcquaintanceCompleteNotification
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.RecordManagement.Server.AcquaintanceCompleteNotification.AcquaintanceCompleteNotificationQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}

// ==================================================================
// AcquaintanceCompleteNotificationBlock.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class AcquaintanceCompleteNotificationArguments: global::Sungero.Workflow.Server.Route.NoticeStartEventArguments<AcquaintanceCompleteNotificationBlock, global::Sungero.Workflow.NoticeBlock>
  {
    public AcquaintanceCompleteNotificationArguments(AcquaintanceCompleteNotificationBlock block) : base(block) { }
  }

  public class AcquaintanceCompleteNotificationEndBlockEventArguments: global::Sungero.Workflow.Server.Route.NoticeEndBlockEventArguments<AcquaintanceCompleteNotificationBlock, global::Sungero.Workflow.NoticeBlock, Sungero.RecordManagement.IAcquaintanceCompleteNotification> 
  {
    public AcquaintanceCompleteNotificationEndBlockEventArguments(AcquaintanceCompleteNotificationBlock block) : base(block) { }
  }

  public partial class AcquaintanceCompleteNotificationBlock : global::Sungero.Workflow.Blocks.NoticeBlockWrapper<global::Sungero.Workflow.NoticeBlock>    
  {



    public AcquaintanceCompleteNotificationBlock(global::Sungero.Workflow.NoticeBlock block) : base(block) { }
  }
}

// ==================================================================
// AcquaintanceCompleteNotificationChildWrappers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
}
