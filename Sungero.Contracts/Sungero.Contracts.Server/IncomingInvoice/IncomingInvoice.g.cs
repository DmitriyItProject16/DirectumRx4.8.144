
// ==================================================================
// IncomingInvoice.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Server
{
    public class IncomingInvoiceFilter<T> :
      global::Sungero.Docflow.Server.AccountingDocumentBaseFilter<T>
      where T : class, global::Sungero.Contracts.IIncomingInvoice
    {
      private global::Sungero.Contracts.IIncomingInvoiceFilterState filter
      {
        get
        {
          return (Sungero.Contracts.IIncomingInvoiceFilterState)this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        var args = new global::Sungero.Domain.FilteringEventArgs();
        global::System.Linq.IQueryable<T> result;
        var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Contracts.IncomingInvoiceFilteringServerHandler`1");
        if (filterType != null)
        {
          var genericType = filterType.MakeGenericType(typeof(T));
          var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { this.filter });
          var methodInfo = genericType.GetMethod("Filtering");
          result = (global::System.Linq.IQueryable<T>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
        }
        else
        {
          result = new global::Sungero.Contracts.IncomingInvoiceFilteringServerHandler<T>(this.filter).Filtering(query, args);
        }
        if (args.DisableCheckRights)
        global::Sungero.Domain.Security.FilteringAccessRightsOptions.DisableCheckRights<T>();
        return result;
      }

      public IncomingInvoiceFilter(global::Sungero.Contracts.IIncomingInvoiceFilterState filter)
      : base(filter)
      {
      }

      protected IncomingInvoiceFilter()
      {
      }
    }
    public class IncomingInvoiceSearchDialogModel : global::Sungero.Docflow.Server.AccountingDocumentBaseSearchDialogModel
        {
                  public override global::System.Int64? Id { get; protected set; }
                  public override global::System.String Name { get; protected set; }
                  public override global::System.Int64? SellerTitleId { get; protected set; }
                  public override global::System.Int64? BuyerTitleId { get; protected set; }
                  public override global::System.Int64? SellerSignatureId { get; protected set; }
                  public override global::System.Int64? BuyerSignatureId { get; protected set; }
                  public override global::System.String Subject { get; protected set; }
                  [Sungero.Domain.Shared.HideInDevStudio()]
                  public override global::System.Boolean? IsAdjustment { get; protected set; }


                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> VerificationState { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Docflow.IOfficialDocument> LeadingDocument { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Content.IAssociatedApplication> AssociatedApplication { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Author { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Created { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Company.IBusinessUnit> BusinessUnit { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Company.IDepartment> Department { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> ResponsibleEmployee { get; protected set; }
                  [Sungero.Domain.Shared.HideInDevStudio()]
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Parties.IContact> Contact { get; protected set; }
                  [Sungero.Domain.Shared.HideInDevStudio()]
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Parties.IContact> CounterpartySignatory { get; protected set; }
                  [Sungero.Domain.Shared.HideInDevStudio()]
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Docflow.IAccountingDocumentBase> Corrected { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Docflow.IDocumentKind> DocumentKind { get; protected set; }
                  [Sungero.Domain.Shared.HideInDevStudio()]
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> OurSignatory { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Parties.ICounterparty> Counterparty { get; protected set; }




                   public new IncomingInvoiceVersionsModel Versions { get { return (IncomingInvoiceVersionsModel)base.Versions; } protected set { base.Versions = value; } }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public new IncomingInvoiceTrackingModel Tracking { get { return (IncomingInvoiceTrackingModel)base.Tracking; } protected set { base.Tracking = value; } }

        }

      public class IncomingInvoiceVersionsModel : global::Sungero.Docflow.Server.AccountingDocumentBaseVersionsModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int64? Id { get; protected set; }
                      public override global::System.String Body { get; protected set; }




         }
      public class IncomingInvoiceTrackingModel : global::Sungero.Docflow.Server.AccountingDocumentBaseTrackingModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int64? Id { get; protected set; }




         }




  public class IncomingInvoiceFilterForContract<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Contracts.IContractualDocument
    where TSourceEntity : class, global::Sungero.Contracts.IIncomingInvoice
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Contracts.IncomingInvoiceContractPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { sourceEntity });
        var methodInfo = genericType.GetMethod("ContractFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Contracts.IncomingInvoiceContractPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).ContractFiltering(query, args);
      }
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public IncomingInvoiceFilterForContract(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class IncomingInvoiceSearchFilterForContract<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Contracts.IContractualDocument
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Contracts.IncomingInvoiceContractSearchPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType);
        var methodInfo = genericType.GetMethod("ContractSearchDialogFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Contracts.IncomingInvoiceContractSearchPropertyFilteringServerHandler<TQueryEntity>().ContractSearchDialogFiltering(query, args);
      }
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public IncomingInvoiceSearchFilterForContract(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::Sungero.Contracts.Server.IncomingInvoiceFilter<global::Sungero.Contracts.IIncomingInvoice>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Contracts.Server.IncomingInvoiceFilterForContract<global::Sungero.Contracts.IContractualDocument, global::Sungero.Contracts.IIncomingInvoice>), "Contract")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Contracts.Server.IncomingInvoiceSearchFilterForContract<global::Sungero.Contracts.IContractualDocument>), "Contract")]


  public class IncomingInvoice :
    global::Sungero.Docflow.Server.AccountingDocumentBase, global::Sungero.Contracts.IIncomingInvoice, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("a523a263-bc00-40f9-810d-f582bae2205d");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Contracts.Server.IncomingInvoice.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Contracts.IIncomingInvoice, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Name; }
      set { this.Name = value; }
    }

    public new virtual global::Sungero.Contracts.IIncomingInvoiceState State
    {
      get { return (global::Sungero.Contracts.IIncomingInvoiceState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Contracts.Shared.IncomingInvoiceState(this);
    }

    public new virtual global::Sungero.Contracts.IIncomingInvoiceInfo Info
    {
      get { return (global::Sungero.Contracts.IIncomingInvoiceInfo)base.Info; }
    }

    public new virtual global::Sungero.Contracts.IIncomingInvoiceAccessRights AccessRights
    {
      get { return (global::Sungero.Contracts.IIncomingInvoiceAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Contracts.Server.IncomingInvoiceAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.Contracts.Server.IncomingInvoiceFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Contracts.Shared.IncomingInvoiceFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.Contracts.IncomingInvoiceServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.Contracts.IncomingInvoiceSharedHandlers(this);
    }

    private global::System.DateTime? _PaymentDueDate;
    public virtual global::System.DateTime? PaymentDueDate
    {
      get
      {
        return this._PaymentDueDate;
      }

      set
      {
        this.SetPropertyValue("PaymentDueDate", this._PaymentDueDate, value, (propertyValue) => { this._PaymentDueDate = propertyValue; }, this.PaymentDueDateChangedHandler);
      }
    }






    private static global::Sungero.Domain.Shared.EnumerationItems _LifeCycleStateItems = new global::Sungero.Domain.Shared.EnumerationItems(
      global::Sungero.Docflow.Server.AccountingDocumentBase.LifeCycleStateItems,
      typeof(global::Sungero.Contracts.IncomingInvoice.LifeCycleState),
      typeof(global::Sungero.Contracts.Server.IncomingInvoice),
      "LifeCycleState");

    public static new global::Sungero.Domain.Shared.EnumerationItems LifeCycleStateItems
    {
      get { return global::Sungero.Contracts.Server.IncomingInvoice._LifeCycleStateItems; }
    }

    public override global::Sungero.Domain.Shared.EnumerationItems LifeCycleStateAllowedItems
    {
      get { return global::Sungero.Contracts.Server.IncomingInvoice.LifeCycleStateItems; }
    }



    private global::Sungero.Contracts.IContractualDocument _Contract;
    public virtual global::Sungero.Contracts.IContractualDocument Contract
    {
      get
      {
        return this._Contract;
      }

      set
      {
        this.SetPropertyValue("Contract", this._Contract, value, (propertyValue) => { this._Contract = propertyValue; }, this.ContractChangedHandler);
      }
    }



    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Content.IElectronicDocumentVersions> CreateVersionsCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Contracts.IIncomingInvoiceVersions>() { RootEntity = this };
    }
    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IOfficialDocumentTracking> CreateTrackingCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Contracts.IIncomingInvoiceTracking>() { RootEntity = this };
    }


    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      var instance = Sungero.Metadata.Services.AppliedTypesManager.CreateInstance("Sungero.Contracts.IncomingInvoiceCreatingFromServerHandler", new object[] { (global::Sungero.Contracts.IIncomingInvoice)entitySource, this.Info });
      if (instance != null)
        return (global::Sungero.Domain.Shared.EntityCreatingFromServerHandler)instance;

      return new global::Sungero.Contracts.IncomingInvoiceCreatingFromServerHandler((global::Sungero.Contracts.IIncomingInvoice)entitySource, this.Info);
    }

    #region Framework events

    protected void ContractChangedHandler()
    {
      var args = new global::Sungero.Contracts.Shared.IncomingInvoiceContractChangedEventArgs(this.State.Properties.Contract, this.Contract, this);
     ((global::Sungero.Contracts.IIncomingInvoiceSharedHandlers)this.SharedHandlers).ContractChanged(args);
    }


    protected void PaymentDueDateChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.PaymentDueDate, this.PaymentDueDate, this);
     ((global::Sungero.Contracts.IIncomingInvoiceSharedHandlers)this.SharedHandlers).PaymentDueDateChanged(args);
    }





    #endregion


    public IncomingInvoice()
    {
    }

    protected override global::Sungero.Domain.Shared.EntityConvertingFromServerHandler CreateConvertingFromServerHandler(   
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      var instance = Sungero.Metadata.Services.AppliedTypesManager.CreateInstance("Sungero.Contracts.IncomingInvoiceConvertingFromServerHandler", (global::Sungero.Content.IElectronicDocument)entitySource, this.Info);
      if (instance != null)
        return (global::Sungero.Domain.Shared.EntityConvertingFromServerHandler)instance;

      return new global::Sungero.Contracts.IncomingInvoiceConvertingFromServerHandler((global::Sungero.Content.IElectronicDocument)entitySource, this.Info);
    }

  }
}

// ==================================================================
// IncomingInvoiceHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts
{
  public partial class IncomingInvoiceContractPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Contracts.IContractualDocument
  {
    private global::Sungero.Contracts.IIncomingInvoice _obj
    {
      get { return (global::Sungero.Contracts.IIncomingInvoice)this.Entity; }
    }

    public IncomingInvoiceContractPropertyFilteringServerHandler(global::Sungero.Contracts.IIncomingInvoice entity)
      : base(entity)
    {
    }
  }

  public partial class IncomingInvoiceContractSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Contracts.IContractualDocument
  {

    public virtual global::System.Linq.IQueryable<T> ContractSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public IncomingInvoiceContractSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



  public partial class IncomingInvoiceFilteringServerHandler<T>
    : global::Sungero.Docflow.AccountingDocumentBaseFilteringServerHandler<T>  
    where T : class, global::Sungero.Contracts.IIncomingInvoice
  {
    private global::Sungero.Contracts.IIncomingInvoiceFilterState _filter
    {
      get
      {
        return (Sungero.Contracts.IIncomingInvoiceFilterState)this.Filter;
      }
    }

    public IncomingInvoiceFilteringServerHandler(global::Sungero.Contracts.IIncomingInvoiceFilterState filter)
    : base(filter)
    {
    }

    protected IncomingInvoiceFilteringServerHandler()
    {
    }

      public override global::System.Linq.IQueryable<Sungero.Company.IBusinessUnit> BusinessUnitFiltering(global::System.Linq.IQueryable<Sungero.Company.IBusinessUnit> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.BusinessUnitFiltering(query, e);
              return query;
      }

      public override global::System.Linq.IQueryable<Sungero.Company.IDepartment> DepartmentFiltering(global::System.Linq.IQueryable<Sungero.Company.IDepartment> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.DepartmentFiltering(query, e);
              return query;
      }

      public override global::System.Linq.IQueryable<Sungero.Parties.ICounterparty> CounterpartyFiltering(global::System.Linq.IQueryable<Sungero.Parties.ICounterparty> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.CounterpartyFiltering(query, e);
              return query;
      }


  }

  public partial class IncomingInvoiceSearchDialogServerHandler : global::Sungero.Docflow.AccountingDocumentBaseSearchDialogServerHandler
   {
     private global::Sungero.Contracts.Server.IncomingInvoiceSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.Contracts.Server.IncomingInvoiceSearchDialogModel)this.Dialog;
       }
     }

     public IncomingInvoiceSearchDialogServerHandler(global::Sungero.Contracts.Server.IncomingInvoiceSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class IncomingInvoiceServerHandlers : global::Sungero.Docflow.AccountingDocumentBaseServerHandlers
  {
    private global::Sungero.Contracts.IIncomingInvoice _obj
    {
      get { return (global::Sungero.Contracts.IIncomingInvoice)this.Entity; }
    }

    public IncomingInvoiceServerHandlers(global::Sungero.Contracts.IIncomingInvoice entity)
      : base(entity)
    {
    }
  }

  public partial class IncomingInvoiceCreatingFromServerHandler : global::Sungero.Docflow.AccountingDocumentBaseCreatingFromServerHandler
  {
    private global::Sungero.Contracts.IIncomingInvoice _source
    {
      get { return (global::Sungero.Contracts.IIncomingInvoice)this.Source; }
    }

    private global::Sungero.Contracts.IIncomingInvoiceInfo _info
    {
      get { return (global::Sungero.Contracts.IIncomingInvoiceInfo)this._Info; }
    }

    public IncomingInvoiceCreatingFromServerHandler(global::Sungero.Contracts.IIncomingInvoice source, global::Sungero.Contracts.IIncomingInvoiceInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// IncomingInvoiceEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Server
{
}

// ==================================================================
// IncomingInvoiceAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Server
{
  public class IncomingInvoiceAccessRights : 
    Sungero.Docflow.Server.AccountingDocumentBaseAccessRights, Sungero.Contracts.IIncomingInvoiceAccessRights
  {

    public IncomingInvoiceAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class IncomingInvoiceTypeAccessRights : 
    Sungero.Docflow.Server.AccountingDocumentBaseTypeAccessRights, Sungero.Contracts.IIncomingInvoiceAccessRights
  {

    public IncomingInvoiceTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// IncomingInvoiceRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Server
{
    public class IncomingInvoiceRepositoryImplementer<T> : 
      global::Sungero.Docflow.Server.AccountingDocumentBaseRepositoryImplementer<T>,
      global::Sungero.Contracts.IIncomingInvoiceRepositoryImplementer<T>
      where T : global::Sungero.Contracts.IIncomingInvoice 
    {
       public new global::Sungero.Contracts.IIncomingInvoiceAccessRights AccessRights
       {
          get { return (global::Sungero.Contracts.IIncomingInvoiceAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Contracts.IIncomingInvoiceInfo Info
       {
          get { return (global::Sungero.Contracts.IIncomingInvoiceInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Contracts.Server.IncomingInvoiceTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// IncomingInvoicePanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Server
{
    public class IncomingInvoiceBusinessUnitPanelNavigationFilter : global::Sungero.Docflow.Server.AccountingDocumentBaseBusinessUnitPanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Contracts.IIncomingInvoice
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IBusinessUnit>)query;
        var typedState = (global::Sungero.Contracts.IIncomingInvoiceFilterState)this.State;
        var handlers = new global::Sungero.Contracts.IncomingInvoiceFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.BusinessUnitFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IBusinessUnit>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Contracts.IIncomingInvoice>(query);
      }
    }

    public class IncomingInvoiceDepartmentPanelNavigationFilter : global::Sungero.Docflow.Server.AccountingDocumentBaseDepartmentPanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Contracts.IIncomingInvoice
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IDepartment>)query;
        var typedState = (global::Sungero.Contracts.IIncomingInvoiceFilterState)this.State;
        var handlers = new global::Sungero.Contracts.IncomingInvoiceFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.DepartmentFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IDepartment>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Contracts.IIncomingInvoice>(query);
      }
    }

    public class IncomingInvoiceCounterpartyPanelNavigationFilter : global::Sungero.Docflow.Server.AccountingDocumentBaseCounterpartyPanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Contracts.IIncomingInvoice
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Parties.ICounterparty>)query;
        var typedState = (global::Sungero.Contracts.IIncomingInvoiceFilterState)this.State;
        var handlers = new global::Sungero.Contracts.IncomingInvoiceFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.CounterpartyFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Parties.ICounterparty>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Contracts.IIncomingInvoice>(query);
      }
    }

}

// ==================================================================
// IncomingInvoiceServerFunctions.g.cs
// ==================================================================

namespace Sungero.Contracts.Server
{
  public partial class IncomingInvoiceFunctions : global::Sungero.Docflow.Server.AccountingDocumentBaseFunctions
  {
    private global::Sungero.Contracts.IIncomingInvoice _obj
    {
      get { return (global::Sungero.Contracts.IIncomingInvoice)this.Entity; }
    }

    public IncomingInvoiceFunctions(global::Sungero.Contracts.IIncomingInvoice entity) : base(entity) { }
  }
}

// ==================================================================
// IncomingInvoiceFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Functions
{
  internal static class IncomingInvoice
  {
    /// <redirect project="Sungero.Contracts.Server" type="Sungero.Contracts.Server.IncomingInvoiceFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::System.Linq.IQueryable<global::Sungero.Contracts.IIncomingInvoice> GetDuplicates(global::Sungero.Contracts.IIncomingInvoice incomingInvoice, global::Sungero.Docflow.IDocumentKind documentKind, global::System.String number, global::System.Nullable<global::System.DateTime> date, global::System.Nullable<global::System.Double> totalAmount, global::Sungero.Commons.ICurrency currency, global::Sungero.Parties.ICounterparty counterparty)
    {
      var __funcType = Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Contracts.Server.IncomingInvoiceFunctions");
      if (__funcType != null)
      {    
        var __funcMethod = __funcType.GetMethod("GetDuplicates",
          System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic,
          null, new System.Type[] { typeof(global::Sungero.Contracts.IIncomingInvoice), typeof(global::Sungero.Docflow.IDocumentKind), typeof(global::System.String), typeof(global::System.Nullable<global::System.DateTime>), typeof(global::System.Nullable<global::System.Double>), typeof(global::Sungero.Commons.ICurrency), typeof(global::Sungero.Parties.ICounterparty) }, null);
        return (global::System.Linq.IQueryable<global::Sungero.Contracts.IIncomingInvoice>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, null, new object[] { incomingInvoice, documentKind, number, date, totalAmount, currency, counterparty });
      }
      else
      {
        return global::Sungero.Contracts.Server.IncomingInvoiceFunctions.GetDuplicates(incomingInvoice, documentKind, number, date, totalAmount, currency, counterparty);
      }
    }
    /// <redirect project="Sungero.Contracts.Server" type="Sungero.Contracts.Server.IncomingInvoiceFunctions" />
    internal static  global::Sungero.Core.StateView GetDocumentSummary(global::Sungero.Contracts.IIncomingInvoice incomingInvoice)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)incomingInvoice).FunctionsContainer.ServerFunctions;
      var __funcMethod = __functions.GetType().GetMethod("GetDocumentSummary", new System.Type[] {  });
      return (global::Sungero.Core.StateView)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] {  });
    }
    /// <redirect project="Sungero.Contracts.Server" type="Sungero.Contracts.Server.IncomingInvoiceFunctions" />
    internal static  void SetLifeCycleStateDraft(global::Sungero.Contracts.IIncomingInvoice incomingInvoice)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)incomingInvoice).FunctionsContainer.ServerFunctions;
      var __funcMethod = __functions.GetType().GetMethod("SetLifeCycleStateDraft", new System.Type[] {  });
    global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] {  });
    }
    /// <redirect project="Sungero.Contracts.Server" type="Sungero.Contracts.Server.IncomingInvoiceFunctions" />
    internal static  void SetLifeCycleStateToPaid(global::Sungero.Contracts.IIncomingInvoice incomingInvoice)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)incomingInvoice).FunctionsContainer.ServerFunctions;
      var __funcMethod = __functions.GetType().GetMethod("SetLifeCycleStateToPaid", new System.Type[] {  });
    global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] {  });
    }
    /// <redirect project="Sungero.Contracts.Server" type="Sungero.Contracts.Server.IncomingInvoiceFunctions" />
    internal static  global::System.String GetNoteWithCounterpartySigningReason(global::Sungero.Contracts.IIncomingInvoice incomingInvoice)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)incomingInvoice).FunctionsContainer.ServerFunctions;
      var __funcMethod = __functions.GetType().GetMethod("GetNoteWithCounterpartySigningReason", new System.Type[] {  });
      return (global::System.String)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] {  });
    }

    /// <redirect project="Sungero.Contracts.Shared" type="Sungero.Contracts.Shared.IncomingInvoiceFunctions" />
    internal static  void SetRequiredProperties(global::Sungero.Contracts.IIncomingInvoice incomingInvoice)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)incomingInvoice).FunctionsContainer.SharedFunctions;
      var __funcMethod = __functions.GetType().GetMethod("SetRequiredProperties", new System.Type[] {  });
    global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] {  });
    }
    /// <redirect project="Sungero.Contracts.Shared" type="Sungero.Contracts.Shared.IncomingInvoiceFunctions" />
    internal static  global::System.Boolean HasEmptyRequiredProperties(global::Sungero.Contracts.IIncomingInvoice incomingInvoice)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)incomingInvoice).FunctionsContainer.SharedFunctions;
      var __funcMethod = __functions.GetType().GetMethod("HasEmptyRequiredProperties", new System.Type[] {  });
      return (global::System.Boolean)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] {  });
    }
    /// <redirect project="Sungero.Contracts.Shared" type="Sungero.Contracts.Shared.IncomingInvoiceFunctions" />
    internal static  global::System.Boolean IsVerificationModeSupported(global::Sungero.Contracts.IIncomingInvoice incomingInvoice)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)incomingInvoice).FunctionsContainer.SharedFunctions;
      var __funcMethod = __functions.GetType().GetMethod("IsVerificationModeSupported", new System.Type[] {  });
      return (global::System.Boolean)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] {  });
    }
    /// <redirect project="Sungero.Contracts.Shared" type="Sungero.Contracts.Shared.IncomingInvoiceFunctions" />
    internal static  void SetLifeCycleState(global::Sungero.Contracts.IIncomingInvoice incomingInvoice)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)incomingInvoice).FunctionsContainer.SharedFunctions;
      var __funcMethod = __functions.GetType().GetMethod("SetLifeCycleState", new System.Type[] {  });
    global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] {  });
    }
    /// <redirect project="Sungero.Contracts.Shared" type="Sungero.Contracts.Shared.IncomingInvoiceFunctions" />
    internal static  void ChangeRegistrationPaneVisibility(global::Sungero.Contracts.IIncomingInvoice incomingInvoice, global::System.Boolean needShow, global::System.Boolean repeatRegister)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)incomingInvoice).FunctionsContainer.SharedFunctions;
      var __funcMethod = __functions.GetType().GetMethod("ChangeRegistrationPaneVisibility", new System.Type[] { typeof(global::System.Boolean), typeof(global::System.Boolean) });
    global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] { needShow, repeatRegister });
    }
    /// <redirect project="Sungero.Contracts.Shared" type="Sungero.Contracts.Shared.IncomingInvoiceFunctions" />
    internal static  void FillName(global::Sungero.Contracts.IIncomingInvoice incomingInvoice)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)incomingInvoice).FunctionsContainer.SharedFunctions;
      var __funcMethod = __functions.GetType().GetMethod("FillName", new System.Type[] {  });
    global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] {  });
    }
    /// <redirect project="Sungero.Contracts.Shared" type="Sungero.Contracts.Shared.IncomingInvoiceFunctions" />
    internal static  void AddRelatedDocumentsToAttachmentGroup(global::Sungero.Contracts.IIncomingInvoice incomingInvoice, Sungero.Workflow.Interfaces.IWorkflowEntityAttachmentGroup group)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)incomingInvoice).FunctionsContainer.SharedFunctions;
      var __funcMethod = __functions.GetType().GetMethod("AddRelatedDocumentsToAttachmentGroup", new System.Type[] { typeof(Sungero.Workflow.Interfaces.IWorkflowEntityAttachmentGroup) });
    global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] { group });
    }
    /// <redirect project="Sungero.Contracts.Shared" type="Sungero.Contracts.Shared.IncomingInvoiceFunctions" />
    internal static  void RemoveRelatedDocumentsFromAttachmentGroup(global::Sungero.Contracts.IIncomingInvoice incomingInvoice, Sungero.Workflow.Interfaces.IWorkflowEntityAttachmentGroup group)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)incomingInvoice).FunctionsContainer.SharedFunctions;
      var __funcMethod = __functions.GetType().GetMethod("RemoveRelatedDocumentsFromAttachmentGroup", new System.Type[] { typeof(Sungero.Workflow.Interfaces.IWorkflowEntityAttachmentGroup) });
    global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] { group });
    }
    /// <redirect project="Sungero.Contracts.Shared" type="Sungero.Contracts.Shared.IncomingInvoiceFunctions" />
    internal static  void UpdateLifeCycle(global::Sungero.Contracts.IIncomingInvoice incomingInvoice, global::System.Nullable<global::Sungero.Core.Enumeration> registrationState, global::System.Nullable<global::Sungero.Core.Enumeration> approvalState, global::System.Nullable<global::Sungero.Core.Enumeration> counterpartyApprovalState)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)incomingInvoice).FunctionsContainer.SharedFunctions;
      var __funcMethod = __functions.GetType().GetMethod("UpdateLifeCycle", new System.Type[] { typeof(global::System.Nullable<global::Sungero.Core.Enumeration>), typeof(global::System.Nullable<global::Sungero.Core.Enumeration>), typeof(global::System.Nullable<global::Sungero.Core.Enumeration>) });
    global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] { registrationState, approvalState, counterpartyApprovalState });
    }
    /// <redirect project="Sungero.Contracts.Shared" type="Sungero.Contracts.Shared.IncomingInvoiceFunctions" />
    internal static  global::System.Boolean HaveDuplicates(global::Sungero.Contracts.IIncomingInvoice incomingInvoice, global::Sungero.Docflow.IDocumentKind documentKind, global::System.String number, global::System.Nullable<global::System.DateTime> date, global::System.Nullable<global::System.Double> totalAmount, global::Sungero.Commons.ICurrency currency, global::Sungero.Parties.ICounterparty counterparty)
    {
      var __funcType = Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Contracts.Shared.IncomingInvoiceFunctions");
      if (__funcType != null)
      {    
        var __funcMethod = __funcType.GetMethod("HaveDuplicates",
          System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic,
          null, new System.Type[] { typeof(global::Sungero.Contracts.IIncomingInvoice), typeof(global::Sungero.Docflow.IDocumentKind), typeof(global::System.String), typeof(global::System.Nullable<global::System.DateTime>), typeof(global::System.Nullable<global::System.Double>), typeof(global::Sungero.Commons.ICurrency), typeof(global::Sungero.Parties.ICounterparty) }, null);
        return (global::System.Boolean)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, null, new object[] { incomingInvoice, documentKind, number, date, totalAmount, currency, counterparty });
      }
      else
      {
        return global::Sungero.Contracts.Shared.IncomingInvoiceFunctions.HaveDuplicates(incomingInvoice, documentKind, number, date, totalAmount, currency, counterparty);
      }
    }
    /// <redirect project="Sungero.Contracts.Shared" type="Sungero.Contracts.Shared.IncomingInvoiceFunctions" />
    internal static  void FillLeadingDocument(global::Sungero.Contracts.IIncomingInvoice incomingInvoice, global::Sungero.Docflow.IOfficialDocument leadingDocument)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)incomingInvoice).FunctionsContainer.SharedFunctions;
      var __funcMethod = __functions.GetType().GetMethod("FillLeadingDocument", new System.Type[] { typeof(global::Sungero.Docflow.IOfficialDocument) });
    global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] { leadingDocument });
    }

  }
}

// ==================================================================
// IncomingInvoiceServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Server
{
  public class IncomingInvoiceServerPublicFunctions : global::Sungero.Contracts.Server.IIncomingInvoiceServerPublicFunctions
  {
  }
}

// ==================================================================
// IncomingInvoiceQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Queries
{
  public class IncomingInvoice
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.Contracts.Server.IncomingInvoice.IncomingInvoiceQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}

// ==================================================================
// IncomingInvoiceServerHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts
{
  public partial class IncomingInvoiceConvertingFromServerHandler : global::Sungero.Docflow.AccountingDocumentBaseConvertingFromServerHandler
  { 
    private global::Sungero.Contracts.IIncomingInvoiceInfo _info
    {
      get { return (global::Sungero.Contracts.IIncomingInvoiceInfo)this._Info; }
    }

    public IncomingInvoiceConvertingFromServerHandler(global::Sungero.Content.IElectronicDocument source, global::Sungero.Contracts.IIncomingInvoiceInfo info)
      : base(source, info)
    {
    }
  }
}
