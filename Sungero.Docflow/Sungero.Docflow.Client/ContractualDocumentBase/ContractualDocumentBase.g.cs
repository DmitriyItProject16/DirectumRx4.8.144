
// ==================================================================
// ContractualDocumentBase.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class ContractualDocumentBase :
    global::Sungero.Docflow.Client.OfficialDocument, global::Sungero.Docflow.IContractualDocumentBase
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("454df3c6-b850-47cf-897f-a10d767baa77");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Docflow.Client.ContractualDocumentBase.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Docflow.IContractualDocumentBase, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.Name; }
        set { this.Name = value; }
      }

      public override string DisplayPropertyName
      {
        get { return "Name"; }
      }


    public new global::Sungero.Docflow.IContractualDocumentBaseState State
    {
      get
      {
        return (global::Sungero.Docflow.IContractualDocumentBaseState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Docflow.Shared.ContractualDocumentBaseState(this);
    }

    public new global::Sungero.Docflow.IContractualDocumentBaseInfo Info
    {
      get
      {
        return (global::Sungero.Docflow.IContractualDocumentBaseInfo)base.Info;
      }
    }

    public new global::Sungero.Docflow.IContractualDocumentBaseAccessRights AccessRights
    {
      get
      {
        return (global::Sungero.Docflow.IContractualDocumentBaseAccessRights)base.AccessRights;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Docflow.Client.ContractualDocumentBaseAccessRights(this);
    }

        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Double?> _TotalAmount;

        public virtual global::System.Double? TotalAmount
        {
          get { return this._TotalAmount.Value; }
          set { this._TotalAmount.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _CounterpartySigningReason;

        public virtual global::System.String CounterpartySigningReason
        {
          get { return this._CounterpartySigningReason.Value; }
          set { this._CounterpartySigningReason.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Double?> _VatAmount;

        public virtual global::System.Double? VatAmount
        {
          get { return this._VatAmount.Value; }
          set { this._VatAmount.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Double?> _NetAmount;

        public virtual global::System.Double? NetAmount
        {
          get { return this._NetAmount.Value; }
          set { this._NetAmount.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _PurchaseOrderNumber;

        public virtual global::System.String PurchaseOrderNumber
        {
          get { return this._PurchaseOrderNumber.Value; }
          set { this._PurchaseOrderNumber.Value = value; }
        }




              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Parties.ICounterparty> _Counterparty;

              public virtual global::Sungero.Parties.ICounterparty Counterparty
              {
              get
              {
                return this._Counterparty.Value as global::Sungero.Parties.ICounterparty;
              }

              set
              {
                (this._Counterparty as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Parties.IContact> _CounterpartySignatory;

              public virtual global::Sungero.Parties.IContact CounterpartySignatory
              {
              get
              {
                return this._CounterpartySignatory.Value as global::Sungero.Parties.IContact;
              }

              set
              {
                (this._CounterpartySignatory as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Commons.ICurrency> _Currency;

              public virtual global::Sungero.Commons.ICurrency Currency
              {
              get
              {
                return this._Currency.Value as global::Sungero.Commons.ICurrency;
              }

              set
              {
                (this._Currency as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Commons.IVatRate> _VatRate;

              public virtual global::Sungero.Commons.IVatRate VatRate
              {
              get
              {
                return this._VatRate.Value as global::Sungero.Commons.IVatRate;
              }

              set
              {
                (this._VatRate as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }










    #endregion

    #region Methods


    protected override global::Sungero.Domain.Client.EntityFunctions CreateClientFunctions()
    {
      return new global::Sungero.Docflow.Client.ContractualDocumentBaseFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Docflow.Shared.ContractualDocumentBaseFunctions(this);
    }
    protected override object CreateHandlers() {
      return new global::Sungero.Docflow.ContractualDocumentBaseClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Sungero.Docflow.ContractualDocumentBaseSharedHandlers(this);
    }

    #endregion

    #region Framework events

    protected void CounterpartyChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.ContractualDocumentBaseCounterpartyChangedEventArgs(this.State.Properties.Counterparty, this.Counterparty, this);
     ((global::Sungero.Docflow.IContractualDocumentBaseSharedHandlers)this.SharedHandlers).CounterpartyChanged(args);
    }

    protected void CounterpartySignatoryChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.ContractualDocumentBaseCounterpartySignatoryChangedEventArgs(this.State.Properties.CounterpartySignatory, this.CounterpartySignatory, this);
     ((global::Sungero.Docflow.IContractualDocumentBaseSharedHandlers)this.SharedHandlers).CounterpartySignatoryChanged(args);
    }

    protected void TotalAmountChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DoublePropertyChangedEventArgs(this.State.Properties.TotalAmount, this.TotalAmount, this);
     ((global::Sungero.Docflow.IContractualDocumentBaseSharedHandlers)this.SharedHandlers).TotalAmountChanged(args);
    }

    protected void CurrencyChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.ContractualDocumentBaseCurrencyChangedEventArgs(this.State.Properties.Currency, this.Currency, this);
     ((global::Sungero.Docflow.IContractualDocumentBaseSharedHandlers)this.SharedHandlers).CurrencyChanged(args);
    }



    protected void CounterpartySigningReasonChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.CounterpartySigningReason, this.CounterpartySigningReason, this);
     ((global::Sungero.Docflow.IContractualDocumentBaseSharedHandlers)this.SharedHandlers).CounterpartySigningReasonChanged(args);
    }

    protected void VatRateChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.ContractualDocumentBaseVatRateChangedEventArgs(this.State.Properties.VatRate, this.VatRate, this);
     ((global::Sungero.Docflow.IContractualDocumentBaseSharedHandlers)this.SharedHandlers).VatRateChanged(args);
    }

    protected void VatAmountChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DoublePropertyChangedEventArgs(this.State.Properties.VatAmount, this.VatAmount, this);
     ((global::Sungero.Docflow.IContractualDocumentBaseSharedHandlers)this.SharedHandlers).VatAmountChanged(args);
    }

    protected void NetAmountChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DoublePropertyChangedEventArgs(this.State.Properties.NetAmount, this.NetAmount, this);
     ((global::Sungero.Docflow.IContractualDocumentBaseSharedHandlers)this.SharedHandlers).NetAmountChanged(args);
    }

    protected void PurchaseOrderNumberChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.PurchaseOrderNumber, this.PurchaseOrderNumber, this);
     ((global::Sungero.Docflow.IContractualDocumentBaseSharedHandlers)this.SharedHandlers).PurchaseOrderNumberChanged(args);
    }





  protected global::Sungero.Parties.ICounterparty CounterpartyValueInputHandler(global::Sungero.Parties.ICounterparty value)
  {
    var args = new global::Sungero.Docflow.Client.ContractualDocumentBaseCounterpartyValueInputEventArgs(this.Counterparty, value, this, this.Info.Properties.Counterparty);
    ((global::Sungero.Docflow.ContractualDocumentBaseClientHandlers)this.Handlers).CounterpartyValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Parties.IContact CounterpartySignatoryValueInputHandler(global::Sungero.Parties.IContact value)
  {
    var args = new global::Sungero.Docflow.Client.ContractualDocumentBaseCounterpartySignatoryValueInputEventArgs(this.CounterpartySignatory, value, this, this.Info.Properties.CounterpartySignatory);
    ((global::Sungero.Docflow.ContractualDocumentBaseClientHandlers)this.Handlers).CounterpartySignatoryValueInput(args);
    return args.NewValue;
  }

  protected global::System.Double? TotalAmountValueInputHandler(global::System.Double? value)
  {
    var args = new global::Sungero.Presentation.DoubleValueInputEventArgs(this.TotalAmount, value, this, this.Info.Properties.TotalAmount);
    ((global::Sungero.Docflow.ContractualDocumentBaseClientHandlers)this.Handlers).TotalAmountValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Commons.ICurrency CurrencyValueInputHandler(global::Sungero.Commons.ICurrency value)
  {
    var args = new global::Sungero.Docflow.Client.ContractualDocumentBaseCurrencyValueInputEventArgs(this.Currency, value, this, this.Info.Properties.Currency);
    ((global::Sungero.Docflow.ContractualDocumentBaseClientHandlers)this.Handlers).CurrencyValueInput(args);
    return args.NewValue;
  }



  protected global::System.String CounterpartySigningReasonValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.CounterpartySigningReason, value, this, this.Info.Properties.CounterpartySigningReason);
    ((global::Sungero.Docflow.ContractualDocumentBaseClientHandlers)this.Handlers).CounterpartySigningReasonValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Commons.IVatRate VatRateValueInputHandler(global::Sungero.Commons.IVatRate value)
  {
    var args = new global::Sungero.Docflow.Client.ContractualDocumentBaseVatRateValueInputEventArgs(this.VatRate, value, this, this.Info.Properties.VatRate);
    ((global::Sungero.Docflow.ContractualDocumentBaseClientHandlers)this.Handlers).VatRateValueInput(args);
    return args.NewValue;
  }

  protected global::System.Double? VatAmountValueInputHandler(global::System.Double? value)
  {
    var args = new global::Sungero.Presentation.DoubleValueInputEventArgs(this.VatAmount, value, this, this.Info.Properties.VatAmount);
    ((global::Sungero.Docflow.ContractualDocumentBaseClientHandlers)this.Handlers).VatAmountValueInput(args);
    return args.NewValue;
  }

  protected global::System.Double? NetAmountValueInputHandler(global::System.Double? value)
  {
    var args = new global::Sungero.Presentation.DoubleValueInputEventArgs(this.NetAmount, value, this, this.Info.Properties.NetAmount);
    ((global::Sungero.Docflow.ContractualDocumentBaseClientHandlers)this.Handlers).NetAmountValueInput(args);
    return args.NewValue;
  }

  protected global::System.String PurchaseOrderNumberValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.PurchaseOrderNumber, value, this, this.Info.Properties.PurchaseOrderNumber);
    ((global::Sungero.Docflow.ContractualDocumentBaseClientHandlers)this.Handlers).PurchaseOrderNumberValueInput(args);
    return args.NewValue;
  }



    #endregion

    #region Constructors























              protected virtual void InitCounterpartyNavigationProperty()
              {
                this._Counterparty = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Parties.ICounterparty>("Counterparty", this);
                this._Counterparty.ValueChanged += (sender, e) => { this.CounterpartyChangedHandler(); };
                this.AddProperty(this._Counterparty as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitCounterpartySignatoryNavigationProperty()
              {
                this._CounterpartySignatory = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Parties.IContact>("CounterpartySignatory", this);
                this._CounterpartySignatory.ValueChanged += (sender, e) => { this.CounterpartySignatoryChangedHandler(); };
                this.AddProperty(this._CounterpartySignatory as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitCurrencyNavigationProperty()
              {
                this._Currency = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Commons.ICurrency>("Currency", this);
                this._Currency.ValueChanged += (sender, e) => { this.CurrencyChangedHandler(); };
                this.AddProperty(this._Currency as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitVatRateNavigationProperty()
              {
                this._VatRate = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Commons.IVatRate>("VatRate", this);
                this._VatRate.ValueChanged += (sender, e) => { this.VatRateChangedHandler(); };
                this.AddProperty(this._VatRate as global::Sungero.Domain.Client.IProperty);
              }



            protected override void InitVersionsCollectionProperty()
            {
              this._Versions = new global::Sungero.Domain.Client.ListProperty<global::Sungero.Docflow.IContractualDocumentBaseVersions>("Versions", this);
              this._Versions.ValueChanged += (sender, e) => { this.VersionsChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._Versions);
              this.SetVersionsEventHandlers();
            }

            protected override void InitTrackingCollectionProperty()
            {
              this._Tracking = new global::Sungero.Domain.Client.ListProperty<global::Sungero.Docflow.IContractualDocumentBaseTracking>("Tracking", this);
              this._Tracking.ValueChanged += (sender, e) => { this.TrackingChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._Tracking);
              this.SetTrackingEventHandlers();
            }


    public ContractualDocumentBase()
    {
            this._TotalAmount = new global::Sungero.Domain.Client.SimpleProperty<global::System.Double?>("TotalAmount", this);
            this._TotalAmount.ValueChanged += (sender, e) => { this.TotalAmountChangedHandler(); };
            this.AddProperty(this._TotalAmount);

            this._CounterpartySigningReason = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("CounterpartySigningReason", this);
            this._CounterpartySigningReason.ValueChanged += (sender, e) => { this.CounterpartySigningReasonChangedHandler(); };
            this.AddProperty(this._CounterpartySigningReason);

            this._VatAmount = new global::Sungero.Domain.Client.SimpleProperty<global::System.Double?>("VatAmount", this);
            this._VatAmount.ValueChanged += (sender, e) => { this.VatAmountChangedHandler(); };
            this.AddProperty(this._VatAmount);

            this._NetAmount = new global::Sungero.Domain.Client.SimpleProperty<global::System.Double?>("NetAmount", this);
            this._NetAmount.ValueChanged += (sender, e) => { this.NetAmountChangedHandler(); };
            this.AddProperty(this._NetAmount);

            this._PurchaseOrderNumber = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("PurchaseOrderNumber", this);
            this._PurchaseOrderNumber.ValueChanged += (sender, e) => { this.PurchaseOrderNumberChangedHandler(); };
            this.AddProperty(this._PurchaseOrderNumber);

            this.InitCounterpartyNavigationProperty();

            this.InitCounterpartySignatoryNavigationProperty();

            this.InitCurrencyNavigationProperty();

            this.InitVatRateNavigationProperty();








    }

    #endregion

  }
}

// ==================================================================
// ContractualDocumentBasePresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class ContractualDocumentBasePresenter<T> :
    global::Sungero.Docflow.Client.OfficialDocumentPresenter<T>
    where T : class, global::Sungero.Docflow.IContractualDocumentBase
  {
    #region Fields and properties

          private global::System.Windows.Input.ICommand _PrintEnvelopeCommand;

          public global::System.Windows.Input.ICommand PrintEnvelopeCommand
          {
            get
            {
              if (this._PrintEnvelopeCommand == null)
                  this._PrintEnvelopeCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("PrintEnvelope", this, this.PrintEnvelope, this.CanPrintEnvelope) { IsEmptyParameterAllowed = true };
              return this._PrintEnvelopeCommand;
            }
          }
          private global::System.Windows.Input.ICommand _PrintEnvelopeCardCommand;

          public global::System.Windows.Input.ICommand PrintEnvelopeCardCommand
          {
            get
            {
              if (this._PrintEnvelopeCardCommand == null)
                  this._PrintEnvelopeCardCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("PrintEnvelopeCard", this, this.PrintEnvelopeCard, this.CanPrintEnvelopeCard) { IsEmptyParameterAllowed = true };
              return this._PrintEnvelopeCardCommand;
            }
          }




    #endregion

    #region Methods

              private bool CanPrintEnvelope(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                var entities = new global::System.Collections.ObjectModel.Collection<T> { entity };
                return global::Sungero.Domain.Client.ActionExecutor.CanExecuteEntityCollectionAction<
                  global::Sungero.Docflow.Client.ContractualDocumentBaseCollectionActions, global::Sungero.Domain.Client.WpfCanExecuteActionArgs>(entities, args,
                    actionHandlers => (global::System.Func<global::Sungero.Domain.Client.WpfCanExecuteActionArgs, bool>)actionHandlers.CanPrintEnvelope);
              }

              private void PrintEnvelope(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.PrintEnvelope);
                var entities = new global::System.Collections.ObjectModel.Collection<T> { entity };
                global::Sungero.Domain.Client.ActionExecutor.ExecuteEntityCollectionAction<
                  global::Sungero.Docflow.Client.ContractualDocumentBaseCollectionActions, global::Sungero.Domain.Client.WpfExecuteActionArgs>(entities, args,
                    actionHandlers => (global::System.Action<global::Sungero.Domain.Client.WpfExecuteActionArgs>)actionHandlers.PrintEnvelope);
              }
              private bool CanPrintEnvelopeCard(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Docflow.Client.ContractualDocumentBaseActions)(entity as Sungero.Docflow.Client.ContractualDocumentBase).ActionsHandlers).CanPrintEnvelopeCard(args);
              }

              private void PrintEnvelopeCard(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.PrintEnvelopeCard);
                ((Sungero.Docflow.Client.ContractualDocumentBaseActions)(entity as Sungero.Docflow.Client.ContractualDocumentBase).ActionsHandlers).PrintEnvelopeCard(args);
              }


    #endregion

    #region Framework events

    protected override void EntityPropertyChangedEventHandler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
    {
      base.EntityPropertyChangedEventHandler(sender, e);
    }

    #endregion

              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _CounterpartyCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter CounterpartyCollectionPresenter
              {
          get { return this._CounterpartyCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _CounterpartySignatoryCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter CounterpartySignatoryCollectionPresenter
              {
          get { return this._CounterpartySignatoryCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _CurrencyCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter CurrencyCollectionPresenter
              {
          get { return this._CurrencyCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _VatRateCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter VatRateCollectionPresenter
              {
          get { return this._VatRateCollectionPresenter; }
        }



    #region Constructors

    private void Init()
    {
              this._AssociatedApplicationCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Content.IAssociatedApplication>(() => this.Entity.Id, typeof(T), "AssociatedApplication");

              this._DeliveryMethodCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.IMailDeliveryMethod>(() => this.Entity.Id, typeof(T), "DeliveryMethod");

              this._CaseFileCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.ICaseFile>(() => this.Entity, typeof(T), "CaseFile");

              this._DeliveredToCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "DeliveredTo");

              this._ResponsibleForReturnEmployeeCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "ResponsibleForReturnEmployee");

              this._AssigneeCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "Assignee");

              this._PreparedByCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "PreparedBy");

              this._ProjectCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.IProjectBase>(() => this.Entity.Id, typeof(T), "Project");

              this._LeadingDocumentCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.IOfficialDocument>(() => this.Entity.Id, typeof(T), "LeadingDocument");

              this._StorageCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IStorage>(() => this.Entity.Id, typeof(T), "Storage");

              this._TopicCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.ITopic>(() => this.Entity.Id, typeof(T), "Topic");

              this._SubtopicCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.ITopic>(() => this.Entity, typeof(T), "Subtopic");

              this._OurSigningReasonCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.ISignatureSetting>(() => this.Entity, typeof(T), "OurSigningReason");

              this._AuthorCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IUser>(() => this.Entity.Id, typeof(T), "Author");

              this._DocumentRegisterCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.IDocumentRegister>(() => this.Entity, typeof(T), "DocumentRegister");

              this._DocumentKindCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.IDocumentKind>(() => this.Entity, typeof(T), "DocumentKind");

              this._BusinessUnitCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IBusinessUnit>(() => this.Entity.Id, typeof(T), "BusinessUnit");

              this._OurSignatoryCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Company.IEmployee>(() => this.Entity, typeof(T), "OurSignatory");

              this._DocumentGroupCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.IDocumentGroupBase>(() => this.Entity, typeof(T), "DocumentGroup");

              this._DepartmentCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IDepartment>(() => this.Entity.Id, typeof(T), "Department");

                  this._CounterpartyCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Parties.ICounterparty>(global::System.Guid.Parse("f819af65-5a7c-4f59-87f3-f5f62106d162"));
              this._CounterpartyCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Parties.ICounterparty>(() => this.Entity.Id, typeof(T), "Counterparty");

                  this._CounterpartySignatoryCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Parties.IContact>(global::System.Guid.Parse("2ff9051c-6018-457d-9c2d-082b1ce315cd"));
              this._CounterpartySignatoryCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Parties.IContact>(() => this.Entity.Id, typeof(T), "CounterpartySignatory");

                  this._CurrencyCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Commons.ICurrency>(global::System.Guid.Parse("ca562f2d-d3c7-448f-a648-b858e8d2fb2a"));
              this._CurrencyCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Commons.ICurrency>(() => this.Entity.Id, typeof(T), "Currency");

                  this._VatRateCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Commons.IVatRate>(global::System.Guid.Parse("38f94413-bf41-4f87-b5a7-cf9f1485d61f"));
              this._VatRateCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Commons.IVatRate>(() => this.Entity.Id, typeof(T), "VatRate");


                        this._VersionsAuthorCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IUser>(() => this.Entity.Id, typeof(Sungero.Docflow.IContractualDocumentBaseVersions), "Author");

                        this._VersionsModifiedByCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IUser>(() => this.Entity.Id, typeof(Sungero.Docflow.IContractualDocumentBaseVersions), "ModifiedBy");

                        this._VersionsAssociatedApplicationCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Content.IAssociatedApplication>(() => this.Entity.Id, typeof(Sungero.Docflow.IContractualDocumentBaseVersions), "AssociatedApplication");

                        this._VersionsBodyAssociatedApplicationCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Content.IAssociatedApplication>(() => this.Entity.Id, typeof(Sungero.Docflow.IContractualDocumentBaseVersions), "BodyAssociatedApplication");


                        this._TrackingDeliveredToCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(Sungero.Docflow.IContractualDocumentBaseTracking), "DeliveredTo");

                        this._TrackingReturnTaskCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Workflow.ITask>(() => this.Entity.Id, typeof(Sungero.Docflow.IContractualDocumentBaseTracking), "ReturnTask");



    }

    public ContractualDocumentBasePresenter()
    {
      this.Init();
    }

    #endregion
  }
}

// ==================================================================
// ContractualDocumentBaseCollectionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class ContractualDocumentBaseCollectionPresenter<T> : 
    global::Sungero.Docflow.Client.OfficialDocumentCollectionPresenter<T>
    where T: class, global::Sungero.Docflow.IContractualDocumentBase
  {
    #region Actions

          private global::System.Windows.Input.ICommand _PrintEnvelopeCommand;  

          public global::System.Windows.Input.ICommand PrintEnvelopeCommand 
          { 
            get
            { 
              if (this._PrintEnvelopeCommand == null)
                this._PrintEnvelopeCommand = new global::Sungero.Domain.Client.EntityCollectionCommand<T>("PrintEnvelope", this, this.PrintEnvelope, this.CanPrintEnvelope) { IsEmptyParameterAllowed = true };
              return this._PrintEnvelopeCommand; 
            }
          }



    #endregion

    #region Methods

        private bool CanPrintEnvelope(global::System.Collections.Generic.ICollection<T> entities)
        {
          var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, null, this);
          return global::Sungero.Domain.Client.ActionExecutor.CanExecuteEntityCollectionAction<
            global::Sungero.Docflow.Client.ContractualDocumentBaseCollectionActions, global::Sungero.Domain.Client.WpfCanExecuteActionArgs>(entities, args,
              actionHandlers => (global::System.Func<global::Sungero.Domain.Client.WpfCanExecuteActionArgs, bool>)actionHandlers.CanPrintEnvelope);
        }

        private void PrintEnvelope(global::System.Collections.Generic.ICollection<T> entities)
        {
          var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, null, this);
          global::Sungero.Domain.Client.ActionExecutor.ExecuteEntityCollectionAction<
            global::Sungero.Docflow.Client.ContractualDocumentBaseCollectionActions, global::Sungero.Domain.Client.WpfExecuteActionArgs>(entities, args,
              actionHandlers => (global::System.Action<global::Sungero.Domain.Client.WpfExecuteActionArgs>)actionHandlers.PrintEnvelope);
        }



    #endregion

    public ContractualDocumentBaseCollectionPresenter(global::System.Linq.IQueryable<T> query, OnLookup onLookup)
      : base(query, onLookup)
    {
    }

    public ContractualDocumentBaseCollectionPresenter(global::System.Linq.IQueryable<T> query)
      : this(query, null) { }

    public ContractualDocumentBaseCollectionPresenter(OnLookup onLookup)
      : this(null, onLookup) { }

    public ContractualDocumentBaseCollectionPresenter()
      : this(null, null) { }
  }
}

// ==================================================================
// ContractualDocumentBaseRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{ 
  public class ContractualDocumentBaseRepositoryImplementer<T> : 
      global::Sungero.Docflow.Client.OfficialDocumentRepositoryImplementer<T>,
      global::Sungero.Docflow.IContractualDocumentBaseRepositoryImplementer<T>
      where T : global::Sungero.Docflow.IContractualDocumentBase
    {
       public new global::Sungero.Docflow.IContractualDocumentBaseAccessRights AccessRights
       {
          get { return (global::Sungero.Docflow.IContractualDocumentBaseAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Docflow.IContractualDocumentBaseInfo Info
       {
          get { return (global::Sungero.Docflow.IContractualDocumentBaseInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Docflow.Client.ContractualDocumentBaseTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// ContractualDocumentBaseAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class ContractualDocumentBaseAccessRights : 
    Sungero.Docflow.Client.OfficialDocumentAccessRights, Sungero.Docflow.IContractualDocumentBaseAccessRights
  {

    public ContractualDocumentBaseAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class ContractualDocumentBaseTypeAccessRights : 
    Sungero.Docflow.Client.OfficialDocumentTypeAccessRights, Sungero.Docflow.IContractualDocumentBaseAccessRights
  {

    public ContractualDocumentBaseTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}
