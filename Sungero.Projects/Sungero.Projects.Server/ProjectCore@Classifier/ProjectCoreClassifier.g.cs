
// ==================================================================
// ProjectCoreClassifier.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Server
{
  public class ProjectCoreClassifierFilterForDocumentKind<TQueryEntity, TSourceEntity, TRootEntity>
    : global::Sungero.Domain.ChildEntityPropertyFilterBase<TQueryEntity, TSourceEntity, TRootEntity>
    where TQueryEntity : class, global::Sungero.Docflow.IDocumentKind
    where TSourceEntity : class, global::Sungero.Projects.IProjectCoreClassifier
    where TRootEntity : class, global::Sungero.Projects.IProjectCore
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity, TRootEntity rootEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Projects.ProjectCoreClassifierDocumentKindPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { sourceEntity, rootEntity });
        var methodInfo = genericType.GetMethod("ClassifierDocumentKindFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Projects.ProjectCoreClassifierDocumentKindPropertyFilteringServerHandler<TQueryEntity>(sourceEntity, rootEntity).ClassifierDocumentKindFiltering(query, args);
      }
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectCoreClassifierFilterForDocumentKind(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectCoreClassifierSearchFilterForDocumentKind<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Docflow.IDocumentKind
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Projects.ProjectCoreClassifierDocumentKindSearchPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType);
        var methodInfo = genericType.GetMethod("ClassifierDocumentKindSearchDialogFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Projects.ProjectCoreClassifierDocumentKindSearchPropertyFilteringServerHandler<TQueryEntity>().ClassifierDocumentKindSearchDialogFiltering(query, args);
      }
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectCoreClassifierSearchFilterForDocumentKind(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectCoreClassifierFilterForFolder<TQueryEntity, TSourceEntity, TRootEntity>
    : global::Sungero.Domain.ChildEntityPropertyFilterBase<TQueryEntity, TSourceEntity, TRootEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IFolder
    where TSourceEntity : class, global::Sungero.Projects.IProjectCoreClassifier
    where TRootEntity : class, global::Sungero.Projects.IProjectCore
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity, TRootEntity rootEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Projects.ProjectCoreClassifierFolderPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { sourceEntity, rootEntity });
        var methodInfo = genericType.GetMethod("ClassifierFolderFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Projects.ProjectCoreClassifierFolderPropertyFilteringServerHandler<TQueryEntity>(sourceEntity, rootEntity).ClassifierFolderFiltering(query, args);
      }
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectCoreClassifierFilterForFolder(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectCoreClassifierSearchFilterForFolder<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IFolder
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Projects.ProjectCoreClassifierFolderSearchPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType);
        var methodInfo = genericType.GetMethod("ClassifierFolderSearchDialogFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Projects.ProjectCoreClassifierFolderSearchPropertyFilteringServerHandler<TQueryEntity>().ClassifierFolderSearchDialogFiltering(query, args);
      }
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectCoreClassifierSearchFilterForFolder(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Projects.Server.ProjectCoreClassifierFilterForDocumentKind<global::Sungero.Docflow.IDocumentKind, global::Sungero.Projects.IProjectCoreClassifier, global::Sungero.Projects.IProjectCore>), "DocumentKind")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Projects.Server.ProjectCoreClassifierSearchFilterForDocumentKind<global::Sungero.Docflow.IDocumentKind>), "DocumentKind")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Projects.Server.ProjectCoreClassifierFilterForFolder<global::Sungero.CoreEntities.IFolder, global::Sungero.Projects.IProjectCoreClassifier, global::Sungero.Projects.IProjectCore>), "Folder")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Projects.Server.ProjectCoreClassifierSearchFilterForFolder<global::Sungero.CoreEntities.IFolder>), "Folder")]


  public class ProjectCoreClassifier :
    global::Sungero.Domain.ChildEntity, global::Sungero.Projects.IProjectCoreClassifier
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("fa6cf309-21c1-4c6f-8221-6ad7d332ea33");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Projects.Server.ProjectCoreClassifier.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Projects.IProjectCoreClassifier, Sungero.Domain.Interfaces"; }
    }

    public new virtual global::Sungero.Projects.IProjectCoreClassifierState State
    {
      get { return (global::Sungero.Projects.IProjectCoreClassifierState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Projects.Shared.ProjectCoreClassifierState(this);
    }

    public new virtual global::Sungero.Projects.IProjectCoreClassifierInfo Info
    {
      get { return (global::Sungero.Projects.IProjectCoreClassifierInfo)base.Info; }
    }


    public global::Sungero.Projects.IProjectCore ProjectCore { get; set; }

    public override global::Sungero.Domain.Shared.IEntity RootEntity
    {
      get { return this.ProjectCore; }
      set { this.ProjectCore = (global::Sungero.Projects.IProjectCore)value; }
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.Projects.ProjectCoreClassifierSharedHandlers(this);
    }

    private global::System.String _FolderName;
    public virtual global::System.String FolderName
    {
      get
      {
        return this._FolderName;
      }

      set
      {
        this.SetPropertyValue("FolderName", this._FolderName, value, (propertyValue) => { this._FolderName = propertyValue; }, this.FolderNameChangedHandler);
      }
    }







    private global::Sungero.Docflow.IDocumentKind _DocumentKind;
    public virtual global::Sungero.Docflow.IDocumentKind DocumentKind
    {
      get
      {
        return this._DocumentKind;
      }

      set
      {
        this.SetPropertyValue("DocumentKind", this._DocumentKind, value, (propertyValue) => { this._DocumentKind = propertyValue; }, this.DocumentKindChangedHandler);
      }
    }
    private global::Sungero.CoreEntities.IFolder _Folder;
    public virtual global::Sungero.CoreEntities.IFolder Folder
    {
      get
      {
        return this._Folder;
      }

      set
      {
        this.SetPropertyValue("Folder", this._Folder, value, (propertyValue) => { this._Folder = propertyValue; }, this.FolderChangedHandler);
      }
    }




    #region Framework events

    protected void FolderNameChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.FolderName, this.FolderName, this);
     ((global::Sungero.Projects.IProjectCoreClassifierSharedHandlers)this.SharedHandlers).ClassifierFolderNameChanged(args);
    }

    protected void DocumentKindChangedHandler()
    {
      var args = new global::Sungero.Projects.Shared.ProjectCoreClassifierDocumentKindChangedEventArgs(this.State.Properties.DocumentKind, this.DocumentKind, this);
     ((global::Sungero.Projects.IProjectCoreClassifierSharedHandlers)this.SharedHandlers).ClassifierDocumentKindChanged(args);
    }

    protected void FolderChangedHandler()
    {
      var args = new global::Sungero.Projects.Shared.ProjectCoreClassifierFolderChangedEventArgs(this.State.Properties.Folder, this.Folder, this);
     ((global::Sungero.Projects.IProjectCoreClassifierSharedHandlers)this.SharedHandlers).ClassifierFolderChanged(args);
    }



    #endregion


    public ProjectCoreClassifier()
    {
    }

  }
}

// ==================================================================
// ProjectCoreClassifierHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects
{
  public partial class ProjectCoreClassifierDocumentKindPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.ChildEntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Docflow.IDocumentKind
  {
    private global::Sungero.Projects.IProjectCoreClassifier _obj
    {
      get { return (global::Sungero.Projects.IProjectCoreClassifier)this.Entity; }
    }

    private global::Sungero.Projects.IProjectCore _root
    {
      get { return (global::Sungero.Projects.IProjectCore)this.Root; }
    }

    public ProjectCoreClassifierDocumentKindPropertyFilteringServerHandler(global::Sungero.Projects.IProjectCoreClassifier entity, global::Sungero.Projects.IProjectCore root)
      : base(entity, root)
    {
    }
  }

  public partial class ProjectCoreClassifierDocumentKindSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Docflow.IDocumentKind
  {

    public virtual global::System.Linq.IQueryable<T> ClassifierDocumentKindSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ProjectCoreClassifierDocumentKindSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ProjectCoreClassifierFolderPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.ChildEntityPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IFolder
  {
    private global::Sungero.Projects.IProjectCoreClassifier _obj
    {
      get { return (global::Sungero.Projects.IProjectCoreClassifier)this.Entity; }
    }

    private global::Sungero.Projects.IProjectCore _root
    {
      get { return (global::Sungero.Projects.IProjectCore)this.Root; }
    }

    public virtual global::System.Linq.IQueryable<T> ClassifierFolderFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ProjectCoreClassifierFolderPropertyFilteringServerHandler(global::Sungero.Projects.IProjectCoreClassifier entity, global::Sungero.Projects.IProjectCore root)
      : base(entity, root)
    {
    }
  }

  public partial class ProjectCoreClassifierFolderSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IFolder
  {

    public virtual global::System.Linq.IQueryable<T> ClassifierFolderSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ProjectCoreClassifierFolderSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



}

// ==================================================================
// ProjectCoreClassifierEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Server
{
}
