
// ==================================================================
// MessageQueueItem.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{
  public class MessageQueueItem :
    global::Sungero.ExchangeCore.Client.QueueItemBase, global::Sungero.ExchangeCore.IMessageQueueItem
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("f9a3ec37-0fd4-4343-a295-9394ba830a0e");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.ExchangeCore.Client.MessageQueueItem.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.ExchangeCore.IMessageQueueItem, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.Name; }
        set { this.Name = value; }
      }

      public override string DisplayPropertyName
      {
        get { return "Name"; }
      }


    public new global::Sungero.ExchangeCore.IMessageQueueItemState State
    {
      get
      {
        return (global::Sungero.ExchangeCore.IMessageQueueItemState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.ExchangeCore.Shared.MessageQueueItemState(this);
    }

    public new global::Sungero.ExchangeCore.IMessageQueueItemInfo Info
    {
      get
      {
        return (global::Sungero.ExchangeCore.IMessageQueueItemInfo)base.Info;
      }
    }

    public new global::Sungero.ExchangeCore.IMessageQueueItemAccessRights AccessRights
    {
      get
      {
        return (global::Sungero.ExchangeCore.IMessageQueueItemAccessRights)base.AccessRights;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.ExchangeCore.Client.MessageQueueItemAccessRights(this);
    }

        protected global::Sungero.Domain.Client.SimpleProperty<global::System.DateTime?> _Created;

        public virtual global::System.DateTime? Created
        {
          get { return this._Created.Value; }
          set { this._Created.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _CounterpartyExternalId;

        public virtual global::System.String CounterpartyExternalId
        {
          get { return this._CounterpartyExternalId.Value; }
          set { this._CounterpartyExternalId.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _RootMessageId;

        public virtual global::System.String RootMessageId
        {
          get { return this._RootMessageId.Value; }
          set { this._RootMessageId.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Boolean?> _IsRootMessage;

        public virtual global::System.Boolean? IsRootMessage
        {
          get { return this._IsRootMessage.Value; }
          set { this._IsRootMessage.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Boolean?> _IsManualRestart;

        public virtual global::System.Boolean? IsManualRestart
        {
          get { return this._IsManualRestart.Value; }
          set { this._IsManualRestart.Value = value; }
        }


        private static global::Sungero.Domain.Shared.EnumerationItems _ProcessingStatusItems = new global::Sungero.Domain.Shared.EnumerationItems(
          global::Sungero.ExchangeCore.Client.QueueItemBase.ProcessingStatusItems,
          typeof(global::Sungero.ExchangeCore.MessageQueueItem.ProcessingStatus),
          typeof(global::Sungero.ExchangeCore.Client.MessageQueueItem),
          "ProcessingStatus");

        public static new global::Sungero.Domain.Shared.EnumerationItems ProcessingStatusItems
        {
          get { return global::Sungero.ExchangeCore.Client.MessageQueueItem._ProcessingStatusItems; }
        }

        public override global::Sungero.Domain.Shared.EnumerationItems ProcessingStatusAllowedItems
        {
          get { return global::Sungero.ExchangeCore.Client.MessageQueueItem.ProcessingStatusItems; }
        }




              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Workflow.ITask> _NoticeTask;

              public virtual global::Sungero.Workflow.ITask NoticeTask
              {
              get
              {
                return this._NoticeTask.Value as global::Sungero.Workflow.ITask;
              }

              set
              {
                (this._NoticeTask as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.ExchangeCore.IHistoricalMessagesDownloadSession> _DownloadSession;

              public virtual global::Sungero.ExchangeCore.IHistoricalMessagesDownloadSession DownloadSession
              {
              get
              {
                return this._DownloadSession.Value as global::Sungero.ExchangeCore.IHistoricalMessagesDownloadSession;
              }

              set
              {
                (this._DownloadSession as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }







          protected global::Sungero.Domain.Client.IListProperty<global::Sungero.ExchangeCore.IMessageQueueItemDocuments> _Documents;

          virtual public global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.ExchangeCore.IMessageQueueItemDocuments> Documents
          {
            get { return this._Documents.Value; }
          }






    private object _DocumentsActionsHandlers;

    public object DocumentsActionsHandlers
    {
      get
      {
        if (this._DocumentsActionsHandlers == null)
          this._DocumentsActionsHandlers = this.CreateDocumentsActionsHandlers();
        return this._DocumentsActionsHandlers;
      }
    }

    private object _DocumentsCollectionActionsHandlers;

    public object DocumentsCollectionActionsHandlers
    {
      get
      {
        if (this._DocumentsCollectionActionsHandlers == null)
          this._DocumentsCollectionActionsHandlers = this.CreateDocumentsCollectionActionsHandlers();
        return this._DocumentsCollectionActionsHandlers;
      }
    }

    #endregion

    #region Methods

    protected override object CreateActionsHandlers()
    {
      return new global::Sungero.ExchangeCore.Client.MessageQueueItemActions(this);
    }

    protected override object CreateCollectionActionsHandlers()
    {
      return new global::Sungero.ExchangeCore.Client.MessageQueueItemCollectionActions();
    }

    protected override object CreateAnyChildEntityActionsHandlers()
    {
      return new global::Sungero.ExchangeCore.Client.MessageQueueItemAnyChildEntityActions();
    }

    protected override object CreateAnyChildEntityCollectionActionsHandlers()
    {
      return new global::Sungero.ExchangeCore.Client.MessageQueueItemAnyChildEntityCollectionActions();
    }

    protected virtual object CreateDocumentsActionsHandlers()
    {
      return null;
    }

    protected virtual object CreateDocumentsCollectionActionsHandlers()
    {
      return null;
    }


    protected override global::Sungero.Domain.Client.EntityFunctions CreateClientFunctions()
    {
      return new global::Sungero.ExchangeCore.Client.MessageQueueItemFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.ExchangeCore.Shared.MessageQueueItemFunctions(this);
    }
    protected override object CreateHandlers() {
      return new global::Sungero.ExchangeCore.MessageQueueItemClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Sungero.ExchangeCore.MessageQueueItemSharedHandlers(this);
    }

    #endregion

    #region Framework events

    protected void NoticeTaskChangedHandler()
    {
      var args = new global::Sungero.ExchangeCore.Shared.MessageQueueItemNoticeTaskChangedEventArgs(this.State.Properties.NoticeTask, this.NoticeTask, this);
     ((global::Sungero.ExchangeCore.IMessageQueueItemSharedHandlers)this.SharedHandlers).NoticeTaskChanged(args);
    }

    protected void DocumentsChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.ExchangeCore.IMessageQueueItemSharedHandlers)this.SharedHandlers).DocumentsChanged(args);
    }

    protected void CreatedChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.Created, this.Created, this);
     ((global::Sungero.ExchangeCore.IMessageQueueItemSharedHandlers)this.SharedHandlers).CreatedChanged(args);
    }

    protected void CounterpartyExternalIdChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.CounterpartyExternalId, this.CounterpartyExternalId, this);
     ((global::Sungero.ExchangeCore.IMessageQueueItemSharedHandlers)this.SharedHandlers).CounterpartyExternalIdChanged(args);
    }

    protected void RootMessageIdChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.RootMessageId, this.RootMessageId, this);
     ((global::Sungero.ExchangeCore.IMessageQueueItemSharedHandlers)this.SharedHandlers).RootMessageIdChanged(args);
    }

    protected void IsRootMessageChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.IsRootMessage, this.IsRootMessage, this);
     ((global::Sungero.ExchangeCore.IMessageQueueItemSharedHandlers)this.SharedHandlers).IsRootMessageChanged(args);
    }

    protected void DownloadSessionChangedHandler()
    {
      var args = new global::Sungero.ExchangeCore.Shared.MessageQueueItemDownloadSessionChangedEventArgs(this.State.Properties.DownloadSession, this.DownloadSession, this);
     ((global::Sungero.ExchangeCore.IMessageQueueItemSharedHandlers)this.SharedHandlers).DownloadSessionChanged(args);
    }

    protected void IsManualRestartChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.IsManualRestart, this.IsManualRestart, this);
     ((global::Sungero.ExchangeCore.IMessageQueueItemSharedHandlers)this.SharedHandlers).IsManualRestartChanged(args);
    }



    protected virtual global::Sungero.ExchangeCore.MessageQueueItemDocumentsSharedCollectionHandlers CreateDocumentsAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.ExchangeCore.MessageQueueItemDocumentsSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.ExchangeCore.MessageQueueItemDocumentsSharedCollectionHandlers CreateDocumentsDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.ExchangeCore.MessageQueueItemDocumentsSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void DocumentsAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      var type = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.ExchangeCore.MessageQueueItemDocumentsSharedCollectionHandlers");
      if (type != null)
      {
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(type, new object[] { this, e.Value, null, e.Source });
        var methodInfo = type.GetMethod("DocumentsAdded");
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { args });
      }
      else
      {
        var collectionHandlers = this.CreateDocumentsAddedHandler(e);
        if (collectionHandlers != null)
        {
          var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
          collectionHandlers.DocumentsAdded(args);
        }
      }
    }

    protected virtual void DocumentsDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      var type = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.ExchangeCore.MessageQueueItemDocumentsSharedCollectionHandlers");
      if (type != null)
      {
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(type, new object[] { this, null, e.Value, null });
        var methodInfo = type.GetMethod("DocumentsDeleted");
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { args });
      }
      else
      {
        var collectionHandlers = this.CreateDocumentsDeletedHandler(e);
        if (collectionHandlers != null)
        {
          var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
          collectionHandlers.DocumentsDeleted(args);
        }
      }
    }


  protected global::Sungero.Workflow.ITask NoticeTaskValueInputHandler(global::Sungero.Workflow.ITask value)
  {
    var args = new global::Sungero.ExchangeCore.Client.MessageQueueItemNoticeTaskValueInputEventArgs(this.NoticeTask, value, this, this.Info.Properties.NoticeTask);
    ((global::Sungero.ExchangeCore.MessageQueueItemClientHandlers)this.Handlers).NoticeTaskValueInput(args);
    return args.NewValue;
  }


  protected global::System.DateTime? CreatedValueInputHandler(global::System.DateTime? value)
  {
    var args = new global::Sungero.Presentation.DateTimeValueInputEventArgs(this.Created, value, this, this.Info.Properties.Created);
    ((global::Sungero.ExchangeCore.MessageQueueItemClientHandlers)this.Handlers).CreatedValueInput(args);
    return args.NewValue;
  }

  protected global::System.String CounterpartyExternalIdValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.CounterpartyExternalId, value, this, this.Info.Properties.CounterpartyExternalId);
    ((global::Sungero.ExchangeCore.MessageQueueItemClientHandlers)this.Handlers).CounterpartyExternalIdValueInput(args);
    return args.NewValue;
  }

  protected global::System.String RootMessageIdValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.RootMessageId, value, this, this.Info.Properties.RootMessageId);
    ((global::Sungero.ExchangeCore.MessageQueueItemClientHandlers)this.Handlers).RootMessageIdValueInput(args);
    return args.NewValue;
  }

  protected global::System.Boolean? IsRootMessageValueInputHandler(global::System.Boolean? value)
  {
    var args = new global::Sungero.Presentation.BooleanValueInputEventArgs(this.IsRootMessage, value, this, this.Info.Properties.IsRootMessage);
    ((global::Sungero.ExchangeCore.MessageQueueItemClientHandlers)this.Handlers).IsRootMessageValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.ExchangeCore.IHistoricalMessagesDownloadSession DownloadSessionValueInputHandler(global::Sungero.ExchangeCore.IHistoricalMessagesDownloadSession value)
  {
    var args = new global::Sungero.ExchangeCore.Client.MessageQueueItemDownloadSessionValueInputEventArgs(this.DownloadSession, value, this, this.Info.Properties.DownloadSession);
    ((global::Sungero.ExchangeCore.MessageQueueItemClientHandlers)this.Handlers).DownloadSessionValueInput(args);
    return args.NewValue;
  }

  protected global::System.Boolean? IsManualRestartValueInputHandler(global::System.Boolean? value)
  {
    var args = new global::Sungero.Presentation.BooleanValueInputEventArgs(this.IsManualRestart, value, this, this.Info.Properties.IsManualRestart);
    ((global::Sungero.ExchangeCore.MessageQueueItemClientHandlers)this.Handlers).IsManualRestartValueInput(args);
    return args.NewValue;
  }



    #endregion

    #region Constructors





              protected virtual void InitNoticeTaskNavigationProperty()
              {
                this._NoticeTask = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Workflow.ITask>("NoticeTask", this);
                this._NoticeTask.ValueChanged += (sender, e) => { this.NoticeTaskChangedHandler(); };
                this.AddProperty(this._NoticeTask as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitDownloadSessionNavigationProperty()
              {
                this._DownloadSession = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.ExchangeCore.IHistoricalMessagesDownloadSession>("DownloadSession", this);
                this._DownloadSession.ValueChanged += (sender, e) => { this.DownloadSessionChangedHandler(); };
                this.AddProperty(this._DownloadSession as global::Sungero.Domain.Client.IProperty);
              }



            protected virtual void InitDocumentsCollectionProperty()
            {
              this._Documents = new global::Sungero.Domain.Client.ListProperty<global::Sungero.ExchangeCore.IMessageQueueItemDocuments>("Documents", this);
              this._Documents.ValueChanged += (sender, e) => { this.DocumentsChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._Documents);
              this.SetDocumentsEventHandlers();
            }

            protected void SetDocumentsEventHandlers()
            {
              this._Documents.ChildEntityAdded += this.DocumentsAddedHandler;
              this._Documents.ChildEntityDeleted += this.DocumentsDeletedHandler;
            }


    public MessageQueueItem()
    {
            this._Created = new global::Sungero.Domain.Client.SimpleProperty<global::System.DateTime?>("Created", this);
            this._Created.ValueChanged += (sender, e) => { this.CreatedChangedHandler(); };
            this.AddProperty(this._Created);

            this._CounterpartyExternalId = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("CounterpartyExternalId", this);
            this._CounterpartyExternalId.ValueChanged += (sender, e) => { this.CounterpartyExternalIdChangedHandler(); };
            this.AddProperty(this._CounterpartyExternalId);

            this._RootMessageId = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("RootMessageId", this);
            this._RootMessageId.ValueChanged += (sender, e) => { this.RootMessageIdChangedHandler(); };
            this.AddProperty(this._RootMessageId);

            this._IsRootMessage = new global::Sungero.Domain.Client.SimpleProperty<global::System.Boolean?>("IsRootMessage", this);
            this._IsRootMessage.ValueChanged += (sender, e) => { this.IsRootMessageChangedHandler(); };
            this.AddProperty(this._IsRootMessage);

            this._IsManualRestart = new global::Sungero.Domain.Client.SimpleProperty<global::System.Boolean?>("IsManualRestart", this);
            this._IsManualRestart.ValueChanged += (sender, e) => { this.IsManualRestartChangedHandler(); };
            this.AddProperty(this._IsManualRestart);

            this.InitNoticeTaskNavigationProperty();

            this.InitDownloadSessionNavigationProperty();


            this.InitDocumentsCollectionProperty();







    }

    #endregion

  }
}

// ==================================================================
// MessageQueueItemPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{
  public class MessageQueueItemPresenter<T> :
    global::Sungero.ExchangeCore.Client.QueueItemBasePresenter<T>
    where T : class, global::Sungero.ExchangeCore.IMessageQueueItem
  {
    #region Fields and properties

          private global::System.Windows.Input.ICommand _OpenInExchangeServiceCommand;

          public global::System.Windows.Input.ICommand OpenInExchangeServiceCommand
          {
            get
            {
              if (this._OpenInExchangeServiceCommand == null)
                  this._OpenInExchangeServiceCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("OpenInExchangeService", this, this.OpenInExchangeService, this.CanOpenInExchangeService) { IsEmptyParameterAllowed = true };
              return this._OpenInExchangeServiceCommand;
            }
          }
          private global::System.Windows.Input.ICommand _DoSuspendedCommand;

          public global::System.Windows.Input.ICommand DoSuspendedCommand
          {
            get
            {
              if (this._DoSuspendedCommand == null)
                  this._DoSuspendedCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("DoSuspended", this, this.DoSuspended, this.CanDoSuspended) { IsEmptyParameterAllowed = true };
              return this._DoSuspendedCommand;
            }
          }
          private global::System.Windows.Input.ICommand _ResumeCommand;

          public global::System.Windows.Input.ICommand ResumeCommand
          {
            get
            {
              if (this._ResumeCommand == null)
                  this._ResumeCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("Resume", this, this.Resume, this.CanResume) { IsEmptyParameterAllowed = true };
              return this._ResumeCommand;
            }
          }




    #endregion

    #region Methods

              private bool CanOpenInExchangeService(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.ExchangeCore.Client.MessageQueueItemActions)(entity as Sungero.ExchangeCore.Client.MessageQueueItem).ActionsHandlers).CanOpenInExchangeService(args);
              }

              private void OpenInExchangeService(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.OpenInExchangeService);
                ((Sungero.ExchangeCore.Client.MessageQueueItemActions)(entity as Sungero.ExchangeCore.Client.MessageQueueItem).ActionsHandlers).OpenInExchangeService(args);
              }
              private bool CanDoSuspended(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                var entities = new global::System.Collections.ObjectModel.Collection<T> { entity };
                return global::Sungero.Domain.Client.ActionExecutor.CanExecuteEntityCollectionAction<
                  global::Sungero.ExchangeCore.Client.MessageQueueItemCollectionActions, global::Sungero.Domain.Client.WpfCanExecuteActionArgs>(entities, args,
                    actionHandlers => (global::System.Func<global::Sungero.Domain.Client.WpfCanExecuteActionArgs, bool>)actionHandlers.CanDoSuspended);
              }

              private void DoSuspended(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.DoSuspended);
                var entities = new global::System.Collections.ObjectModel.Collection<T> { entity };
                global::Sungero.Domain.Client.ActionExecutor.ExecuteEntityCollectionAction<
                  global::Sungero.ExchangeCore.Client.MessageQueueItemCollectionActions, global::Sungero.Domain.Client.WpfExecuteActionArgs>(entities, args,
                    actionHandlers => (global::System.Action<global::Sungero.Domain.Client.WpfExecuteActionArgs>)actionHandlers.DoSuspended);
              }
              private bool CanResume(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                var entities = new global::System.Collections.ObjectModel.Collection<T> { entity };
                return global::Sungero.Domain.Client.ActionExecutor.CanExecuteEntityCollectionAction<
                  global::Sungero.ExchangeCore.Client.MessageQueueItemCollectionActions, global::Sungero.Domain.Client.WpfCanExecuteActionArgs>(entities, args,
                    actionHandlers => (global::System.Func<global::Sungero.Domain.Client.WpfCanExecuteActionArgs, bool>)actionHandlers.CanResume);
              }

              private void Resume(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.Resume);
                var entities = new global::System.Collections.ObjectModel.Collection<T> { entity };
                global::Sungero.Domain.Client.ActionExecutor.ExecuteEntityCollectionAction<
                  global::Sungero.ExchangeCore.Client.MessageQueueItemCollectionActions, global::Sungero.Domain.Client.WpfExecuteActionArgs>(entities, args,
                    actionHandlers => (global::System.Action<global::Sungero.Domain.Client.WpfExecuteActionArgs>)actionHandlers.Resume);
              }


    #endregion

    #region Framework events

    protected override void EntityPropertyChangedEventHandler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
    {
      base.EntityPropertyChangedEventHandler(sender, e);
    }

    #endregion

              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _NoticeTaskCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter NoticeTaskCollectionPresenter
              {
          get { return this._NoticeTaskCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _DownloadSessionCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter DownloadSessionCollectionPresenter
              {
          get { return this._DownloadSessionCollectionPresenter; }
        }



    #region Constructors

    private void Init()
    {
              this._BoxCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.ExchangeCore.IBoxBase>(() => this.Entity.Id, typeof(T), "Box");

              this._RootBoxCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.ExchangeCore.IBusinessUnitBox>(() => this.Entity.Id, typeof(T), "RootBox");

                  this._NoticeTaskCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Workflow.ITask>(global::System.Guid.Parse("94c20048-d112-4a93-8364-73763058bd99"));
              this._NoticeTaskCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Workflow.ITask>(() => this.Entity.Id, typeof(T), "NoticeTask");

                  this._DownloadSessionCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.ExchangeCore.IHistoricalMessagesDownloadSession>(global::System.Guid.Parse("b1d5eac8-86ca-454b-9e4d-1d7f64c75c25"));
              this._DownloadSessionCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.ExchangeCore.IHistoricalMessagesDownloadSession>(() => this.Entity.Id, typeof(T), "DownloadSession");


    }

    public MessageQueueItemPresenter()
    {
      this.Init();
    }

    #endregion
  }
}

// ==================================================================
// MessageQueueItemCollectionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{
  public class MessageQueueItemCollectionPresenter<T> : 
    global::Sungero.ExchangeCore.Client.QueueItemBaseCollectionPresenter<T>
    where T: class, global::Sungero.ExchangeCore.IMessageQueueItem
  {
    #region Actions

          private global::System.Windows.Input.ICommand _DoSuspendedCommand;  

          public global::System.Windows.Input.ICommand DoSuspendedCommand 
          { 
            get
            { 
              if (this._DoSuspendedCommand == null)
                this._DoSuspendedCommand = new global::Sungero.Domain.Client.EntityCollectionCommand<T>("DoSuspended", this, this.DoSuspended, this.CanDoSuspended) { IsEmptyParameterAllowed = true };
              return this._DoSuspendedCommand; 
            }
          }
          private global::System.Windows.Input.ICommand _ResumeCommand;  

          public global::System.Windows.Input.ICommand ResumeCommand 
          { 
            get
            { 
              if (this._ResumeCommand == null)
                this._ResumeCommand = new global::Sungero.Domain.Client.EntityCollectionCommand<T>("Resume", this, this.Resume, this.CanResume) { IsEmptyParameterAllowed = true };
              return this._ResumeCommand; 
            }
          }



    #endregion

    #region Methods

        private bool CanDoSuspended(global::System.Collections.Generic.ICollection<T> entities)
        {
          var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, null, this);
          return global::Sungero.Domain.Client.ActionExecutor.CanExecuteEntityCollectionAction<
            global::Sungero.ExchangeCore.Client.MessageQueueItemCollectionActions, global::Sungero.Domain.Client.WpfCanExecuteActionArgs>(entities, args,
              actionHandlers => (global::System.Func<global::Sungero.Domain.Client.WpfCanExecuteActionArgs, bool>)actionHandlers.CanDoSuspended);
        }

        private void DoSuspended(global::System.Collections.Generic.ICollection<T> entities)
        {
          var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, null, this);
          global::Sungero.Domain.Client.ActionExecutor.ExecuteEntityCollectionAction<
            global::Sungero.ExchangeCore.Client.MessageQueueItemCollectionActions, global::Sungero.Domain.Client.WpfExecuteActionArgs>(entities, args,
              actionHandlers => (global::System.Action<global::Sungero.Domain.Client.WpfExecuteActionArgs>)actionHandlers.DoSuspended);
        }

        private bool CanResume(global::System.Collections.Generic.ICollection<T> entities)
        {
          var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, null, this);
          return global::Sungero.Domain.Client.ActionExecutor.CanExecuteEntityCollectionAction<
            global::Sungero.ExchangeCore.Client.MessageQueueItemCollectionActions, global::Sungero.Domain.Client.WpfCanExecuteActionArgs>(entities, args,
              actionHandlers => (global::System.Func<global::Sungero.Domain.Client.WpfCanExecuteActionArgs, bool>)actionHandlers.CanResume);
        }

        private void Resume(global::System.Collections.Generic.ICollection<T> entities)
        {
          var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, null, this);
          global::Sungero.Domain.Client.ActionExecutor.ExecuteEntityCollectionAction<
            global::Sungero.ExchangeCore.Client.MessageQueueItemCollectionActions, global::Sungero.Domain.Client.WpfExecuteActionArgs>(entities, args,
              actionHandlers => (global::System.Action<global::Sungero.Domain.Client.WpfExecuteActionArgs>)actionHandlers.Resume);
        }



    #endregion

    public MessageQueueItemCollectionPresenter(global::System.Linq.IQueryable<T> query, OnLookup onLookup)
      : base(query, onLookup)
    {
    }

    public MessageQueueItemCollectionPresenter(global::System.Linq.IQueryable<T> query)
      : this(query, null) { }

    public MessageQueueItemCollectionPresenter(OnLookup onLookup)
      : this(null, onLookup) { }

    public MessageQueueItemCollectionPresenter()
      : this(null, null) { }
  }
}

// ==================================================================
// MessageQueueItemRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{ 
  public class MessageQueueItemRepositoryImplementer<T> : 
      global::Sungero.ExchangeCore.Client.QueueItemBaseRepositoryImplementer<T>,
      global::Sungero.ExchangeCore.IMessageQueueItemRepositoryImplementer<T>
      where T : global::Sungero.ExchangeCore.IMessageQueueItem
    {
       public new global::Sungero.ExchangeCore.IMessageQueueItemAccessRights AccessRights
       {
          get { return (global::Sungero.ExchangeCore.IMessageQueueItemAccessRights)base.AccessRights; }
       }

       public new global::Sungero.ExchangeCore.IMessageQueueItemInfo Info
       {
          get { return (global::Sungero.ExchangeCore.IMessageQueueItemInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.ExchangeCore.Client.MessageQueueItemTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// MessageQueueItemAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{
  public class MessageQueueItemAccessRights : 
    Sungero.ExchangeCore.Client.QueueItemBaseAccessRights, Sungero.ExchangeCore.IMessageQueueItemAccessRights
  {

    public MessageQueueItemAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class MessageQueueItemTypeAccessRights : 
    Sungero.ExchangeCore.Client.QueueItemBaseTypeAccessRights, Sungero.ExchangeCore.IMessageQueueItemAccessRights
  {

    public MessageQueueItemTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}
