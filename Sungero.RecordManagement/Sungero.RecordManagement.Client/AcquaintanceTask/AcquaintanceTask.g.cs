
// ==================================================================
// AcquaintanceTask.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Client
{
  public class AcquaintanceTask :
    global::Sungero.Workflow.Client.Task, global::Sungero.RecordManagement.IAcquaintanceTask
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("2d53959b-2cee-41f7-83c2-98ae1dbbd538");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.RecordManagement.Client.AcquaintanceTask.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.RecordManagement.IAcquaintanceTask, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.Subject; }
        set { this.Subject = value; }
      }

      public override string DisplayPropertyName
      {
        get { return "Subject"; }
      }


    public new global::Sungero.RecordManagement.IAcquaintanceTaskState State
    {
      get
      {
        return (global::Sungero.RecordManagement.IAcquaintanceTaskState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.RecordManagement.Shared.AcquaintanceTaskState(this);
    }

    public new global::Sungero.RecordManagement.IAcquaintanceTaskInfo Info
    {
      get
      {
        return (global::Sungero.RecordManagement.IAcquaintanceTaskInfo)base.Info;
      }
    }

    public new global::Sungero.RecordManagement.IAcquaintanceTaskAccessRights AccessRights
    {
      get
      {
        return (global::Sungero.RecordManagement.IAcquaintanceTaskAccessRights)base.AccessRights;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.RecordManagement.Client.AcquaintanceTaskAccessRights(this);
    }

        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Boolean?> _IsElectronicAcquaintance;

        public virtual global::System.Boolean? IsElectronicAcquaintance
        {
          get { return this._IsElectronicAcquaintance.Value; }
          set { this._IsElectronicAcquaintance.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.DateTime?> _Deadline;

        public virtual global::System.DateTime? Deadline
        {
          get { return this._Deadline.Value; }
          set { this._Deadline.Value = value; }
        }
        protected global::Sungero.Domain.Client.EnumSimpleProperty<global::Sungero.Core.Enumeration?> _ReceiveOnCompletion;

        public virtual global::Sungero.Core.Enumeration? ReceiveOnCompletion
        {
          get { return this._ReceiveOnCompletion.Value; }
          set { this._ReceiveOnCompletion.Value = value; }
        }


        private static global::Sungero.Domain.Shared.EnumerationItems _ReceiveOnCompletionItems = new global::Sungero.Domain.Shared.EnumerationItems(
          null,
          typeof(global::Sungero.RecordManagement.AcquaintanceTask.ReceiveOnCompletion),
          typeof(global::Sungero.RecordManagement.Client.AcquaintanceTask),
          "ReceiveOnCompletion");

        public static global::Sungero.Domain.Shared.EnumerationItems ReceiveOnCompletionItems
        {
          get { return global::Sungero.RecordManagement.Client.AcquaintanceTask._ReceiveOnCompletionItems; }
        }

        public virtual global::Sungero.Domain.Shared.EnumerationItems ReceiveOnCompletionAllowedItems
        {
          get { return global::Sungero.RecordManagement.Client.AcquaintanceTask.ReceiveOnCompletionItems; }
        }







          protected global::Sungero.Domain.Client.IListProperty<global::Sungero.RecordManagement.IAcquaintanceTaskPerformers> _Performers;

          virtual public global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IAcquaintanceTaskPerformers> Performers
          {
            get { return this._Performers.Value; }
          }


          protected global::Sungero.Domain.Client.IListProperty<global::Sungero.RecordManagement.IAcquaintanceTaskAcquaintanceVersions> _AcquaintanceVersions;

          virtual public global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IAcquaintanceTaskAcquaintanceVersions> AcquaintanceVersions
          {
            get { return this._AcquaintanceVersions.Value; }
          }


          protected global::Sungero.Domain.Client.IListProperty<global::Sungero.RecordManagement.IAcquaintanceTaskExcludedPerformers> _ExcludedPerformers;

          virtual public global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IAcquaintanceTaskExcludedPerformers> ExcludedPerformers
          {
            get { return this._ExcludedPerformers.Value; }
          }






    private object _PerformersActionsHandlers;

    public object PerformersActionsHandlers
    {
      get
      {
        if (this._PerformersActionsHandlers == null)
          this._PerformersActionsHandlers = this.CreatePerformersActionsHandlers();
        return this._PerformersActionsHandlers;
      }
    }

    private object _PerformersCollectionActionsHandlers;

    public object PerformersCollectionActionsHandlers
    {
      get
      {
        if (this._PerformersCollectionActionsHandlers == null)
          this._PerformersCollectionActionsHandlers = this.CreatePerformersCollectionActionsHandlers();
        return this._PerformersCollectionActionsHandlers;
      }
    }
    private object _AcquaintanceVersionsActionsHandlers;

    public object AcquaintanceVersionsActionsHandlers
    {
      get
      {
        if (this._AcquaintanceVersionsActionsHandlers == null)
          this._AcquaintanceVersionsActionsHandlers = this.CreateAcquaintanceVersionsActionsHandlers();
        return this._AcquaintanceVersionsActionsHandlers;
      }
    }

    private object _AcquaintanceVersionsCollectionActionsHandlers;

    public object AcquaintanceVersionsCollectionActionsHandlers
    {
      get
      {
        if (this._AcquaintanceVersionsCollectionActionsHandlers == null)
          this._AcquaintanceVersionsCollectionActionsHandlers = this.CreateAcquaintanceVersionsCollectionActionsHandlers();
        return this._AcquaintanceVersionsCollectionActionsHandlers;
      }
    }
    private object _ExcludedPerformersActionsHandlers;

    public object ExcludedPerformersActionsHandlers
    {
      get
      {
        if (this._ExcludedPerformersActionsHandlers == null)
          this._ExcludedPerformersActionsHandlers = this.CreateExcludedPerformersActionsHandlers();
        return this._ExcludedPerformersActionsHandlers;
      }
    }

    private object _ExcludedPerformersCollectionActionsHandlers;

    public object ExcludedPerformersCollectionActionsHandlers
    {
      get
      {
        if (this._ExcludedPerformersCollectionActionsHandlers == null)
          this._ExcludedPerformersCollectionActionsHandlers = this.CreateExcludedPerformersCollectionActionsHandlers();
        return this._ExcludedPerformersCollectionActionsHandlers;
      }
    }

    #endregion

    #region Methods

    protected override object CreateActionsHandlers()
    {
      return new global::Sungero.RecordManagement.Client.AcquaintanceTaskActions(this);
    }

    protected override object CreateCollectionActionsHandlers()
    {
      return new global::Sungero.RecordManagement.Client.AcquaintanceTaskCollectionActions();
    }

    protected override object CreateAnyChildEntityActionsHandlers()
    {
      return new global::Sungero.RecordManagement.Client.AcquaintanceTaskAnyChildEntityActions();
    }

    protected override object CreateAnyChildEntityCollectionActionsHandlers()
    {
      return new global::Sungero.RecordManagement.Client.AcquaintanceTaskAnyChildEntityCollectionActions();
    }

    protected virtual object CreatePerformersActionsHandlers()
    {
      return null;
    }

    protected virtual object CreatePerformersCollectionActionsHandlers()
    {
      return null;
    }
    protected virtual object CreateAcquaintanceVersionsActionsHandlers()
    {
      return null;
    }

    protected virtual object CreateAcquaintanceVersionsCollectionActionsHandlers()
    {
      return null;
    }
    protected virtual object CreateExcludedPerformersActionsHandlers()
    {
      return null;
    }

    protected virtual object CreateExcludedPerformersCollectionActionsHandlers()
    {
      return null;
    }


    protected override global::Sungero.Domain.Client.EntityFunctions CreateClientFunctions()
    {
      return new global::Sungero.RecordManagement.Client.AcquaintanceTaskFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.RecordManagement.Shared.AcquaintanceTaskFunctions(this);
    }
    protected override object CreateHandlers() {
      return new global::Sungero.RecordManagement.AcquaintanceTaskClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Sungero.RecordManagement.AcquaintanceTaskSharedHandlers(this);
    }

    #endregion

    #region Framework events

    protected void IsElectronicAcquaintanceChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.IsElectronicAcquaintance, this.IsElectronicAcquaintance, this);
     ((global::Sungero.RecordManagement.IAcquaintanceTaskSharedHandlers)this.SharedHandlers).IsElectronicAcquaintanceChanged(args);
    }

    protected void DeadlineChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.Deadline, this.Deadline, this);
     ((global::Sungero.RecordManagement.IAcquaintanceTaskSharedHandlers)this.SharedHandlers).DeadlineChanged(args);
    }

    protected void PerformersChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.RecordManagement.IAcquaintanceTaskSharedHandlers)this.SharedHandlers).PerformersChanged(args);
    }

    protected void AcquaintanceVersionsChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.RecordManagement.IAcquaintanceTaskSharedHandlers)this.SharedHandlers).AcquaintanceVersionsChanged(args);
    }

    protected void ExcludedPerformersChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.RecordManagement.IAcquaintanceTaskSharedHandlers)this.SharedHandlers).ExcludedPerformersChanged(args);
    }

    protected void ReceiveOnCompletionChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.ReceiveOnCompletion, this.ReceiveOnCompletion, this);
     ((global::Sungero.RecordManagement.IAcquaintanceTaskSharedHandlers)this.SharedHandlers).ReceiveOnCompletionChanged(args);
    }




    protected virtual global::Sungero.RecordManagement.AcquaintanceTaskPerformersSharedCollectionHandlers CreatePerformersAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.RecordManagement.AcquaintanceTaskPerformersSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.RecordManagement.AcquaintanceTaskPerformersSharedCollectionHandlers CreatePerformersDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.RecordManagement.AcquaintanceTaskPerformersSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void PerformersAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      var type = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.RecordManagement.AcquaintanceTaskPerformersSharedCollectionHandlers");
      if (type != null)
      {
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(type, new object[] { this, e.Value, null, e.Source });
        var methodInfo = type.GetMethod("PerformersAdded");
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { args });
      }
      else
      {
        var collectionHandlers = this.CreatePerformersAddedHandler(e);
        if (collectionHandlers != null)
        {
          var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
          collectionHandlers.PerformersAdded(args);
        }
      }
    }

    protected virtual void PerformersDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      var type = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.RecordManagement.AcquaintanceTaskPerformersSharedCollectionHandlers");
      if (type != null)
      {
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(type, new object[] { this, null, e.Value, null });
        var methodInfo = type.GetMethod("PerformersDeleted");
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { args });
      }
      else
      {
        var collectionHandlers = this.CreatePerformersDeletedHandler(e);
        if (collectionHandlers != null)
        {
          var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
          collectionHandlers.PerformersDeleted(args);
        }
      }
    }


    protected virtual global::Sungero.RecordManagement.AcquaintanceTaskAcquaintanceVersionsSharedCollectionHandlers CreateAcquaintanceVersionsAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.RecordManagement.AcquaintanceTaskAcquaintanceVersionsSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.RecordManagement.AcquaintanceTaskAcquaintanceVersionsSharedCollectionHandlers CreateAcquaintanceVersionsDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.RecordManagement.AcquaintanceTaskAcquaintanceVersionsSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void AcquaintanceVersionsAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      var type = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.RecordManagement.AcquaintanceTaskAcquaintanceVersionsSharedCollectionHandlers");
      if (type != null)
      {
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(type, new object[] { this, e.Value, null, e.Source });
        var methodInfo = type.GetMethod("AcquaintanceVersionsAdded");
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { args });
      }
      else
      {
        var collectionHandlers = this.CreateAcquaintanceVersionsAddedHandler(e);
        if (collectionHandlers != null)
        {
          var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
          collectionHandlers.AcquaintanceVersionsAdded(args);
        }
      }
    }

    protected virtual void AcquaintanceVersionsDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      var type = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.RecordManagement.AcquaintanceTaskAcquaintanceVersionsSharedCollectionHandlers");
      if (type != null)
      {
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(type, new object[] { this, null, e.Value, null });
        var methodInfo = type.GetMethod("AcquaintanceVersionsDeleted");
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { args });
      }
      else
      {
        var collectionHandlers = this.CreateAcquaintanceVersionsDeletedHandler(e);
        if (collectionHandlers != null)
        {
          var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
          collectionHandlers.AcquaintanceVersionsDeleted(args);
        }
      }
    }


    protected virtual global::Sungero.RecordManagement.AcquaintanceTaskExcludedPerformersSharedCollectionHandlers CreateExcludedPerformersAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.RecordManagement.AcquaintanceTaskExcludedPerformersSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.RecordManagement.AcquaintanceTaskExcludedPerformersSharedCollectionHandlers CreateExcludedPerformersDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.RecordManagement.AcquaintanceTaskExcludedPerformersSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void ExcludedPerformersAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      var type = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.RecordManagement.AcquaintanceTaskExcludedPerformersSharedCollectionHandlers");
      if (type != null)
      {
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(type, new object[] { this, e.Value, null, e.Source });
        var methodInfo = type.GetMethod("ExcludedPerformersAdded");
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { args });
      }
      else
      {
        var collectionHandlers = this.CreateExcludedPerformersAddedHandler(e);
        if (collectionHandlers != null)
        {
          var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
          collectionHandlers.ExcludedPerformersAdded(args);
        }
      }
    }

    protected virtual void ExcludedPerformersDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      var type = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.RecordManagement.AcquaintanceTaskExcludedPerformersSharedCollectionHandlers");
      if (type != null)
      {
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(type, new object[] { this, null, e.Value, null });
        var methodInfo = type.GetMethod("ExcludedPerformersDeleted");
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { args });
      }
      else
      {
        var collectionHandlers = this.CreateExcludedPerformersDeletedHandler(e);
        if (collectionHandlers != null)
        {
          var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
          collectionHandlers.ExcludedPerformersDeleted(args);
        }
      }
    }


  protected global::System.Boolean? IsElectronicAcquaintanceValueInputHandler(global::System.Boolean? value)
  {
    var args = new global::Sungero.Presentation.BooleanValueInputEventArgs(this.IsElectronicAcquaintance, value, this, this.Info.Properties.IsElectronicAcquaintance);
    ((global::Sungero.RecordManagement.AcquaintanceTaskClientHandlers)this.Handlers).IsElectronicAcquaintanceValueInput(args);
    return args.NewValue;
  }

  protected global::System.DateTime? DeadlineValueInputHandler(global::System.DateTime? value)
  {
    var args = new global::Sungero.Presentation.DateTimeValueInputEventArgs(this.Deadline, value, this, this.Info.Properties.Deadline);
    ((global::Sungero.RecordManagement.AcquaintanceTaskClientHandlers)this.Handlers).DeadlineValueInput(args);
    return args.NewValue;
  }




  protected global::Sungero.Core.Enumeration? ReceiveOnCompletionValueInputHandler(global::Sungero.Core.Enumeration? value)
  {
    var args = new global::Sungero.Presentation.EnumerationValueInputEventArgs(this.ReceiveOnCompletion, value, this, this.Info.Properties.ReceiveOnCompletion);
    ((global::Sungero.RecordManagement.AcquaintanceTaskClientHandlers)this.Handlers).ReceiveOnCompletionValueInput(args);
    return args.NewValue;
  }


  protected global::System.Collections.Generic.IEnumerable<global::Sungero.Core.Enumeration> ReceiveOnCompletionFilteringHandler()
  {
    return ((global::Sungero.RecordManagement.AcquaintanceTaskClientHandlers)this.Handlers).ReceiveOnCompletionFiltering(this.ReceiveOnCompletionAllowedItems);
  }


    #endregion

    #region Constructors








            protected override void InitObserversCollectionProperty()
            {
              this._Observers = new global::Sungero.Domain.Client.ListProperty<global::Sungero.RecordManagement.IAcquaintanceTaskObservers>("Observers", this);
              this._Observers.ValueChanged += (sender, e) => { this.ObserversChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._Observers);
              this.SetObserversEventHandlers();
            }

            protected virtual void InitPerformersCollectionProperty()
            {
              this._Performers = new global::Sungero.Domain.Client.ListProperty<global::Sungero.RecordManagement.IAcquaintanceTaskPerformers>("Performers", this);
              this._Performers.ValueChanged += (sender, e) => { this.PerformersChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._Performers);
              this.SetPerformersEventHandlers();
            }

            protected void SetPerformersEventHandlers()
            {
              this._Performers.ChildEntityAdded += this.PerformersAddedHandler;
              this._Performers.ChildEntityDeleted += this.PerformersDeletedHandler;
            }

            protected virtual void InitAcquaintanceVersionsCollectionProperty()
            {
              this._AcquaintanceVersions = new global::Sungero.Domain.Client.ListProperty<global::Sungero.RecordManagement.IAcquaintanceTaskAcquaintanceVersions>("AcquaintanceVersions", this);
              this._AcquaintanceVersions.ValueChanged += (sender, e) => { this.AcquaintanceVersionsChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._AcquaintanceVersions);
              this.SetAcquaintanceVersionsEventHandlers();
            }

            protected void SetAcquaintanceVersionsEventHandlers()
            {
              this._AcquaintanceVersions.ChildEntityAdded += this.AcquaintanceVersionsAddedHandler;
              this._AcquaintanceVersions.ChildEntityDeleted += this.AcquaintanceVersionsDeletedHandler;
            }

            protected virtual void InitExcludedPerformersCollectionProperty()
            {
              this._ExcludedPerformers = new global::Sungero.Domain.Client.ListProperty<global::Sungero.RecordManagement.IAcquaintanceTaskExcludedPerformers>("ExcludedPerformers", this);
              this._ExcludedPerformers.ValueChanged += (sender, e) => { this.ExcludedPerformersChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._ExcludedPerformers);
              this.SetExcludedPerformersEventHandlers();
            }

            protected void SetExcludedPerformersEventHandlers()
            {
              this._ExcludedPerformers.ChildEntityAdded += this.ExcludedPerformersAddedHandler;
              this._ExcludedPerformers.ChildEntityDeleted += this.ExcludedPerformersDeletedHandler;
            }


    public AcquaintanceTask()
    {
            this._IsElectronicAcquaintance = new global::Sungero.Domain.Client.SimpleProperty<global::System.Boolean?>("IsElectronicAcquaintance", this);
            this._IsElectronicAcquaintance.ValueChanged += (sender, e) => { this.IsElectronicAcquaintanceChangedHandler(); };
            this.AddProperty(this._IsElectronicAcquaintance);

            this._Deadline = new global::Sungero.Domain.Client.SimpleProperty<global::System.DateTime?>("Deadline", this);
            this._Deadline.ValueChanged += (sender, e) => { this.DeadlineChangedHandler(); };
            this.AddProperty(this._Deadline);

            this._ReceiveOnCompletion = new global::Sungero.Domain.Client.EnumSimpleProperty<global::Sungero.Core.Enumeration?>("ReceiveOnCompletion", this);
            this._ReceiveOnCompletion.ValueChanged += (sender, e) => { this.ReceiveOnCompletionChangedHandler(); };
            this.AddProperty(this._ReceiveOnCompletion);


            this.InitPerformersCollectionProperty();

            this.InitAcquaintanceVersionsCollectionProperty();

            this.InitExcludedPerformersCollectionProperty();







      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentCreated += this.AttachmentCreatedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentAdded += this.AttachmentAddedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentDeleted += this.AttachmentDeletedHandler;


    }

    #endregion

    #region Workflow attachments
    public virtual global::Sungero.RecordManagement.IAcquaintanceTaskDocumentGroupAttachments DocumentGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.AcquaintanceTaskDocumentGroupAttachments(this);
      }
    }
    public virtual global::Sungero.RecordManagement.IAcquaintanceTaskAddendaGroupAttachments AddendaGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.AcquaintanceTaskAddendaGroupAttachments(this);
      }
    }
    public virtual global::Sungero.RecordManagement.IAcquaintanceTaskOtherGroupAttachments OtherGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.AcquaintanceTaskOtherGroupAttachments(this);
      }
    }


    private void AttachmentCreatedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentCreatedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentGroup")
      {
        ((global::Sungero.RecordManagement.IAcquaintanceTaskSharedHandlers)this.SharedHandlers).DocumentGroupCreated(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "AddendaGroup")
      {
        ((global::Sungero.RecordManagement.IAcquaintanceTaskSharedHandlers)this.SharedHandlers).AddendaGroupCreated(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::Sungero.RecordManagement.IAcquaintanceTaskSharedHandlers)this.SharedHandlers).OtherGroupCreated(e);
        return;
      }

    }

    private void AttachmentAddedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentAddedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentGroup")
      {
        ((global::Sungero.RecordManagement.IAcquaintanceTaskSharedHandlers)this.SharedHandlers).DocumentGroupAdded(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "AddendaGroup")
      {
        ((global::Sungero.RecordManagement.IAcquaintanceTaskSharedHandlers)this.SharedHandlers).AddendaGroupAdded(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::Sungero.RecordManagement.IAcquaintanceTaskSharedHandlers)this.SharedHandlers).OtherGroupAdded(e);
        return;
      }

    }

    private void AttachmentDeletedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentDeletedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentGroup")
      {
        ((global::Sungero.RecordManagement.IAcquaintanceTaskSharedHandlers)this.SharedHandlers).DocumentGroupDeleted(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "AddendaGroup")
      {
        ((global::Sungero.RecordManagement.IAcquaintanceTaskSharedHandlers)this.SharedHandlers).AddendaGroupDeleted(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::Sungero.RecordManagement.IAcquaintanceTaskSharedHandlers)this.SharedHandlers).OtherGroupDeleted(e);
        return;
      }

    }
    #endregion


  }
}

// ==================================================================
// AcquaintanceTaskPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Client
{
  public class AcquaintanceTaskPresenter<T> :
    global::Sungero.Workflow.Client.TaskPresenter<T>
    where T : class, global::Sungero.RecordManagement.IAcquaintanceTask
  {
    #region Fields and properties

          private global::System.Windows.Input.ICommand _ShowAcquaintanceReportCommand;

          public global::System.Windows.Input.ICommand ShowAcquaintanceReportCommand
          {
            get
            {
              if (this._ShowAcquaintanceReportCommand == null)
                  this._ShowAcquaintanceReportCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("ShowAcquaintanceReport", this, this.ShowAcquaintanceReport, this.CanShowAcquaintanceReport) { IsEmptyParameterAllowed = true };
              return this._ShowAcquaintanceReportCommand;
            }
          }
          private global::System.Windows.Input.ICommand _SaveToAcquaintanceListCommand;

          public global::System.Windows.Input.ICommand SaveToAcquaintanceListCommand
          {
            get
            {
              if (this._SaveToAcquaintanceListCommand == null)
                  this._SaveToAcquaintanceListCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("SaveToAcquaintanceList", this, this.SaveToAcquaintanceList, this.CanSaveToAcquaintanceList) { IsEmptyParameterAllowed = true };
              return this._SaveToAcquaintanceListCommand;
            }
          }
          private global::System.Windows.Input.ICommand _FillFromAcquaintanceListCommand;

          public global::System.Windows.Input.ICommand FillFromAcquaintanceListCommand
          {
            get
            {
              if (this._FillFromAcquaintanceListCommand == null)
                  this._FillFromAcquaintanceListCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("FillFromAcquaintanceList", this, this.FillFromAcquaintanceList, this.CanFillFromAcquaintanceList) { IsEmptyParameterAllowed = true };
              return this._FillFromAcquaintanceListCommand;
            }
          }
          private global::System.Windows.Input.ICommand _ShowAcquaintanceFormReportCommand;

          public global::System.Windows.Input.ICommand ShowAcquaintanceFormReportCommand
          {
            get
            {
              if (this._ShowAcquaintanceFormReportCommand == null)
                  this._ShowAcquaintanceFormReportCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("ShowAcquaintanceFormReport", this, this.ShowAcquaintanceFormReport, this.CanShowAcquaintanceFormReport) { IsEmptyParameterAllowed = true };
              return this._ShowAcquaintanceFormReportCommand;
            }
          }
          private global::System.Windows.Input.ICommand _ShowNotAutomatedEmployeesCommand;

          public global::System.Windows.Input.ICommand ShowNotAutomatedEmployeesCommand
          {
            get
            {
              if (this._ShowNotAutomatedEmployeesCommand == null)
                  this._ShowNotAutomatedEmployeesCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("ShowNotAutomatedEmployees", this, this.ShowNotAutomatedEmployees, this.CanShowNotAutomatedEmployees) { IsEmptyParameterAllowed = true };
              return this._ShowNotAutomatedEmployeesCommand;
            }
          }
          private global::System.Windows.Input.ICommand _ExcludeFromAcquaintanceCommand;

          public global::System.Windows.Input.ICommand ExcludeFromAcquaintanceCommand
          {
            get
            {
              if (this._ExcludeFromAcquaintanceCommand == null)
                  this._ExcludeFromAcquaintanceCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("ExcludeFromAcquaintance", this, this.ExcludeFromAcquaintance, this.CanExcludeFromAcquaintance) { IsEmptyParameterAllowed = true };
              return this._ExcludeFromAcquaintanceCommand;
            }
          }




    #endregion

    #region Methods

              private bool CanShowAcquaintanceReport(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.RecordManagement.Client.AcquaintanceTaskActions)(entity as Sungero.RecordManagement.Client.AcquaintanceTask).ActionsHandlers).CanShowAcquaintanceReport(args);
              }

              private void ShowAcquaintanceReport(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.ShowAcquaintanceReport);
                ((Sungero.RecordManagement.Client.AcquaintanceTaskActions)(entity as Sungero.RecordManagement.Client.AcquaintanceTask).ActionsHandlers).ShowAcquaintanceReport(args);
              }
              private bool CanSaveToAcquaintanceList(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.RecordManagement.Client.AcquaintanceTaskActions)(entity as Sungero.RecordManagement.Client.AcquaintanceTask).ActionsHandlers).CanSaveToAcquaintanceList(args);
              }

              private void SaveToAcquaintanceList(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.SaveToAcquaintanceList);
                ((Sungero.RecordManagement.Client.AcquaintanceTaskActions)(entity as Sungero.RecordManagement.Client.AcquaintanceTask).ActionsHandlers).SaveToAcquaintanceList(args);
              }
              private bool CanFillFromAcquaintanceList(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.RecordManagement.Client.AcquaintanceTaskActions)(entity as Sungero.RecordManagement.Client.AcquaintanceTask).ActionsHandlers).CanFillFromAcquaintanceList(args);
              }

              private void FillFromAcquaintanceList(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.FillFromAcquaintanceList);
                ((Sungero.RecordManagement.Client.AcquaintanceTaskActions)(entity as Sungero.RecordManagement.Client.AcquaintanceTask).ActionsHandlers).FillFromAcquaintanceList(args);
              }
              private bool CanShowAcquaintanceFormReport(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.RecordManagement.Client.AcquaintanceTaskActions)(entity as Sungero.RecordManagement.Client.AcquaintanceTask).ActionsHandlers).CanShowAcquaintanceFormReport(args);
              }

              private void ShowAcquaintanceFormReport(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.ShowAcquaintanceFormReport);
                ((Sungero.RecordManagement.Client.AcquaintanceTaskActions)(entity as Sungero.RecordManagement.Client.AcquaintanceTask).ActionsHandlers).ShowAcquaintanceFormReport(args);
              }
              private bool CanShowNotAutomatedEmployees(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.RecordManagement.Client.AcquaintanceTaskActions)(entity as Sungero.RecordManagement.Client.AcquaintanceTask).ActionsHandlers).CanShowNotAutomatedEmployees(args);
              }

              private void ShowNotAutomatedEmployees(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.ShowNotAutomatedEmployees);
                ((Sungero.RecordManagement.Client.AcquaintanceTaskActions)(entity as Sungero.RecordManagement.Client.AcquaintanceTask).ActionsHandlers).ShowNotAutomatedEmployees(args);
              }
              private bool CanExcludeFromAcquaintance(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.RecordManagement.Client.AcquaintanceTaskActions)(entity as Sungero.RecordManagement.Client.AcquaintanceTask).ActionsHandlers).CanExcludeFromAcquaintance(args);
              }

              private void ExcludeFromAcquaintance(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.ExcludeFromAcquaintance);
                ((Sungero.RecordManagement.Client.AcquaintanceTaskActions)(entity as Sungero.RecordManagement.Client.AcquaintanceTask).ActionsHandlers).ExcludeFromAcquaintance(args);
              }


    #endregion

    #region Framework events

    protected override void EntityPropertyChangedEventHandler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
    {
      base.EntityPropertyChangedEventHandler(sender, e);
    }

    #endregion


                          protected global::Sungero.Domain.Client.IEntityCollectionPresenter _PerformersPerformerCollectionPresenter;
                          public global::Sungero.Domain.Client.IEntityCollectionPresenter PerformersPerformerCollectionPresenter
                          {
                  get { return this._PerformersPerformerCollectionPresenter; }
                }

                          protected global::Sungero.Domain.Client.IEntityCollectionPresenter _ExcludedPerformersExcludedPerformerCollectionPresenter;
                          public global::Sungero.Domain.Client.IEntityCollectionPresenter ExcludedPerformersExcludedPerformerCollectionPresenter
                          {
                  get { return this._ExcludedPerformersExcludedPerformerCollectionPresenter; }
                }



    #region Constructors

    private void Init()
    {
              this._ProcessKindCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Workflow.IProcessKind>(() => this.Entity.Id, typeof(T), "ProcessKind");

              this._AuthorCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.CoreEntities.IUser>(() => this.Entity, typeof(T), "Author");

              this._StartedByCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IUser>(() => this.Entity.Id, typeof(T), "StartedBy");

              this._ParentTaskCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Workflow.ITask>(() => this.Entity.Id, typeof(T), "ParentTask");

              this._ParentAssignmentCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Workflow.IAssignmentBase>(() => this.Entity.Id, typeof(T), "ParentAssignment");

              this._MainTaskCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Workflow.ITask>(() => this.Entity.Id, typeof(T), "MainTask");


                        this._ObserversObserverCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IRecipient>(() => this.Entity.Id, typeof(Sungero.RecordManagement.IAcquaintanceTaskObservers), "Observer");


                          this._PerformersPerformerCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.CoreEntities.IRecipient>(global::System.Guid.Parse("68b9bb17-e8bd-46f1-9fe8-057f5ea671d5"));
                        this._PerformersPerformerCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IRecipient>(() => this.Entity.Id, typeof(Sungero.RecordManagement.IAcquaintanceTaskPerformers), "Performer");

                          this._ExcludedPerformersExcludedPerformerCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.CoreEntities.IRecipient>(global::System.Guid.Parse("ede47e99-abfa-4a1d-af07-df7b3df54bb4"));
                        this._ExcludedPerformersExcludedPerformerCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IRecipient>(() => this.Entity.Id, typeof(Sungero.RecordManagement.IAcquaintanceTaskExcludedPerformers), "ExcludedPerformer");


    }

    public AcquaintanceTaskPresenter()
    {
      this.Init();
    }

    #endregion
  }
}

// ==================================================================
// AcquaintanceTaskCollectionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Client
{
  public class AcquaintanceTaskCollectionPresenter<T> : 
    global::Sungero.Workflow.Client.TaskCollectionPresenter<T>
    where T: class, global::Sungero.RecordManagement.IAcquaintanceTask
  {
    #region Actions



    #endregion

    #region Methods


    #endregion

    public AcquaintanceTaskCollectionPresenter(global::System.Linq.IQueryable<T> query, OnLookup onLookup)
      : base(query, onLookup)
    {
    }

    public AcquaintanceTaskCollectionPresenter(global::System.Linq.IQueryable<T> query)
      : this(query, null) { }

    public AcquaintanceTaskCollectionPresenter(OnLookup onLookup)
      : this(null, onLookup) { }

    public AcquaintanceTaskCollectionPresenter()
      : this(null, null) { }
  }
}

// ==================================================================
// AcquaintanceTaskRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Client
{ 
  public class AcquaintanceTaskRepositoryImplementer<T> : 
      global::Sungero.Workflow.Client.TaskRepositoryImplementer<T>,
      global::Sungero.RecordManagement.IAcquaintanceTaskRepositoryImplementer<T>
      where T : global::Sungero.RecordManagement.IAcquaintanceTask
    {
       public new global::Sungero.RecordManagement.IAcquaintanceTaskAccessRights AccessRights
       {
          get { return (global::Sungero.RecordManagement.IAcquaintanceTaskAccessRights)base.AccessRights; }
       }

       public new global::Sungero.RecordManagement.IAcquaintanceTaskInfo Info
       {
          get { return (global::Sungero.RecordManagement.IAcquaintanceTaskInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.RecordManagement.Client.AcquaintanceTaskTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// AcquaintanceTaskAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Client
{
  public class AcquaintanceTaskAccessRights : 
    Sungero.Workflow.Client.TaskAccessRights, Sungero.RecordManagement.IAcquaintanceTaskAccessRights
  {

    public AcquaintanceTaskAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class AcquaintanceTaskTypeAccessRights : 
    Sungero.Workflow.Client.TaskTypeAccessRights, Sungero.RecordManagement.IAcquaintanceTaskAccessRights
  {

    public AcquaintanceTaskTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// AcquaintanceTaskBlocksInfo.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Client
{
}
