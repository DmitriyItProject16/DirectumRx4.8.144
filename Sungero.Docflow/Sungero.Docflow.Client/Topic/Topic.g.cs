
// ==================================================================
// Topic.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class Topic :
    global::Sungero.CoreEntities.Client.DatabookEntry, global::Sungero.Docflow.ITopic
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("cafa896a-2675-4e54-ba88-5f2f4f06f805");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Docflow.Client.Topic.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Docflow.ITopic, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.Name; }
        set { this.Name = value; }
      }

      public override string DisplayPropertyName
      {
        get { return "Name"; }
      }


    public new global::Sungero.Docflow.ITopicState State
    {
      get
      {
        return (global::Sungero.Docflow.ITopicState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Docflow.Shared.TopicState(this);
    }

    public new global::Sungero.Docflow.ITopicInfo Info
    {
      get
      {
        return (global::Sungero.Docflow.ITopicInfo)base.Info;
      }
    }

    public new global::Sungero.Docflow.ITopicAccessRights AccessRights
    {
      get
      {
        return (global::Sungero.Docflow.ITopicAccessRights)base.AccessRights;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Docflow.Client.TopicAccessRights(this);
    }

        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _Name;

        public virtual global::System.String Name
        {
          get { return this._Name.Value; }
          set { this._Name.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _Code;

        public virtual global::System.String Code
        {
          get { return this._Code.Value; }
          set { this._Code.Value = value; }
        }




              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Docflow.ITopic> _Parent;

              public virtual global::Sungero.Docflow.ITopic Parent
              {
              get
              {
                return this._Parent.Value as global::Sungero.Docflow.ITopic;
              }

              set
              {
                (this._Parent as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }








      protected global::Sungero.Domain.Client.TextProperty _Note;

      [global::Sungero.Domain.Shared.DoNotSavePreviousValue]
      public virtual System.String Note
      {
        get { return this._Note.Value; }
        set { this._Note.Value = value; }
      }



    #endregion

    #region Methods

    protected override object CreateActionsHandlers()
    {
      return new global::Sungero.Docflow.Client.TopicActions(this);
    }

    protected override object CreateCollectionActionsHandlers()
    {
      return new global::Sungero.Docflow.Client.TopicCollectionActions();
    }

    protected override object CreateAnyChildEntityActionsHandlers()
    {
      return new global::Sungero.Docflow.Client.TopicAnyChildEntityActions();
    }

    protected override object CreateAnyChildEntityCollectionActionsHandlers()
    {
      return new global::Sungero.Docflow.Client.TopicAnyChildEntityCollectionActions();
    }


    protected override global::Sungero.Domain.Client.EntityFunctions CreateClientFunctions()
    {
      return new global::Sungero.Docflow.Client.TopicFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Docflow.Shared.TopicFunctions(this);
    }
    protected override object CreateHandlers() {
      return new global::Sungero.Docflow.TopicClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Sungero.Docflow.TopicSharedHandlers(this);
    }

    #endregion

    #region Framework events

    protected void NameChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Name, this.Name, this);
     ((global::Sungero.Docflow.ITopicSharedHandlers)this.SharedHandlers).NameChanged(args);
    }

    protected void CodeChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Code, this.Code, this);
     ((global::Sungero.Docflow.ITopicSharedHandlers)this.SharedHandlers).CodeChanged(args);
    }

    protected void ParentChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.TopicParentChangedEventArgs(this.State.Properties.Parent, this.Parent, this);
     ((global::Sungero.Docflow.ITopicSharedHandlers)this.SharedHandlers).ParentChanged(args);
    }

    protected void NoteChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.TextPropertyChangedEventArgs(this.State.Properties.Note, this.Note, this);
     ((global::Sungero.Docflow.ITopicSharedHandlers)this.SharedHandlers).NoteChanged(args);
    }



  protected global::System.String NameValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.Name, value, this, this.Info.Properties.Name);
    ((global::Sungero.Docflow.TopicClientHandlers)this.Handlers).NameValueInput(args);
    return args.NewValue;
  }

  protected global::System.String CodeValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.Code, value, this, this.Info.Properties.Code);
    ((global::Sungero.Docflow.TopicClientHandlers)this.Handlers).CodeValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Docflow.ITopic ParentValueInputHandler(global::Sungero.Docflow.ITopic value)
  {
    var args = new global::Sungero.Docflow.Client.TopicParentValueInputEventArgs(this.Parent, value, this, this.Info.Properties.Parent);
    ((global::Sungero.Docflow.TopicClientHandlers)this.Handlers).ParentValueInput(args);
    return args.NewValue;
  }

  protected global::System.String NoteValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.TextValueInputEventArgs(this.Note, value, this, this.Info.Properties.Note);
    ((global::Sungero.Docflow.TopicClientHandlers)this.Handlers).NoteValueInput(args);
    return args.NewValue;
  }



    #endregion

    #region Constructors



              protected virtual void InitParentNavigationProperty()
              {
                this._Parent = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Docflow.ITopic>("Parent", this);
                this._Parent.ValueChanged += (sender, e) => { this.ParentChangedHandler(); };
                this.AddProperty(this._Parent as global::Sungero.Domain.Client.IProperty);
              }




    public Topic()
    {
            this._Name = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("Name", this);
            this._Name.ValueChanged += (sender, e) => { this.NameChangedHandler(); };
            this.AddProperty(this._Name);

            this._Code = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("Code", this);
            this._Code.ValueChanged += (sender, e) => { this.CodeChangedHandler(); };
            this.AddProperty(this._Code);

            this.InitParentNavigationProperty();



            this._Note = new global::Sungero.Domain.Client.TextProperty("Note", this);
            this._Note.ValueChanged += (sender, e) => { this.NoteChangedHandler(); };
            this.AddProperty(this._Note);






    }

    #endregion

  }
}

// ==================================================================
// TopicPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class TopicPresenter<T> :
    global::Sungero.Domain.Client.EntityPresenter<T>
    where T : class, global::Sungero.Docflow.ITopic
  {
    #region Fields and properties

          private global::System.Windows.Input.ICommand _SearchDocumentsCommand;

          public global::System.Windows.Input.ICommand SearchDocumentsCommand
          {
            get
            {
              if (this._SearchDocumentsCommand == null)
                  this._SearchDocumentsCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("SearchDocuments", this, this.SearchDocuments, this.CanSearchDocuments) { IsEmptyParameterAllowed = true };
              return this._SearchDocumentsCommand;
            }
          }




    #endregion

    #region Methods

              private bool CanSearchDocuments(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Docflow.Client.TopicActions)(entity as Sungero.Docflow.Client.Topic).ActionsHandlers).CanSearchDocuments(args);
              }

              private void SearchDocuments(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.SearchDocuments);
                ((Sungero.Docflow.Client.TopicActions)(entity as Sungero.Docflow.Client.Topic).ActionsHandlers).SearchDocuments(args);
              }


    #endregion

    #region Framework events

    protected override void EntityPropertyChangedEventHandler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
    {
      base.EntityPropertyChangedEventHandler(sender, e);
    }

    #endregion

              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _ParentCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter ParentCollectionPresenter
              {
          get { return this._ParentCollectionPresenter; }
        }



    #region Constructors

    private void Init()
    {
                  this._ParentCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Docflow.ITopic>(global::System.Guid.Parse("f5268ce4-e322-48d2-b09a-60f3e79c3cbe"));
              this._ParentCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.ITopic>(() => this.Entity, typeof(T), "Parent");


    }

    public TopicPresenter()
    {
      this.Init();
    }

    #endregion
  }
}

// ==================================================================
// TopicCollectionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class TopicCollectionPresenter<T> : 
    global::Sungero.Domain.Client.EntityCollectionPresenter<T>
    where T: class, global::Sungero.Docflow.ITopic
  {
    #region Actions

          private global::System.Windows.Input.ICommand _SearchDocumentsCommand;  

          public global::System.Windows.Input.ICommand SearchDocumentsCommand 
          { 
            get
            { 
              if (this._SearchDocumentsCommand == null)
                this._SearchDocumentsCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("SearchDocuments", this, this.SearchDocuments, this.CanSearchDocuments) { IsEmptyParameterAllowed = true };
              return this._SearchDocumentsCommand; 
            }
          }



    #endregion

    #region Methods

        private bool CanSearchDocuments(T entity)
        {
          var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, entity, this);
          return ((Sungero.Docflow.Client.TopicActions)(entity as Sungero.Docflow.Client.Topic).ActionsHandlers).CanSearchDocuments(args);
        }

        private void SearchDocuments(T entity)
        {
          var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, entity, this, entity.Info.Actions.SearchDocuments);
          ((Sungero.Docflow.Client.TopicActions)(entity as Sungero.Docflow.Client.Topic).ActionsHandlers).SearchDocuments(args);
        }



    #endregion

    public TopicCollectionPresenter(global::System.Linq.IQueryable<T> query, OnLookup onLookup)
      : base(query, onLookup)
    {
    }

    public TopicCollectionPresenter(global::System.Linq.IQueryable<T> query)
      : this(query, null) { }

    public TopicCollectionPresenter(OnLookup onLookup)
      : this(null, onLookup) { }

    public TopicCollectionPresenter()
      : this(null, null) { }
  }
}

// ==================================================================
// TopicRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{ 
  public class TopicRepositoryImplementer<T> : 
      global::Sungero.Domain.Client.RepositoryImplementer<T>,
      global::Sungero.Docflow.ITopicRepositoryImplementer<T>
      where T : global::Sungero.Docflow.ITopic
    {
       public new global::Sungero.Docflow.ITopicAccessRights AccessRights
       {
          get { return (global::Sungero.Docflow.ITopicAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Docflow.ITopicInfo Info
       {
          get { return (global::Sungero.Docflow.ITopicInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Docflow.Client.TopicTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// TopicAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class TopicAccessRights : 
    Sungero.CoreEntities.Client.DatabookEntryAccessRights, Sungero.Docflow.ITopicAccessRights
  {

    public TopicAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class TopicTypeAccessRights : 
    Sungero.CoreEntities.Client.DatabookEntryTypeAccessRights, Sungero.Docflow.ITopicAccessRights
  {

    public TopicTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}
