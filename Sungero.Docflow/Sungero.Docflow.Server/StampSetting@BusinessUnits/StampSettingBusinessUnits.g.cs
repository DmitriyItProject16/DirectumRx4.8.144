
// ==================================================================
// StampSettingBusinessUnits.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
  public class StampSettingBusinessUnitsFilterForBusinessUnit<TQueryEntity, TSourceEntity, TRootEntity>
    : global::Sungero.Domain.ChildEntityPropertyFilterBase<TQueryEntity, TSourceEntity, TRootEntity>
    where TQueryEntity : class, global::Sungero.Company.IBusinessUnit
    where TSourceEntity : class, global::Sungero.Docflow.IStampSettingBusinessUnits
    where TRootEntity : class, global::Sungero.Docflow.IStampSetting
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity, TRootEntity rootEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Docflow.StampSettingBusinessUnitsBusinessUnitPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { sourceEntity, rootEntity });
        var methodInfo = genericType.GetMethod("BusinessUnitsBusinessUnitFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Docflow.StampSettingBusinessUnitsBusinessUnitPropertyFilteringServerHandler<TQueryEntity>(sourceEntity, rootEntity).BusinessUnitsBusinessUnitFiltering(query, args);
      }
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public StampSettingBusinessUnitsFilterForBusinessUnit(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class StampSettingBusinessUnitsSearchFilterForBusinessUnit<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Company.IBusinessUnit
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Docflow.StampSettingBusinessUnitsBusinessUnitSearchPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType);
        var methodInfo = genericType.GetMethod("BusinessUnitsBusinessUnitSearchDialogFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Docflow.StampSettingBusinessUnitsBusinessUnitSearchPropertyFilteringServerHandler<TQueryEntity>().BusinessUnitsBusinessUnitSearchDialogFiltering(query, args);
      }
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public StampSettingBusinessUnitsSearchFilterForBusinessUnit(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Docflow.Server.StampSettingBusinessUnitsFilterForBusinessUnit<global::Sungero.Company.IBusinessUnit, global::Sungero.Docflow.IStampSettingBusinessUnits, global::Sungero.Docflow.IStampSetting>), "BusinessUnit")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Docflow.Server.StampSettingBusinessUnitsSearchFilterForBusinessUnit<global::Sungero.Company.IBusinessUnit>), "BusinessUnit")]


  public class StampSettingBusinessUnits :
    global::Sungero.Domain.ChildEntity, global::Sungero.Docflow.IStampSettingBusinessUnits
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("2a84998a-677d-4528-984b-1903e45d9424");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Docflow.Server.StampSettingBusinessUnits.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Docflow.IStampSettingBusinessUnits, Sungero.Domain.Interfaces"; }
    }

    public new virtual global::Sungero.Docflow.IStampSettingBusinessUnitsState State
    {
      get { return (global::Sungero.Docflow.IStampSettingBusinessUnitsState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Docflow.Shared.StampSettingBusinessUnitsState(this);
    }

    public new virtual global::Sungero.Docflow.IStampSettingBusinessUnitsInfo Info
    {
      get { return (global::Sungero.Docflow.IStampSettingBusinessUnitsInfo)base.Info; }
    }


    public global::Sungero.Docflow.IStampSetting StampSetting { get; set; }

    public override global::Sungero.Domain.Shared.IEntity RootEntity
    {
      get { return this.StampSetting; }
      set { this.StampSetting = (global::Sungero.Docflow.IStampSetting)value; }
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.Docflow.StampSettingBusinessUnitsSharedHandlers(this);
    }







    private global::Sungero.Company.IBusinessUnit _BusinessUnit;
    public virtual global::Sungero.Company.IBusinessUnit BusinessUnit
    {
      get
      {
        return this._BusinessUnit;
      }

      set
      {
        this.SetPropertyValue("BusinessUnit", this._BusinessUnit, value, (propertyValue) => { this._BusinessUnit = propertyValue; }, this.BusinessUnitChangedHandler);
      }
    }




    #region Framework events

    protected void BusinessUnitChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.StampSettingBusinessUnitsBusinessUnitChangedEventArgs(this.State.Properties.BusinessUnit, this.BusinessUnit, this);
     ((global::Sungero.Docflow.IStampSettingBusinessUnitsSharedHandlers)this.SharedHandlers).BusinessUnitsBusinessUnitChanged(args);
    }



    #endregion


    public StampSettingBusinessUnits()
    {
    }

  }
}

// ==================================================================
// StampSettingBusinessUnitsHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow
{
  public partial class StampSettingBusinessUnitsBusinessUnitPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.ChildEntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IBusinessUnit
  {
    private global::Sungero.Docflow.IStampSettingBusinessUnits _obj
    {
      get { return (global::Sungero.Docflow.IStampSettingBusinessUnits)this.Entity; }
    }

    private global::Sungero.Docflow.IStampSetting _root
    {
      get { return (global::Sungero.Docflow.IStampSetting)this.Root; }
    }

    public virtual global::System.Linq.IQueryable<T> BusinessUnitsBusinessUnitFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public StampSettingBusinessUnitsBusinessUnitPropertyFilteringServerHandler(global::Sungero.Docflow.IStampSettingBusinessUnits entity, global::Sungero.Docflow.IStampSetting root)
      : base(entity, root)
    {
    }
  }

  public partial class StampSettingBusinessUnitsBusinessUnitSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IBusinessUnit
  {

    public virtual global::System.Linq.IQueryable<T> BusinessUnitsBusinessUnitSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public StampSettingBusinessUnitsBusinessUnitSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



}

// ==================================================================
// StampSettingBusinessUnitsEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
}
