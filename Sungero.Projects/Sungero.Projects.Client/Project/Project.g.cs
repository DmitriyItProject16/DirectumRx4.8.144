
// ==================================================================
// Project.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Client
{
  public class Project :
    global::Sungero.Projects.Client.ProjectCore, global::Sungero.Projects.IProject
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("4383f2ff-56e6-46f4-b4ef-cc17e6aeef40");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Projects.Client.Project.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Projects.IProject, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.Name; }
        set { this.Name = value; }
      }

      public override string DisplayPropertyName
      {
        get { return "Name"; }
      }


    public new global::Sungero.Projects.IProjectState State
    {
      get
      {
        return (global::Sungero.Projects.IProjectState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Projects.Shared.ProjectState(this);
    }

    public new global::Sungero.Projects.IProjectInfo Info
    {
      get
      {
        return (global::Sungero.Projects.IProjectInfo)base.Info;
      }
    }

    public new global::Sungero.Projects.IProjectAccessRights AccessRights
    {
      get
      {
        return (global::Sungero.Projects.IProjectAccessRights)base.AccessRights;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Projects.Client.ProjectAccessRights(this);
    }










    #endregion

    #region Methods

    protected override object CreateActionsHandlers()
    {
      return new global::Sungero.Projects.Client.ProjectActions(this);
    }

    protected override object CreateCollectionActionsHandlers()
    {
      return new global::Sungero.Projects.Client.ProjectCollectionActions();
    }

    protected override object CreateAnyChildEntityActionsHandlers()
    {
      return new global::Sungero.Projects.Client.ProjectAnyChildEntityActions();
    }

    protected override object CreateAnyChildEntityCollectionActionsHandlers()
    {
      return new global::Sungero.Projects.Client.ProjectAnyChildEntityCollectionActions();
    }


    protected override global::Sungero.Domain.Client.EntityFunctions CreateClientFunctions()
    {
      return new global::Sungero.Projects.Client.ProjectFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Projects.Shared.ProjectFunctions(this);
    }
    protected override object CreateHandlers() {
      return new global::Sungero.Projects.ProjectClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Sungero.Projects.ProjectSharedHandlers(this);
    }

    #endregion

    #region Framework events







    #endregion

    #region Constructors









            protected override void InitTeamMembersCollectionProperty()
            {
              this._TeamMembers = new global::Sungero.Domain.Client.ListProperty<global::Sungero.Projects.IProjectTeamMembers>("TeamMembers", this);
              this._TeamMembers.ValueChanged += (sender, e) => { this.TeamMembersChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._TeamMembers);
              this.SetTeamMembersEventHandlers();
            }

            protected override void InitClassifierCollectionProperty()
            {
              this._Classifier = new global::Sungero.Domain.Client.ListProperty<global::Sungero.Projects.IProjectClassifier>("Classifier", this);
              this._Classifier.ValueChanged += (sender, e) => { this.ClassifierChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._Classifier);
              this.SetClassifierEventHandlers();
            }


    public Project()
    {








    }

    #endregion

  }
}

// ==================================================================
// ProjectPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Client
{
  public class ProjectPresenter<T> :
    global::Sungero.Projects.Client.ProjectCorePresenter<T>
    where T : class, global::Sungero.Projects.IProject
  {
    #region Fields and properties




    #endregion

    #region Methods


    #endregion

    #region Framework events

    protected override void EntityPropertyChangedEventHandler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
    {
      base.EntityPropertyChangedEventHandler(sender, e);
    }

    #endregion



    #region Constructors

    private void Init()
    {
              this._ProjectKindCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Projects.IProjectKind>(() => this.Entity.Id, typeof(T), "ProjectKind");

              this._InternalCustomerCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "InternalCustomer");

              this._ExternalCustomerCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Parties.ICounterparty>(() => this.Entity.Id, typeof(T), "ExternalCustomer");

              this._ManagerCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "Manager");

              this._FolderCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IFolder>(() => this.Entity.Id, typeof(T), "Folder");

              this._LeadingProjectCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Projects.IProjectCore>(() => this.Entity, typeof(T), "LeadingProject");

              this._AdministratorCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "Administrator");


                        this._TeamMembersMemberCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IRecipient>(() => this.Entity.Id, typeof(Sungero.Projects.IProjectTeamMembers), "Member");


                        this._ClassifierDocumentKindCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.IDocumentKind>(() => this.Entity.Id, typeof(Sungero.Projects.IProjectClassifier), "DocumentKind");

                        this._ClassifierFolderCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IFolder>(() => this.Entity.Id, typeof(Sungero.Projects.IProjectClassifier), "Folder");



    }

    public ProjectPresenter()
    {
      this.Init();
    }

    #endregion
  }
}

// ==================================================================
// ProjectCollectionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Client
{
  public class ProjectCollectionPresenter<T> : 
    global::Sungero.Projects.Client.ProjectCoreCollectionPresenter<T>
    where T: class, global::Sungero.Projects.IProject
  {
    #region Actions



    #endregion

    #region Methods


    #endregion

    public ProjectCollectionPresenter(global::System.Linq.IQueryable<T> query, OnLookup onLookup)
      : base(query, onLookup)
    {
    }

    public ProjectCollectionPresenter(global::System.Linq.IQueryable<T> query)
      : this(query, null) { }

    public ProjectCollectionPresenter(OnLookup onLookup)
      : this(null, onLookup) { }

    public ProjectCollectionPresenter()
      : this(null, null) { }
  }
}

// ==================================================================
// ProjectRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Client
{ 
  public class ProjectRepositoryImplementer<T> : 
      global::Sungero.Projects.Client.ProjectCoreRepositoryImplementer<T>,
      global::Sungero.Projects.IProjectRepositoryImplementer<T>
      where T : global::Sungero.Projects.IProject
    {
       public new global::Sungero.Projects.IProjectAccessRights AccessRights
       {
          get { return (global::Sungero.Projects.IProjectAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Projects.IProjectInfo Info
       {
          get { return (global::Sungero.Projects.IProjectInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Projects.Client.ProjectTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// ProjectAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Client
{
  public class ProjectAccessRights : 
    Sungero.Projects.Client.ProjectCoreAccessRights, Sungero.Projects.IProjectAccessRights
  {

    public ProjectAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class ProjectTypeAccessRights : 
    Sungero.Projects.Client.ProjectCoreTypeAccessRights, Sungero.Projects.IProjectAccessRights
  {

    public ProjectTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}
