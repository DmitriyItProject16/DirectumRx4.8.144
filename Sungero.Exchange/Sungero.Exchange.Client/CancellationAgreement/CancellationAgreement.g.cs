
// ==================================================================
// CancellationAgreement.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Client
{
  public class CancellationAgreement :
    global::Sungero.Docflow.Client.ContractualDocumentBase, global::Sungero.Exchange.ICancellationAgreement
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("4c57f798-1547-4de0-b240-d9d97901df5f");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Exchange.Client.CancellationAgreement.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Exchange.ICancellationAgreement, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.Name; }
        set { this.Name = value; }
      }

      public override string DisplayPropertyName
      {
        get { return "Name"; }
      }


    public new global::Sungero.Exchange.ICancellationAgreementState State
    {
      get
      {
        return (global::Sungero.Exchange.ICancellationAgreementState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Exchange.Shared.CancellationAgreementState(this);
    }

    public new global::Sungero.Exchange.ICancellationAgreementInfo Info
    {
      get
      {
        return (global::Sungero.Exchange.ICancellationAgreementInfo)base.Info;
      }
    }

    public new global::Sungero.Exchange.ICancellationAgreementAccessRights AccessRights
    {
      get
      {
        return (global::Sungero.Exchange.ICancellationAgreementAccessRights)base.AccessRights;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Exchange.Client.CancellationAgreementAccessRights(this);
    }

        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _Reason;

        public virtual global::System.String Reason
        {
          get { return this._Reason.Value; }
          set { this._Reason.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _ServiceDocumentId;

        public virtual global::System.String ServiceDocumentId
        {
          get { return this._ServiceDocumentId.Value; }
          set { this._ServiceDocumentId.Value = value; }
        }










    #endregion

    #region Methods

    protected override object CreateActionsHandlers()
    {
      return new global::Sungero.Exchange.Client.CancellationAgreementActions(this);
    }

    protected override object CreateCollectionActionsHandlers()
    {
      return new global::Sungero.Exchange.Client.CancellationAgreementCollectionActions();
    }

    protected override object CreateAnyChildEntityActionsHandlers()
    {
      return new global::Sungero.Exchange.Client.CancellationAgreementAnyChildEntityActions();
    }

    protected override object CreateAnyChildEntityCollectionActionsHandlers()
    {
      return new global::Sungero.Exchange.Client.CancellationAgreementAnyChildEntityCollectionActions();
    }

    protected override object CreateVersionsActionsHandlers()
    {
      return new global::Sungero.Exchange.Client.CancellationAgreementVersionsActions();
    }

    protected override object CreateVersionsCollectionActionsHandlers()
    {
      return new global::Sungero.Exchange.Client.CancellationAgreementVersionsCollectionActions();
    }


    protected override global::Sungero.Domain.Client.EntityFunctions CreateClientFunctions()
    {
      return new global::Sungero.Exchange.Client.CancellationAgreementFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Exchange.Shared.CancellationAgreementFunctions(this);
    }
    protected override object CreateHandlers() {
      return new global::Sungero.Exchange.CancellationAgreementClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Sungero.Exchange.CancellationAgreementSharedHandlers(this);
    }

    #endregion

    #region Framework events

    protected void ReasonChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Reason, this.Reason, this);
     ((global::Sungero.Exchange.ICancellationAgreementSharedHandlers)this.SharedHandlers).ReasonChanged(args);
    }

    protected void ServiceDocumentIdChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.ServiceDocumentId, this.ServiceDocumentId, this);
     ((global::Sungero.Exchange.ICancellationAgreementSharedHandlers)this.SharedHandlers).ServiceDocumentIdChanged(args);
    }





  protected global::System.String ReasonValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.Reason, value, this, this.Info.Properties.Reason);
    ((global::Sungero.Exchange.CancellationAgreementClientHandlers)this.Handlers).ReasonValueInput(args);
    return args.NewValue;
  }

  protected global::System.String ServiceDocumentIdValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.ServiceDocumentId, value, this, this.Info.Properties.ServiceDocumentId);
    ((global::Sungero.Exchange.CancellationAgreementClientHandlers)this.Handlers).ServiceDocumentIdValueInput(args);
    return args.NewValue;
  }



    #endregion

    #region Constructors


























            protected override void InitVersionsCollectionProperty()
            {
              this._Versions = new global::Sungero.Domain.Client.ListProperty<global::Sungero.Exchange.ICancellationAgreementVersions>("Versions", this);
              this._Versions.ValueChanged += (sender, e) => { this.VersionsChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._Versions);
              this.SetVersionsEventHandlers();
            }

            protected override void InitTrackingCollectionProperty()
            {
              this._Tracking = new global::Sungero.Domain.Client.ListProperty<global::Sungero.Exchange.ICancellationAgreementTracking>("Tracking", this);
              this._Tracking.ValueChanged += (sender, e) => { this.TrackingChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._Tracking);
              this.SetTrackingEventHandlers();
            }


    public CancellationAgreement()
    {
            this._Reason = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("Reason", this);
            this._Reason.ValueChanged += (sender, e) => { this.ReasonChangedHandler(); };
            this.AddProperty(this._Reason);

            this._ServiceDocumentId = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("ServiceDocumentId", this);
            this._ServiceDocumentId.ValueChanged += (sender, e) => { this.ServiceDocumentIdChangedHandler(); };
            this.AddProperty(this._ServiceDocumentId);








    }

    #endregion

  }
}

// ==================================================================
// CancellationAgreementPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Client
{
  public class CancellationAgreementPresenter<T> :
    global::Sungero.Docflow.Client.ContractualDocumentBasePresenter<T>
    where T : class, global::Sungero.Exchange.ICancellationAgreement
  {
    #region Fields and properties




    #endregion

    #region Methods


    #endregion

    #region Framework events

    protected override void EntityPropertyChangedEventHandler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
    {
      base.EntityPropertyChangedEventHandler(sender, e);
    }

    #endregion



    #region Constructors

    private void Init()
    {
              this._AssociatedApplicationCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Content.IAssociatedApplication>(() => this.Entity.Id, typeof(T), "AssociatedApplication");

              this._DeliveryMethodCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.IMailDeliveryMethod>(() => this.Entity.Id, typeof(T), "DeliveryMethod");

              this._CaseFileCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.ICaseFile>(() => this.Entity, typeof(T), "CaseFile");

              this._DeliveredToCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "DeliveredTo");

              this._ResponsibleForReturnEmployeeCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "ResponsibleForReturnEmployee");

              this._AssigneeCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "Assignee");

              this._StorageCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IStorage>(() => this.Entity.Id, typeof(T), "Storage");

              this._TopicCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.ITopic>(() => this.Entity.Id, typeof(T), "Topic");

              this._SubtopicCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.ITopic>(() => this.Entity, typeof(T), "Subtopic");

              this._OurSigningReasonCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.ISignatureSetting>(() => this.Entity, typeof(T), "OurSigningReason");

              this._DocumentRegisterCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.IDocumentRegister>(() => this.Entity, typeof(T), "DocumentRegister");

              this._DocumentKindCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.IDocumentKind>(() => this.Entity, typeof(T), "DocumentKind");

              this._CurrencyCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Commons.ICurrency>(() => this.Entity.Id, typeof(T), "Currency");

              this._VatRateCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Commons.IVatRate>(() => this.Entity.Id, typeof(T), "VatRate");

              this._ProjectCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.IProjectBase>(() => this.Entity.Id, typeof(T), "Project");

              this._AuthorCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IUser>(() => this.Entity.Id, typeof(T), "Author");

              this._DocumentGroupCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.IDocumentGroupBase>(() => this.Entity, typeof(T), "DocumentGroup");

              this._DepartmentCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IDepartment>(() => this.Entity.Id, typeof(T), "Department");

              this._PreparedByCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "PreparedBy");

              this._LeadingDocumentCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.IOfficialDocument>(() => this.Entity.Id, typeof(T), "LeadingDocument");

              this._BusinessUnitCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IBusinessUnit>(() => this.Entity.Id, typeof(T), "BusinessUnit");

              this._OurSignatoryCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Company.IEmployee>(() => this.Entity, typeof(T), "OurSignatory");

              this._CounterpartyCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Parties.ICounterparty>(() => this.Entity.Id, typeof(T), "Counterparty");

              this._CounterpartySignatoryCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Parties.IContact>(() => this.Entity.Id, typeof(T), "CounterpartySignatory");


                        this._VersionsAuthorCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IUser>(() => this.Entity.Id, typeof(Sungero.Exchange.ICancellationAgreementVersions), "Author");

                        this._VersionsModifiedByCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IUser>(() => this.Entity.Id, typeof(Sungero.Exchange.ICancellationAgreementVersions), "ModifiedBy");

                        this._VersionsAssociatedApplicationCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Content.IAssociatedApplication>(() => this.Entity.Id, typeof(Sungero.Exchange.ICancellationAgreementVersions), "AssociatedApplication");

                        this._VersionsBodyAssociatedApplicationCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Content.IAssociatedApplication>(() => this.Entity.Id, typeof(Sungero.Exchange.ICancellationAgreementVersions), "BodyAssociatedApplication");


                        this._TrackingDeliveredToCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(Sungero.Exchange.ICancellationAgreementTracking), "DeliveredTo");

                        this._TrackingReturnTaskCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Workflow.ITask>(() => this.Entity.Id, typeof(Sungero.Exchange.ICancellationAgreementTracking), "ReturnTask");



    }

    public CancellationAgreementPresenter()
    {
      this.Init();
    }

    #endregion
  }
}

// ==================================================================
// CancellationAgreementCollectionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Client
{
  public class CancellationAgreementCollectionPresenter<T> : 
    global::Sungero.Docflow.Client.ContractualDocumentBaseCollectionPresenter<T>
    where T: class, global::Sungero.Exchange.ICancellationAgreement
  {
    #region Actions



    #endregion

    #region Methods


    #endregion

    public CancellationAgreementCollectionPresenter(global::System.Linq.IQueryable<T> query, OnLookup onLookup)
      : base(query, onLookup)
    {
    }

    public CancellationAgreementCollectionPresenter(global::System.Linq.IQueryable<T> query)
      : this(query, null) { }

    public CancellationAgreementCollectionPresenter(OnLookup onLookup)
      : this(null, onLookup) { }

    public CancellationAgreementCollectionPresenter()
      : this(null, null) { }
  }
}

// ==================================================================
// CancellationAgreementRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Client
{ 
  public class CancellationAgreementRepositoryImplementer<T> : 
      global::Sungero.Docflow.Client.ContractualDocumentBaseRepositoryImplementer<T>,
      global::Sungero.Exchange.ICancellationAgreementRepositoryImplementer<T>
      where T : global::Sungero.Exchange.ICancellationAgreement
    {
       public new global::Sungero.Exchange.ICancellationAgreementAccessRights AccessRights
       {
          get { return (global::Sungero.Exchange.ICancellationAgreementAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Exchange.ICancellationAgreementInfo Info
       {
          get { return (global::Sungero.Exchange.ICancellationAgreementInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Exchange.Client.CancellationAgreementTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// CancellationAgreementAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Client
{
  public class CancellationAgreementAccessRights : 
    Sungero.Docflow.Client.ContractualDocumentBaseAccessRights, Sungero.Exchange.ICancellationAgreementAccessRights
  {

    public CancellationAgreementAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class CancellationAgreementTypeAccessRights : 
    Sungero.Docflow.Client.ContractualDocumentBaseTypeAccessRights, Sungero.Exchange.ICancellationAgreementAccessRights
  {

    public CancellationAgreementTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}
