//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.SmartProcessing.Structures.Module
{
  public interface IRepackingPage
  {
    global::System.Int64 DocumentId { get; set; }
    global::System.Int32 Rotation { get; set; }
    global::System.Int32 Number { get; set; }

  }

  [global::System.Serializable]
  public class RepackingPage : IRepackingPage
  {
    public global::System.Int64 DocumentId { get; set; }
    public global::System.Int32 Rotation { get; set; }
    public global::System.Int32 Number { get; set; }


    public static IRepackingPage Create()
    {
      return new RepackingPage();
    }

    public static IRepackingPage Create(global::System.Int64 documentId, global::System.Int32 rotation, global::System.Int32 number)
    {
      return new RepackingPage
      {
        DocumentId = documentId,
        Rotation = rotation,
        Number = number
      };
    }

    public override int GetHashCode()
    {
      unchecked
      {
        return (this.DocumentId.GetHashCode() * 199) ^ (this.Rotation.GetHashCode() * 199) ^ (this.Number.GetHashCode() * 199);
      }
    }

    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != this.GetType()) return false;
      return Equals((RepackingPage)obj);
    }

    public static bool operator ==(RepackingPage left, RepackingPage right)
    {
      if (ReferenceEquals(left, right))
        return true;

      if (((object)left) == null || ((object)right) == null)
        return false;

      return left.Equals(right);
    }

    public static bool operator !=(RepackingPage left, RepackingPage right)
    {
      return !(left == right);
    }

    protected bool Equals(RepackingPage other)
    {
      return this.DocumentId == other.DocumentId
             && this.Rotation == other.Rotation
             && this.Number == other.Number;
    }

  }

  public interface INewDocument
  {
    global::System.String Name { get; set; }
    global::System.String TypeId { get; set; }
    global::System.Collections.Generic.List<global::Sungero.SmartProcessing.Structures.Module.IRepackingPage> Pages { get; set; }
    global::System.Boolean IsLeading { get; set; }

  }

  [global::System.Serializable]
  public class NewDocument : INewDocument
  {
    public global::System.String Name { get; set; }
    public global::System.String TypeId { get; set; }
    public global::System.Collections.Generic.List<global::Sungero.SmartProcessing.Structures.Module.IRepackingPage> Pages { get; set; }
    public global::System.Boolean IsLeading { get; set; }


    public static INewDocument Create()
    {
      return new NewDocument();
    }

    public static INewDocument Create(global::System.String name, global::System.String typeId, global::System.Collections.Generic.List<global::Sungero.SmartProcessing.Structures.Module.IRepackingPage> pages, global::System.Boolean isLeading)
    {
      return new NewDocument
      {
        Name = name,
        TypeId = typeId,
        Pages = pages,
        IsLeading = isLeading
      };
    }

    public override int GetHashCode()
    {
      unchecked
      {
        return ((this.Name != null ? this.Name.GetHashCode() : 0) * 199) ^ ((this.TypeId != null ? this.TypeId.GetHashCode() : 0) * 199) ^ ((this.Pages != null ? this.Pages.GetHashCode() : 0) * 199) ^ (this.IsLeading.GetHashCode() * 199);
      }
    }

    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != this.GetType()) return false;
      return Equals((NewDocument)obj);
    }

    public static bool operator ==(NewDocument left, NewDocument right)
    {
      if (ReferenceEquals(left, right))
        return true;

      if (((object)left) == null || ((object)right) == null)
        return false;

      return left.Equals(right);
    }

    public static bool operator !=(NewDocument left, NewDocument right)
    {
      return !(left == right);
    }

    protected bool Equals(NewDocument other)
    {
      return object.Equals(this.Name, other.Name) 
             && object.Equals(this.TypeId, other.TypeId) 
             && global::System.Linq.Enumerable.SequenceEqual(this.Pages, other.Pages)
             && this.IsLeading == other.IsLeading;
    }

  }

  public interface IRepackingDocumentDTO
  {
    global::System.String Name { get; set; }
    global::System.Int64 DocumentId { get; set; }
    global::System.Int64 VersionId { get; set; }
    global::System.String Type { get; set; }

  }

  [global::System.Serializable]
  public class RepackingDocumentDTO : IRepackingDocumentDTO
  {
    public global::System.String Name { get; set; }
    public global::System.Int64 DocumentId { get; set; }
    public global::System.Int64 VersionId { get; set; }
    public global::System.String Type { get; set; }


    public static IRepackingDocumentDTO Create()
    {
      return new RepackingDocumentDTO();
    }

    public static IRepackingDocumentDTO Create(global::System.String name, global::System.Int64 documentId, global::System.Int64 versionId, global::System.String type)
    {
      return new RepackingDocumentDTO
      {
        Name = name,
        DocumentId = documentId,
        VersionId = versionId,
        Type = type
      };
    }

    public override int GetHashCode()
    {
      unchecked
      {
        return ((this.Name != null ? this.Name.GetHashCode() : 0) * 199) ^ (this.DocumentId.GetHashCode() * 199) ^ (this.VersionId.GetHashCode() * 199) ^ ((this.Type != null ? this.Type.GetHashCode() : 0) * 199);
      }
    }

    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != this.GetType()) return false;
      return Equals((RepackingDocumentDTO)obj);
    }

    public static bool operator ==(RepackingDocumentDTO left, RepackingDocumentDTO right)
    {
      if (ReferenceEquals(left, right))
        return true;

      if (((object)left) == null || ((object)right) == null)
        return false;

      return left.Equals(right);
    }

    public static bool operator !=(RepackingDocumentDTO left, RepackingDocumentDTO right)
    {
      return !(left == right);
    }

    protected bool Equals(RepackingDocumentDTO other)
    {
      return object.Equals(this.Name, other.Name) 
             && this.DocumentId == other.DocumentId
             && this.VersionId == other.VersionId
             && object.Equals(this.Type, other.Type) ;
    }

  }

  public interface IRepackingDocumentType
  {
    global::System.String Id { get; set; }
    global::System.String Name { get; set; }

  }

  [global::System.Serializable]
  public class RepackingDocumentType : IRepackingDocumentType
  {
    public global::System.String Id { get; set; }
    public global::System.String Name { get; set; }


    public static IRepackingDocumentType Create()
    {
      return new RepackingDocumentType();
    }

    public static IRepackingDocumentType Create(global::System.String id, global::System.String name)
    {
      return new RepackingDocumentType
      {
        Id = id,
        Name = name
      };
    }

    public override int GetHashCode()
    {
      unchecked
      {
        return ((this.Id != null ? this.Id.GetHashCode() : 0) * 199) ^ ((this.Name != null ? this.Name.GetHashCode() : 0) * 199);
      }
    }

    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != this.GetType()) return false;
      return Equals((RepackingDocumentType)obj);
    }

    public static bool operator ==(RepackingDocumentType left, RepackingDocumentType right)
    {
      if (ReferenceEquals(left, right))
        return true;

      if (((object)left) == null || ((object)right) == null)
        return false;

      return left.Equals(right);
    }

    public static bool operator !=(RepackingDocumentType left, RepackingDocumentType right)
    {
      return !(left == right);
    }

    protected bool Equals(RepackingDocumentType other)
    {
      return object.Equals(this.Id, other.Id) 
             && object.Equals(this.Name, other.Name) ;
    }

  }

  public interface IExtractedText
  {
    global::System.String Text { get; set; }
    global::System.Collections.Generic.List<global::System.String> Pages { get; set; }
    global::System.String ErrorMessage { get; set; }

  }

  [global::System.Serializable]
  public class ExtractedText : IExtractedText
  {
    public global::System.String Text { get; set; }
    public global::System.Collections.Generic.List<global::System.String> Pages { get; set; }
    public global::System.String ErrorMessage { get; set; }


    public static IExtractedText Create()
    {
      return new ExtractedText();
    }

    public static IExtractedText Create(global::System.String text, global::System.Collections.Generic.List<global::System.String> pages, global::System.String errorMessage)
    {
      return new ExtractedText
      {
        Text = text,
        Pages = pages,
        ErrorMessage = errorMessage
      };
    }

    public override int GetHashCode()
    {
      unchecked
      {
        return ((this.Text != null ? this.Text.GetHashCode() : 0) * 199) ^ ((this.Pages != null ? this.Pages.GetHashCode() : 0) * 199) ^ ((this.ErrorMessage != null ? this.ErrorMessage.GetHashCode() : 0) * 199);
      }
    }

    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != this.GetType()) return false;
      return Equals((ExtractedText)obj);
    }

    public static bool operator ==(ExtractedText left, ExtractedText right)
    {
      if (ReferenceEquals(left, right))
        return true;

      if (((object)left) == null || ((object)right) == null)
        return false;

      return left.Equals(right);
    }

    public static bool operator !=(ExtractedText left, ExtractedText right)
    {
      return !(left == right);
    }

    protected bool Equals(ExtractedText other)
    {
      return object.Equals(this.Text, other.Text) 
             && global::System.Linq.Enumerable.SequenceEqual(this.Pages, other.Pages)
             && object.Equals(this.ErrorMessage, other.ErrorMessage) ;
    }

  }

}