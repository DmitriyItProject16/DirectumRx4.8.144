
// ==================================================================
// SignatureSetting.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
    public class SignatureSettingFilter<T> :
      global::Sungero.Domain.EntityFilterBase<T>
      where T : class, global::Sungero.Docflow.ISignatureSetting
    {
      protected new global::Sungero.Docflow.ISignatureSettingFilterState Filter { get; private set; }

      private global::Sungero.Docflow.ISignatureSettingFilterState filter
      {
        get
        {
          return this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        var args = new global::Sungero.Domain.FilteringEventArgs();
        global::System.Linq.IQueryable<T> result;
        var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Docflow.SignatureSettingFilteringServerHandler`1");
        if (filterType != null)
        {
          var genericType = filterType.MakeGenericType(typeof(T));
          var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { this.filter });
          var methodInfo = genericType.GetMethod("Filtering");
          result = (global::System.Linq.IQueryable<T>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
        }
        else
        {
          result = new global::Sungero.Docflow.SignatureSettingFilteringServerHandler<T>(this.filter).Filtering(query, args);
        }
        if (args.DisableCheckRights)
        global::Sungero.Domain.Security.FilteringAccessRightsOptions.DisableCheckRights<T>();
        return result;
      }

      public SignatureSettingFilter(global::Sungero.Docflow.ISignatureSettingFilterState filter)
      : base()
      {
        this.Filter = filter;
      }

      protected SignatureSettingFilter()
      {
      }
    }
      public class SignatureSettingUiFilter<T> :
        global::Sungero.Domain.EntityUiFilterBase<T>
        where T : class, global::Sungero.Docflow.ISignatureSetting
      {
        protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
        {
          return base.ApplyAppliedFilter(query);
        }
      }

    public class SignatureSettingSearchDialogModel : global::Sungero.CoreEntities.Server.DatabookEntrySearchDialogModel
        {
                  public override global::System.Int64? Id { get; protected set; }



                  public virtual global::System.Double? Amount { get; protected set; }
                  public virtual global::System.String Note { get; protected set; }
                  public virtual global::System.Int32? Priority { get; protected set; }
                  public virtual global::System.String SigningReason { get; protected set; }


                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Status { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Recipient { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> ValidTill { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> ValidFrom { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Reason { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Limit { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Commons.ICurrency> Currency { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> DocumentFlow { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.ICertificate> Certificate { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Company.IJobTitle> JobTitle { get; protected set; }


                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public SignatureSettingBusinessUnitsModel BusinessUnits { get; protected set; }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public SignatureSettingDocumentKindsModel DocumentKinds { get; protected set; }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public SignatureSettingDepartmentsModel Departments { get; protected set; }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public SignatureSettingCategoriesModel Categories { get; protected set; }

        }


      public class SignatureSettingBusinessUnitsModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int64? Id { get; protected set; }


         }
      public class SignatureSettingDocumentKindsModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int64? Id { get; protected set; }


         }
      public class SignatureSettingDepartmentsModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int64? Id { get; protected set; }


         }
      public class SignatureSettingCategoriesModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int64? Id { get; protected set; }


         }



  public class SignatureSettingFilterForRecipient<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IRecipient
    where TSourceEntity : class, global::Sungero.Docflow.ISignatureSetting
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Docflow.SignatureSettingRecipientPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { sourceEntity });
        var methodInfo = genericType.GetMethod("RecipientFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Docflow.SignatureSettingRecipientPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).RecipientFiltering(query, args);
      }
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public SignatureSettingFilterForRecipient(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class SignatureSettingSearchFilterForRecipient<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IRecipient
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Docflow.SignatureSettingRecipientSearchPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType);
        var methodInfo = genericType.GetMethod("RecipientSearchDialogFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Docflow.SignatureSettingRecipientSearchPropertyFilteringServerHandler<TQueryEntity>().RecipientSearchDialogFiltering(query, args);
      }
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public SignatureSettingSearchFilterForRecipient(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class SignatureSettingFilterForDocument<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Docflow.IOfficialDocument
    where TSourceEntity : class, global::Sungero.Docflow.ISignatureSetting
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Docflow.SignatureSettingDocumentPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { sourceEntity });
        var methodInfo = genericType.GetMethod("DocumentFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Docflow.SignatureSettingDocumentPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).DocumentFiltering(query, args);
      }
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public SignatureSettingFilterForDocument(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class SignatureSettingSearchFilterForDocument<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Docflow.IOfficialDocument
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Docflow.SignatureSettingDocumentSearchPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType);
        var methodInfo = genericType.GetMethod("DocumentSearchDialogFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Docflow.SignatureSettingDocumentSearchPropertyFilteringServerHandler<TQueryEntity>().DocumentSearchDialogFiltering(query, args);
      }
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public SignatureSettingSearchFilterForDocument(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class SignatureSettingFilterForCurrency<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Commons.ICurrency
    where TSourceEntity : class, global::Sungero.Docflow.ISignatureSetting
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Docflow.SignatureSettingCurrencyPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { sourceEntity });
        var methodInfo = genericType.GetMethod("CurrencyFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Docflow.SignatureSettingCurrencyPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).CurrencyFiltering(query, args);
      }
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public SignatureSettingFilterForCurrency(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class SignatureSettingSearchFilterForCurrency<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Commons.ICurrency
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Docflow.SignatureSettingCurrencySearchPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType);
        var methodInfo = genericType.GetMethod("CurrencySearchDialogFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Docflow.SignatureSettingCurrencySearchPropertyFilteringServerHandler<TQueryEntity>().CurrencySearchDialogFiltering(query, args);
      }
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public SignatureSettingSearchFilterForCurrency(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class SignatureSettingFilterForCertificate<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.ICertificate
    where TSourceEntity : class, global::Sungero.Docflow.ISignatureSetting
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Docflow.SignatureSettingCertificatePropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { sourceEntity });
        var methodInfo = genericType.GetMethod("CertificateFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Docflow.SignatureSettingCertificatePropertyFilteringServerHandler<TQueryEntity>(sourceEntity).CertificateFiltering(query, args);
      }
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public SignatureSettingFilterForCertificate(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class SignatureSettingSearchFilterForCertificate<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.ICertificate
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Docflow.SignatureSettingCertificateSearchPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType);
        var methodInfo = genericType.GetMethod("CertificateSearchDialogFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Docflow.SignatureSettingCertificateSearchPropertyFilteringServerHandler<TQueryEntity>().CertificateSearchDialogFiltering(query, args);
      }
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public SignatureSettingSearchFilterForCertificate(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class SignatureSettingFilterForJobTitle<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IJobTitle
    where TSourceEntity : class, global::Sungero.Docflow.ISignatureSetting
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Docflow.SignatureSettingJobTitlePropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { sourceEntity });
        var methodInfo = genericType.GetMethod("JobTitleFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Docflow.SignatureSettingJobTitlePropertyFilteringServerHandler<TQueryEntity>(sourceEntity).JobTitleFiltering(query, args);
      }
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public SignatureSettingFilterForJobTitle(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class SignatureSettingSearchFilterForJobTitle<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Company.IJobTitle
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Docflow.SignatureSettingJobTitleSearchPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType);
        var methodInfo = genericType.GetMethod("JobTitleSearchDialogFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Docflow.SignatureSettingJobTitleSearchPropertyFilteringServerHandler<TQueryEntity>().JobTitleSearchDialogFiltering(query, args);
      }
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public SignatureSettingSearchFilterForJobTitle(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::Sungero.Docflow.Server.SignatureSettingFilter<global::Sungero.Docflow.ISignatureSetting>))]
  [global::Sungero.Domain.UiFilter(typeof(global::Sungero.Docflow.Server.SignatureSettingUiFilter<global::Sungero.Docflow.ISignatureSetting>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Docflow.Server.SignatureSettingFilterForRecipient<global::Sungero.CoreEntities.IRecipient, global::Sungero.Docflow.ISignatureSetting>), "Recipient")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Docflow.Server.SignatureSettingSearchFilterForRecipient<global::Sungero.CoreEntities.IRecipient>), "Recipient")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Docflow.Server.SignatureSettingFilterForDocument<global::Sungero.Docflow.IOfficialDocument, global::Sungero.Docflow.ISignatureSetting>), "Document")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Docflow.Server.SignatureSettingSearchFilterForDocument<global::Sungero.Docflow.IOfficialDocument>), "Document")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Docflow.Server.SignatureSettingFilterForCurrency<global::Sungero.Commons.ICurrency, global::Sungero.Docflow.ISignatureSetting>), "Currency")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Docflow.Server.SignatureSettingSearchFilterForCurrency<global::Sungero.Commons.ICurrency>), "Currency")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Docflow.Server.SignatureSettingFilterForCertificate<global::Sungero.CoreEntities.ICertificate, global::Sungero.Docflow.ISignatureSetting>), "Certificate")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Docflow.Server.SignatureSettingSearchFilterForCertificate<global::Sungero.CoreEntities.ICertificate>), "Certificate")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Docflow.Server.SignatureSettingFilterForJobTitle<global::Sungero.Company.IJobTitle, global::Sungero.Docflow.ISignatureSetting>), "JobTitle")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Docflow.Server.SignatureSettingSearchFilterForJobTitle<global::Sungero.Company.IJobTitle>), "JobTitle")]


  public class SignatureSetting :
    global::Sungero.CoreEntities.Server.DatabookEntry, global::Sungero.Docflow.ISignatureSetting
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("19f9b6d8-b072-4af0-b6e1-3f8a339506be");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Docflow.Server.SignatureSetting.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Docflow.ISignatureSetting, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Name; }
      set { this.Name = value; }
    }

    public new virtual global::Sungero.Docflow.ISignatureSettingState State
    {
      get { return (global::Sungero.Docflow.ISignatureSettingState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Docflow.Shared.SignatureSettingState(this);
    }

    public new virtual global::Sungero.Docflow.ISignatureSettingInfo Info
    {
      get { return (global::Sungero.Docflow.ISignatureSettingInfo)base.Info; }
    }

    public new virtual global::Sungero.Docflow.ISignatureSettingAccessRights AccessRights
    {
      get { return (global::Sungero.Docflow.ISignatureSettingAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Docflow.Server.SignatureSettingAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.Docflow.Server.SignatureSettingFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Docflow.Shared.SignatureSettingFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.Docflow.SignatureSettingServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.Docflow.SignatureSettingSharedHandlers(this);
    }

    private global::System.String _Name;
    public virtual global::System.String Name
    {
      get
      {
        return this._Name;
      }

      set
      {
        this.SetPropertyValue("Name", this._Name, value, (propertyValue) => { this._Name = propertyValue; }, this.NameChangedHandler);
      }
    }
    private global::System.DateTime? _ValidTill;
    public virtual global::System.DateTime? ValidTill
    {
      get
      {
        return this._ValidTill;
      }

      set
      {
        this.SetPropertyValue("ValidTill", this._ValidTill, value, (propertyValue) => { this._ValidTill = propertyValue; }, this.ValidTillChangedHandler);
      }
    }
    private global::System.DateTime? _ValidFrom;
    public virtual global::System.DateTime? ValidFrom
    {
      get
      {
        return this._ValidFrom;
      }

      set
      {
        this.SetPropertyValue("ValidFrom", this._ValidFrom, value, (propertyValue) => { this._ValidFrom = propertyValue; }, this.ValidFromChangedHandler);
      }
    }
    private global::System.Double? _Amount;
    public virtual global::System.Double? Amount
    {
      get
      {
        return this._Amount;
      }

      set
      {
        this.SetPropertyValue("Amount", this._Amount, value, (propertyValue) => { this._Amount = propertyValue; }, this.AmountChangedHandler);
      }
    }
    private global::System.String _Note;
    public virtual global::System.String Note
    {
      get
      {
        return this._Note;
      }

      set
      {
        this.SetPropertyValue("Note", this._Note, value, (propertyValue) => { this._Note = propertyValue; }, this.NoteChangedHandler);
      }
    }
    private global::System.Boolean? _IsSystem;
    public virtual global::System.Boolean? IsSystem
    {
      get
      {
        return this._IsSystem;
      }

      set
      {
        this.SetPropertyValue("IsSystem", this._IsSystem, value, (propertyValue) => { this._IsSystem = propertyValue; }, this.IsSystemChangedHandler);
      }
    }
    private global::System.String _DocumentInfo;
    public virtual global::System.String DocumentInfo
    {
      get
      {
        return this._DocumentInfo;
      }

      set
      {
        this.SetPropertyValue("DocumentInfo", this._DocumentInfo, value, (propertyValue) => { this._DocumentInfo = propertyValue; }, this.DocumentInfoChangedHandler);
      }
    }
    private global::System.Int32? _Priority;
    public virtual global::System.Int32? Priority
    {
      get
      {
        return this._Priority;
      }

      set
      {
        this.SetPropertyValue("Priority", this._Priority, value, (propertyValue) => { this._Priority = propertyValue; }, this.PriorityChangedHandler);
      }
    }
    private global::System.String _SigningReason;
    public virtual global::System.String SigningReason
    {
      get
      {
        return this._SigningReason;
      }

      set
      {
        this.SetPropertyValue("SigningReason", this._SigningReason, value, (propertyValue) => { this._SigningReason = propertyValue; }, this.SigningReasonChangedHandler);
      }
    }






    private static global::Sungero.Domain.Shared.EnumerationItems _ReasonItems = new global::Sungero.Domain.Shared.EnumerationItems(
      null,
      typeof(global::Sungero.Docflow.SignatureSetting.Reason),
      typeof(global::Sungero.Docflow.Server.SignatureSetting),
      "Reason");

    public static global::Sungero.Domain.Shared.EnumerationItems ReasonItems
    {
      get { return global::Sungero.Docflow.Server.SignatureSetting._ReasonItems; }
    }

    public virtual global::Sungero.Domain.Shared.EnumerationItems ReasonAllowedItems
    {
      get { return global::Sungero.Docflow.Server.SignatureSetting.ReasonItems; }
    }

    private global::Sungero.Core.Enumeration? _Reason;

    public virtual global::Sungero.Core.Enumeration? Reason
    {
      get { return this._Reason; }
      set { this.SetEnumPropertyValue("Reason", this._Reason, value, (propertyValue) => { this._Reason = propertyValue; }, this.ReasonChangedHandler, this.ReasonAllowedItems); }
    }
    private static global::Sungero.Domain.Shared.EnumerationItems _LimitItems = new global::Sungero.Domain.Shared.EnumerationItems(
      null,
      typeof(global::Sungero.Docflow.SignatureSetting.Limit),
      typeof(global::Sungero.Docflow.Server.SignatureSetting),
      "Limit");

    public static global::Sungero.Domain.Shared.EnumerationItems LimitItems
    {
      get { return global::Sungero.Docflow.Server.SignatureSetting._LimitItems; }
    }

    public virtual global::Sungero.Domain.Shared.EnumerationItems LimitAllowedItems
    {
      get { return global::Sungero.Docflow.Server.SignatureSetting.LimitItems; }
    }

    private global::Sungero.Core.Enumeration? _Limit;

    public virtual global::Sungero.Core.Enumeration? Limit
    {
      get { return this._Limit; }
      set { this.SetEnumPropertyValue("Limit", this._Limit, value, (propertyValue) => { this._Limit = propertyValue; }, this.LimitChangedHandler, this.LimitAllowedItems); }
    }
    private static global::Sungero.Domain.Shared.EnumerationItems _DocumentFlowItems = new global::Sungero.Domain.Shared.EnumerationItems(
      null,
      typeof(global::Sungero.Docflow.SignatureSetting.DocumentFlow),
      typeof(global::Sungero.Docflow.Server.SignatureSetting),
      "DocumentFlow");

    public static global::Sungero.Domain.Shared.EnumerationItems DocumentFlowItems
    {
      get { return global::Sungero.Docflow.Server.SignatureSetting._DocumentFlowItems; }
    }

    public virtual global::Sungero.Domain.Shared.EnumerationItems DocumentFlowAllowedItems
    {
      get { return global::Sungero.Docflow.Server.SignatureSetting.DocumentFlowItems; }
    }

    private global::Sungero.Core.Enumeration? _DocumentFlow;

    public virtual global::Sungero.Core.Enumeration? DocumentFlow
    {
      get { return this._DocumentFlow; }
      set { this.SetEnumPropertyValue("DocumentFlow", this._DocumentFlow, value, (propertyValue) => { this._DocumentFlow = propertyValue; }, this.DocumentFlowChangedHandler, this.DocumentFlowAllowedItems); }
    }


    private global::Sungero.CoreEntities.IRecipient _Recipient;
    public virtual global::Sungero.CoreEntities.IRecipient Recipient
    {
      get
      {
        return this._Recipient;
      }

      set
      {
        this.SetPropertyValue("Recipient", this._Recipient, value, (propertyValue) => { this._Recipient = propertyValue; }, this.RecipientChangedHandler);
      }
    }
    private global::Sungero.Docflow.IOfficialDocument _Document;
    public virtual global::Sungero.Docflow.IOfficialDocument Document
    {
      get
      {
        return this._Document;
      }

      set
      {
        this.SetPropertyValue("Document", this._Document, value, (propertyValue) => { this._Document = propertyValue; }, this.DocumentChangedHandler);
      }
    }
    private global::Sungero.Commons.ICurrency _Currency;
    public virtual global::Sungero.Commons.ICurrency Currency
    {
      get
      {
        return this._Currency;
      }

      set
      {
        this.SetPropertyValue("Currency", this._Currency, value, (propertyValue) => { this._Currency = propertyValue; }, this.CurrencyChangedHandler);
      }
    }
    private global::Sungero.CoreEntities.ICertificate _Certificate;
    public virtual global::Sungero.CoreEntities.ICertificate Certificate
    {
      get
      {
        return this._Certificate;
      }

      set
      {
        this.SetPropertyValue("Certificate", this._Certificate, value, (propertyValue) => { this._Certificate = propertyValue; }, this.CertificateChangedHandler);
      }
    }
    private global::Sungero.Company.IJobTitle _JobTitle;
    public virtual global::Sungero.Company.IJobTitle JobTitle
    {
      get
      {
        return this._JobTitle;
      }

      set
      {
        this.SetPropertyValue("JobTitle", this._JobTitle, value, (propertyValue) => { this._JobTitle = propertyValue; }, this.JobTitleChangedHandler);
      }
    }


    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.ISignatureSettingBusinessUnits> _BusinessUnits;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.ISignatureSettingBusinessUnits> BusinessUnits
    {
      get
      {
        if (this._BusinessUnits == null)
        {
          this._BusinessUnits = this.CreateBusinessUnitsCollection();
          this.SetBusinessUnitsEventHandlers();
        }
        return this._BusinessUnits;
      }

      set
      {
        if (this._BusinessUnits != null)
          this.UnsetChildCollectionEventHandlers(this._BusinessUnits);

        this._BusinessUnits = value;
        this.SetBusinessUnitsEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.ISignatureSettingBusinessUnits> CreateBusinessUnitsCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Docflow.ISignatureSettingBusinessUnits>() { RootEntity = this };
    }

    private void SetBusinessUnitsEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._BusinessUnits, "BusinessUnits");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._BusinessUnits;
      changeNotifier.Added += this.BusinessUnitsAddedHandler;
      changeNotifier.Deleted += this.BusinessUnitsDeletedHandler;
      changeNotifier.Added += this.BusinessUnitsCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.BusinessUnitsCollectionUpdateEventHandler;
      changeNotifier.Updated += this.BusinessUnitsCollectionUpdateEventHandler;
    }

    private void BusinessUnitsCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled && this.IsPropertyChangedAppliedHandlerEnabled("BusinessUnits"))
        this.BusinessUnitsChangedHandler();
    }
    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.ISignatureSettingDocumentKinds> _DocumentKinds;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.ISignatureSettingDocumentKinds> DocumentKinds
    {
      get
      {
        if (this._DocumentKinds == null)
        {
          this._DocumentKinds = this.CreateDocumentKindsCollection();
          this.SetDocumentKindsEventHandlers();
        }
        return this._DocumentKinds;
      }

      set
      {
        if (this._DocumentKinds != null)
          this.UnsetChildCollectionEventHandlers(this._DocumentKinds);

        this._DocumentKinds = value;
        this.SetDocumentKindsEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.ISignatureSettingDocumentKinds> CreateDocumentKindsCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Docflow.ISignatureSettingDocumentKinds>() { RootEntity = this };
    }

    private void SetDocumentKindsEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._DocumentKinds, "DocumentKinds");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._DocumentKinds;
      changeNotifier.Added += this.DocumentKindsAddedHandler;
      changeNotifier.Deleted += this.DocumentKindsDeletedHandler;
      changeNotifier.Added += this.DocumentKindsCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.DocumentKindsCollectionUpdateEventHandler;
      changeNotifier.Updated += this.DocumentKindsCollectionUpdateEventHandler;
    }

    private void DocumentKindsCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled && this.IsPropertyChangedAppliedHandlerEnabled("DocumentKinds"))
        this.DocumentKindsChangedHandler();
    }
    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.ISignatureSettingDepartments> _Departments;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.ISignatureSettingDepartments> Departments
    {
      get
      {
        if (this._Departments == null)
        {
          this._Departments = this.CreateDepartmentsCollection();
          this.SetDepartmentsEventHandlers();
        }
        return this._Departments;
      }

      set
      {
        if (this._Departments != null)
          this.UnsetChildCollectionEventHandlers(this._Departments);

        this._Departments = value;
        this.SetDepartmentsEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.ISignatureSettingDepartments> CreateDepartmentsCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Docflow.ISignatureSettingDepartments>() { RootEntity = this };
    }

    private void SetDepartmentsEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._Departments, "Departments");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._Departments;
      changeNotifier.Added += this.DepartmentsAddedHandler;
      changeNotifier.Deleted += this.DepartmentsDeletedHandler;
      changeNotifier.Added += this.DepartmentsCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.DepartmentsCollectionUpdateEventHandler;
      changeNotifier.Updated += this.DepartmentsCollectionUpdateEventHandler;
    }

    private void DepartmentsCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled && this.IsPropertyChangedAppliedHandlerEnabled("Departments"))
        this.DepartmentsChangedHandler();
    }
    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.ISignatureSettingCategories> _Categories;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.ISignatureSettingCategories> Categories
    {
      get
      {
        if (this._Categories == null)
        {
          this._Categories = this.CreateCategoriesCollection();
          this.SetCategoriesEventHandlers();
        }
        return this._Categories;
      }

      set
      {
        if (this._Categories != null)
          this.UnsetChildCollectionEventHandlers(this._Categories);

        this._Categories = value;
        this.SetCategoriesEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.ISignatureSettingCategories> CreateCategoriesCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Docflow.ISignatureSettingCategories>() { RootEntity = this };
    }

    private void SetCategoriesEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._Categories, "Categories");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._Categories;
      changeNotifier.Added += this.CategoriesAddedHandler;
      changeNotifier.Deleted += this.CategoriesDeletedHandler;
      changeNotifier.Added += this.CategoriesCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.CategoriesCollectionUpdateEventHandler;
      changeNotifier.Updated += this.CategoriesCollectionUpdateEventHandler;
    }

    private void CategoriesCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled && this.IsPropertyChangedAppliedHandlerEnabled("Categories"))
        this.CategoriesChangedHandler();
    }



    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      var instance = Sungero.Metadata.Services.AppliedTypesManager.CreateInstance("Sungero.Docflow.SignatureSettingCreatingFromServerHandler", new object[] { (global::Sungero.Docflow.ISignatureSetting)entitySource, this.Info });
      if (instance != null)
        return (global::Sungero.Domain.Shared.EntityCreatingFromServerHandler)instance;

      return new global::Sungero.Docflow.SignatureSettingCreatingFromServerHandler((global::Sungero.Docflow.ISignatureSetting)entitySource, this.Info);
    }

    #region Framework events

    protected void NameChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Name, this.Name, this);
     ((global::Sungero.Docflow.ISignatureSettingSharedHandlers)this.SharedHandlers).NameChanged(args);
    }

    protected void RecipientChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.SignatureSettingRecipientChangedEventArgs(this.State.Properties.Recipient, this.Recipient, this);
     ((global::Sungero.Docflow.ISignatureSettingSharedHandlers)this.SharedHandlers).RecipientChanged(args);
    }

    protected void DocumentChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.SignatureSettingDocumentChangedEventArgs(this.State.Properties.Document, this.Document, this);
     ((global::Sungero.Docflow.ISignatureSettingSharedHandlers)this.SharedHandlers).DocumentChanged(args);
    }

    protected void ValidTillChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.ValidTill, this.ValidTill, this);
     ((global::Sungero.Docflow.ISignatureSettingSharedHandlers)this.SharedHandlers).ValidTillChanged(args);
    }

    protected void ValidFromChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.ValidFrom, this.ValidFrom, this);
     ((global::Sungero.Docflow.ISignatureSettingSharedHandlers)this.SharedHandlers).ValidFromChanged(args);
    }

    protected void ReasonChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.Reason, this.Reason, this);
     ((global::Sungero.Docflow.ISignatureSettingSharedHandlers)this.SharedHandlers).ReasonChanged(args);
    }

    protected void BusinessUnitsChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.Docflow.ISignatureSettingSharedHandlers)this.SharedHandlers).BusinessUnitsChanged(args);
    }

    protected void DocumentKindsChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.Docflow.ISignatureSettingSharedHandlers)this.SharedHandlers).DocumentKindsChanged(args);
    }

    protected void LimitChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.Limit, this.Limit, this);
     ((global::Sungero.Docflow.ISignatureSettingSharedHandlers)this.SharedHandlers).LimitChanged(args);
    }

    protected void AmountChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DoublePropertyChangedEventArgs(this.State.Properties.Amount, this.Amount, this);
     ((global::Sungero.Docflow.ISignatureSettingSharedHandlers)this.SharedHandlers).AmountChanged(args);
    }

    protected void CurrencyChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.SignatureSettingCurrencyChangedEventArgs(this.State.Properties.Currency, this.Currency, this);
     ((global::Sungero.Docflow.ISignatureSettingSharedHandlers)this.SharedHandlers).CurrencyChanged(args);
    }

    protected void NoteChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Note, this.Note, this);
     ((global::Sungero.Docflow.ISignatureSettingSharedHandlers)this.SharedHandlers).NoteChanged(args);
    }

    protected void IsSystemChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.IsSystem, this.IsSystem, this);
     ((global::Sungero.Docflow.ISignatureSettingSharedHandlers)this.SharedHandlers).IsSystemChanged(args);
    }

    protected void DocumentInfoChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.DocumentInfo, this.DocumentInfo, this);
     ((global::Sungero.Docflow.ISignatureSettingSharedHandlers)this.SharedHandlers).DocumentInfoChanged(args);
    }

    protected void DocumentFlowChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.DocumentFlow, this.DocumentFlow, this);
     ((global::Sungero.Docflow.ISignatureSettingSharedHandlers)this.SharedHandlers).DocumentFlowChanged(args);
    }

    protected void DepartmentsChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.Docflow.ISignatureSettingSharedHandlers)this.SharedHandlers).DepartmentsChanged(args);
    }

    protected void CategoriesChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.Docflow.ISignatureSettingSharedHandlers)this.SharedHandlers).CategoriesChanged(args);
    }

    protected void PriorityChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.IntegerPropertyChangedEventArgs(this.State.Properties.Priority, this.Priority, this);
     ((global::Sungero.Docflow.ISignatureSettingSharedHandlers)this.SharedHandlers).PriorityChanged(args);
    }

    protected void CertificateChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.SignatureSettingCertificateChangedEventArgs(this.State.Properties.Certificate, this.Certificate, this);
     ((global::Sungero.Docflow.ISignatureSettingSharedHandlers)this.SharedHandlers).CertificateChanged(args);
    }

    protected void SigningReasonChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.SigningReason, this.SigningReason, this);
     ((global::Sungero.Docflow.ISignatureSettingSharedHandlers)this.SharedHandlers).SigningReasonChanged(args);
    }

    protected void JobTitleChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.SignatureSettingJobTitleChangedEventArgs(this.State.Properties.JobTitle, this.JobTitle, this);
     ((global::Sungero.Docflow.ISignatureSettingSharedHandlers)this.SharedHandlers).JobTitleChanged(args);
    }



    protected virtual global::Sungero.Docflow.SignatureSettingBusinessUnitsSharedCollectionHandlers CreateBusinessUnitsAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Docflow.SignatureSettingBusinessUnitsSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.Docflow.SignatureSettingBusinessUnitsSharedCollectionHandlers CreateBusinessUnitsDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Docflow.SignatureSettingBusinessUnitsSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void BusinessUnitsAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      var type = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Docflow.SignatureSettingBusinessUnitsSharedCollectionHandlers");
      if (type != null)
      {
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(type, new object[] { this, e.Value, null, e.Source });
        var methodInfo = type.GetMethod("BusinessUnitsAdded");
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { args });
      }
      else
      {
        var collectionHandlers = this.CreateBusinessUnitsAddedHandler(e);
        if (collectionHandlers != null)
        {
          var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
          collectionHandlers.BusinessUnitsAdded(args);
        }
      }
    }

    protected virtual void BusinessUnitsDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      var type = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Docflow.SignatureSettingBusinessUnitsSharedCollectionHandlers");
      if (type != null)
      {
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(type, new object[] { this, null, e.Value, null });
        var methodInfo = type.GetMethod("BusinessUnitsDeleted");
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { args });
      }
      else
      {
        var collectionHandlers = this.CreateBusinessUnitsDeletedHandler(e);
        if (collectionHandlers != null)
        {
          var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
          collectionHandlers.BusinessUnitsDeleted(args);
        }
      }
    }


    protected virtual global::Sungero.Docflow.SignatureSettingDocumentKindsSharedCollectionHandlers CreateDocumentKindsAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Docflow.SignatureSettingDocumentKindsSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.Docflow.SignatureSettingDocumentKindsSharedCollectionHandlers CreateDocumentKindsDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Docflow.SignatureSettingDocumentKindsSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void DocumentKindsAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      var type = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Docflow.SignatureSettingDocumentKindsSharedCollectionHandlers");
      if (type != null)
      {
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(type, new object[] { this, e.Value, null, e.Source });
        var methodInfo = type.GetMethod("DocumentKindsAdded");
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { args });
      }
      else
      {
        var collectionHandlers = this.CreateDocumentKindsAddedHandler(e);
        if (collectionHandlers != null)
        {
          var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
          collectionHandlers.DocumentKindsAdded(args);
        }
      }
    }

    protected virtual void DocumentKindsDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      var type = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Docflow.SignatureSettingDocumentKindsSharedCollectionHandlers");
      if (type != null)
      {
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(type, new object[] { this, null, e.Value, null });
        var methodInfo = type.GetMethod("DocumentKindsDeleted");
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { args });
      }
      else
      {
        var collectionHandlers = this.CreateDocumentKindsDeletedHandler(e);
        if (collectionHandlers != null)
        {
          var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
          collectionHandlers.DocumentKindsDeleted(args);
        }
      }
    }


    protected virtual global::Sungero.Docflow.SignatureSettingDepartmentsSharedCollectionHandlers CreateDepartmentsAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Docflow.SignatureSettingDepartmentsSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.Docflow.SignatureSettingDepartmentsSharedCollectionHandlers CreateDepartmentsDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Docflow.SignatureSettingDepartmentsSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void DepartmentsAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      var type = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Docflow.SignatureSettingDepartmentsSharedCollectionHandlers");
      if (type != null)
      {
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(type, new object[] { this, e.Value, null, e.Source });
        var methodInfo = type.GetMethod("DepartmentsAdded");
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { args });
      }
      else
      {
        var collectionHandlers = this.CreateDepartmentsAddedHandler(e);
        if (collectionHandlers != null)
        {
          var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
          collectionHandlers.DepartmentsAdded(args);
        }
      }
    }

    protected virtual void DepartmentsDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      var type = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Docflow.SignatureSettingDepartmentsSharedCollectionHandlers");
      if (type != null)
      {
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(type, new object[] { this, null, e.Value, null });
        var methodInfo = type.GetMethod("DepartmentsDeleted");
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { args });
      }
      else
      {
        var collectionHandlers = this.CreateDepartmentsDeletedHandler(e);
        if (collectionHandlers != null)
        {
          var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
          collectionHandlers.DepartmentsDeleted(args);
        }
      }
    }


    protected virtual global::Sungero.Docflow.SignatureSettingCategoriesSharedCollectionHandlers CreateCategoriesAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Docflow.SignatureSettingCategoriesSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.Docflow.SignatureSettingCategoriesSharedCollectionHandlers CreateCategoriesDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Docflow.SignatureSettingCategoriesSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void CategoriesAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      var type = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Docflow.SignatureSettingCategoriesSharedCollectionHandlers");
      if (type != null)
      {
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(type, new object[] { this, e.Value, null, e.Source });
        var methodInfo = type.GetMethod("CategoriesAdded");
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { args });
      }
      else
      {
        var collectionHandlers = this.CreateCategoriesAddedHandler(e);
        if (collectionHandlers != null)
        {
          var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
          collectionHandlers.CategoriesAdded(args);
        }
      }
    }

    protected virtual void CategoriesDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      var type = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Docflow.SignatureSettingCategoriesSharedCollectionHandlers");
      if (type != null)
      {
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(type, new object[] { this, null, e.Value, null });
        var methodInfo = type.GetMethod("CategoriesDeleted");
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { args });
      }
      else
      {
        var collectionHandlers = this.CreateCategoriesDeletedHandler(e);
        if (collectionHandlers != null)
        {
          var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
          collectionHandlers.CategoriesDeleted(args);
        }
      }
    }


    #endregion


    public SignatureSetting()
    {
    }

  }
}

// ==================================================================
// SignatureSettingHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow
{
  public partial class SignatureSettingRecipientPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IRecipient
  {
    private global::Sungero.Docflow.ISignatureSetting _obj
    {
      get { return (global::Sungero.Docflow.ISignatureSetting)this.Entity; }
    }

    public SignatureSettingRecipientPropertyFilteringServerHandler(global::Sungero.Docflow.ISignatureSetting entity)
      : base(entity)
    {
    }
  }

  public partial class SignatureSettingRecipientSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IRecipient
  {

    public virtual global::System.Linq.IQueryable<T> RecipientSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public SignatureSettingRecipientSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class SignatureSettingDocumentPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Docflow.IOfficialDocument
  {
    private global::Sungero.Docflow.ISignatureSetting _obj
    {
      get { return (global::Sungero.Docflow.ISignatureSetting)this.Entity; }
    }

    public SignatureSettingDocumentPropertyFilteringServerHandler(global::Sungero.Docflow.ISignatureSetting entity)
      : base(entity)
    {
    }
  }

  public partial class SignatureSettingDocumentSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Docflow.IOfficialDocument
  {

    public virtual global::System.Linq.IQueryable<T> DocumentSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public SignatureSettingDocumentSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class SignatureSettingCurrencyPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Commons.ICurrency
  {
    private global::Sungero.Docflow.ISignatureSetting _obj
    {
      get { return (global::Sungero.Docflow.ISignatureSetting)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> CurrencyFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public SignatureSettingCurrencyPropertyFilteringServerHandler(global::Sungero.Docflow.ISignatureSetting entity)
      : base(entity)
    {
    }
  }

  public partial class SignatureSettingCurrencySearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Commons.ICurrency
  {

    public virtual global::System.Linq.IQueryable<T> CurrencySearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public SignatureSettingCurrencySearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class SignatureSettingCertificatePropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.ICertificate
  {
    private global::Sungero.Docflow.ISignatureSetting _obj
    {
      get { return (global::Sungero.Docflow.ISignatureSetting)this.Entity; }
    }

    public SignatureSettingCertificatePropertyFilteringServerHandler(global::Sungero.Docflow.ISignatureSetting entity)
      : base(entity)
    {
    }
  }

  public partial class SignatureSettingCertificateSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.ICertificate
  {

    public virtual global::System.Linq.IQueryable<T> CertificateSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public SignatureSettingCertificateSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class SignatureSettingJobTitlePropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IJobTitle
  {
    private global::Sungero.Docflow.ISignatureSetting _obj
    {
      get { return (global::Sungero.Docflow.ISignatureSetting)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> JobTitleFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public SignatureSettingJobTitlePropertyFilteringServerHandler(global::Sungero.Docflow.ISignatureSetting entity)
      : base(entity)
    {
    }
  }

  public partial class SignatureSettingJobTitleSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IJobTitle
  {

    public virtual global::System.Linq.IQueryable<T> JobTitleSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public SignatureSettingJobTitleSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



  public partial class SignatureSettingFilteringServerHandler<T>
    : global::Sungero.Domain.EntityFilteringServerHandler<T>  
    where T : class, global::Sungero.Docflow.ISignatureSetting
  {
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected new global::Sungero.Docflow.ISignatureSettingFilterState Filter { get; private set; }

    private global::Sungero.Docflow.ISignatureSettingFilterState _filter
    {
      get
      {
        return this.Filter;
      }
    }

    public SignatureSettingFilteringServerHandler(global::Sungero.Docflow.ISignatureSettingFilterState filter)
    : base()
    {
      this.Filter = filter;
    }

    protected SignatureSettingFilteringServerHandler()
    {
    }

      public virtual global::System.Linq.IQueryable<Sungero.Docflow.IDocumentKind> DocumentKindFiltering(global::System.Linq.IQueryable<Sungero.Docflow.IDocumentKind> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        return query;
      }


  }

  public partial class SignatureSettingUiFilteringServerHandler<T>
    : global::Sungero.Domain.EntityUiFilteringServerHandler<T>
    where T : class, global::Sungero.Docflow.ISignatureSetting
  {
    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.UiFilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }
  }

  public partial class SignatureSettingSearchDialogServerHandler : global::Sungero.CoreEntities.DatabookEntrySearchDialogServerHandler
   {
     private global::Sungero.Docflow.Server.SignatureSettingSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.Docflow.Server.SignatureSettingSearchDialogModel)this.Dialog;
       }
     }

     public SignatureSettingSearchDialogServerHandler(global::Sungero.Docflow.Server.SignatureSettingSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class SignatureSettingServerHandlers : global::Sungero.CoreEntities.DatabookEntryServerHandlers
  {
    private global::Sungero.Docflow.ISignatureSetting _obj
    {
      get { return (global::Sungero.Docflow.ISignatureSetting)this.Entity; }
    }

    public SignatureSettingServerHandlers(global::Sungero.Docflow.ISignatureSetting entity)
      : base(entity)
    {
    }
  }

  public partial class SignatureSettingCreatingFromServerHandler : global::Sungero.CoreEntities.DatabookEntryCreatingFromServerHandler
  {
    private global::Sungero.Docflow.ISignatureSetting _source
    {
      get { return (global::Sungero.Docflow.ISignatureSetting)this.Source; }
    }

    private global::Sungero.Docflow.ISignatureSettingInfo _info
    {
      get { return (global::Sungero.Docflow.ISignatureSettingInfo)this._Info; }
    }

    public SignatureSettingCreatingFromServerHandler(global::Sungero.Docflow.ISignatureSetting source, global::Sungero.Docflow.ISignatureSettingInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// SignatureSettingEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
}

// ==================================================================
// SignatureSettingAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
  public class SignatureSettingAccessRights : 
    Sungero.CoreEntities.Server.DatabookEntryAccessRights, Sungero.Docflow.ISignatureSettingAccessRights
  {

    public SignatureSettingAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class SignatureSettingTypeAccessRights : 
    Sungero.CoreEntities.Server.DatabookEntryTypeAccessRights, Sungero.Docflow.ISignatureSettingAccessRights
  {

    public SignatureSettingTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// SignatureSettingRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
    public class SignatureSettingRepositoryImplementer<T> : 
      global::Sungero.Domain.RepositoryImplementer<T>,
      global::Sungero.Docflow.ISignatureSettingRepositoryImplementer<T>
      where T : global::Sungero.Docflow.ISignatureSetting 
    {
       public new global::Sungero.Docflow.ISignatureSettingAccessRights AccessRights
       {
          get { return (global::Sungero.Docflow.ISignatureSettingAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Docflow.ISignatureSettingInfo Info
       {
          get { return (global::Sungero.Docflow.ISignatureSettingInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Docflow.Server.SignatureSettingTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// SignatureSettingPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
    public class SignatureSettingRecipientPanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Docflow.ISignatureSetting
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IEmployee>)query;
        var typedState = (global::Sungero.Docflow.ISignatureSettingFilterState)this.State;
        var handlers = new global::Sungero.Docflow.SignatureSettingFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.RecipientFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IEmployee>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Docflow.ISignatureSetting>(query);
      }
    }

    public class SignatureSettingDocumentKindPanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Docflow.ISignatureSetting
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Docflow.IDocumentKind>)query;
        var typedState = (global::Sungero.Docflow.ISignatureSettingFilterState)this.State;
        var handlers = new global::Sungero.Docflow.SignatureSettingFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.DocumentKindFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Docflow.IDocumentKind>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Docflow.ISignatureSetting>(query);
      }
    }

}

// ==================================================================
// SignatureSettingServerFunctions.g.cs
// ==================================================================

namespace Sungero.Docflow.Server
{
  public partial class SignatureSettingFunctions : global::Sungero.CoreEntities.Server.DatabookEntryFunctions
  {
    private global::Sungero.Docflow.ISignatureSetting _obj
    {
      get { return (global::Sungero.Docflow.ISignatureSetting)this.Entity; }
    }

    public SignatureSettingFunctions(global::Sungero.Docflow.ISignatureSetting entity) : base(entity) { }
  }
}

// ==================================================================
// SignatureSettingFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Functions
{
  internal static class SignatureSetting
  {
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.SignatureSettingFunctions" />
    internal static  void UpdateSigningRole(global::Sungero.Docflow.ISignatureSetting signatureSetting, global::System.Boolean beforeDelete)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)signatureSetting).FunctionsContainer.ServerFunctions;
      var __funcMethod = __functions.GetType().GetMethod("UpdateSigningRole", new System.Type[] { typeof(global::System.Boolean) });
    global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] { beforeDelete });
    }
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.SignatureSettingFunctions" />
    internal static  global::System.String GetSignSettingCondition(global::Sungero.Docflow.ISignatureSetting signatureSetting)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)signatureSetting).FunctionsContainer.ServerFunctions;
      var __funcMethod = __functions.GetType().GetMethod("GetSignSettingCondition", new System.Type[] {  });
      return (global::System.String)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] {  });
    }
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.SignatureSettingFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  void UpdateBusinessUnitSetting(global::Sungero.Company.IBusinessUnit unit)
    {
      var __funcType = Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Docflow.Server.SignatureSettingFunctions");
      if (__funcType != null)
      {    
        var __funcMethod = __funcType.GetMethod("UpdateBusinessUnitSetting",
          System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic,
          null, new System.Type[] { typeof(global::Sungero.Company.IBusinessUnit) }, null);
    global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, null, new object[] { unit });
      }
      else
      {
    global::Sungero.Docflow.Server.SignatureSettingFunctions.UpdateBusinessUnitSetting(unit);
      }
    }
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.SignatureSettingFunctions" />
    internal static  global::System.Linq.IQueryable<global::Sungero.Docflow.ISignatureSetting> GetSignatureSettingsByDocumentKind(global::Sungero.Docflow.IDocumentKind documentKind)
    {
      var __funcType = Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Docflow.Server.SignatureSettingFunctions");
      if (__funcType != null)
      {    
        var __funcMethod = __funcType.GetMethod("GetSignatureSettingsByDocumentKind",
          System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic,
          null, new System.Type[] { typeof(global::Sungero.Docflow.IDocumentKind) }, null);
        return (global::System.Linq.IQueryable<global::Sungero.Docflow.ISignatureSetting>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, null, new object[] { documentKind });
      }
      else
      {
        return global::Sungero.Docflow.Server.SignatureSettingFunctions.GetSignatureSettingsByDocumentKind(documentKind);
      }
    }
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.SignatureSettingFunctions" />
    internal static  global::System.Linq.IQueryable<global::Sungero.Docflow.ISignatureSetting> GetSignatureSettings(global::System.Collections.Generic.List<global::Sungero.Company.IBusinessUnit> businessUnits, global::System.Collections.Generic.List<global::Sungero.Docflow.IDocumentKind> kinds)
    {
      var __funcType = Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Docflow.Server.SignatureSettingFunctions");
      if (__funcType != null)
      {    
        var __funcMethod = __funcType.GetMethod("GetSignatureSettings",
          System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic,
          null, new System.Type[] { typeof(global::System.Collections.Generic.List<global::Sungero.Company.IBusinessUnit>), typeof(global::System.Collections.Generic.List<global::Sungero.Docflow.IDocumentKind>) }, null);
        return (global::System.Linq.IQueryable<global::Sungero.Docflow.ISignatureSetting>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, null, new object[] { businessUnits, kinds });
      }
      else
      {
        return global::Sungero.Docflow.Server.SignatureSettingFunctions.GetSignatureSettings(businessUnits, kinds);
      }
    }
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.SignatureSettingFunctions" />
    internal static  global::System.Boolean ReasonIsFormalizedPoA(global::Sungero.Docflow.ISignatureSetting signatureSetting)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)signatureSetting).FunctionsContainer.ServerFunctions;
      var __funcMethod = __functions.GetType().GetMethod("ReasonIsFormalizedPoA", new System.Type[] {  });
      return (global::System.Boolean)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] {  });
    }
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.SignatureSettingFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::System.Boolean FormalizedPowerOfAttorneyIsExpired(global::Sungero.Docflow.ISignatureSetting signatureSetting)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)signatureSetting).FunctionsContainer.ServerFunctions;
      var __funcMethod = __functions.GetType().GetMethod("FormalizedPowerOfAttorneyIsExpired", new System.Type[] {  });
      return (global::System.Boolean)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] {  });
    }

    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.SignatureSettingFunctions" />
    internal static  void ChangePropertiesAccess(global::Sungero.Docflow.ISignatureSetting signatureSetting)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)signatureSetting).FunctionsContainer.SharedFunctions;
      var __funcMethod = __functions.GetType().GetMethod("ChangePropertiesAccess", new System.Type[] {  });
    global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] {  });
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.SignatureSettingFunctions" />
    internal static  global::System.Collections.Generic.List<global::System.Guid> GetPossibleSignatureRoles(global::Sungero.Docflow.ISignatureSetting signatureSetting)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)signatureSetting).FunctionsContainer.SharedFunctions;
      var __funcMethod = __functions.GetType().GetMethod("GetPossibleSignatureRoles", new System.Type[] {  });
      return (global::System.Collections.Generic.List<global::System.Guid>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] {  });
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.SignatureSettingFunctions" />
    internal static  global::System.Linq.IQueryable<global::Sungero.Docflow.IDocumentGroupBase> FilterCategories(global::Sungero.Docflow.ISignatureSetting signatureSetting, global::System.Linq.IQueryable<global::Sungero.Docflow.IDocumentGroupBase> query)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)signatureSetting).FunctionsContainer.SharedFunctions;
      var __funcMethod = __functions.GetType().GetMethod("FilterCategories", new System.Type[] { typeof(global::System.Linq.IQueryable<global::Sungero.Docflow.IDocumentGroupBase>) });
      return (global::System.Linq.IQueryable<global::Sungero.Docflow.IDocumentGroupBase>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] { query });
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.SignatureSettingFunctions" />
    internal static  global::System.Linq.IQueryable<global::Sungero.Docflow.IDocumentGroupBase> GetPossibleCashedCategories(global::Sungero.Docflow.ISignatureSetting signatureSetting)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)signatureSetting).FunctionsContainer.SharedFunctions;
      var __funcMethod = __functions.GetType().GetMethod("GetPossibleCashedCategories", new System.Type[] {  });
      return (global::System.Linq.IQueryable<global::Sungero.Docflow.IDocumentGroupBase>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] {  });
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.SignatureSettingFunctions" />
    internal static  global::System.String GetPowerOfAttorneySigningReason(global::Sungero.Docflow.ISignatureSetting signatureSetting, global::Sungero.Docflow.IPowerOfAttorney powerOfAttorney)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)signatureSetting).FunctionsContainer.SharedFunctions;
      var __funcMethod = __functions.GetType().GetMethod("GetPowerOfAttorneySigningReason", new System.Type[] { typeof(global::Sungero.Docflow.IPowerOfAttorney) });
      return (global::System.String)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] { powerOfAttorney });
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.SignatureSettingFunctions" />
    internal static  global::System.String GetFormalizedPowerOfAttorneySigningReason(global::Sungero.Docflow.ISignatureSetting signatureSetting, global::Sungero.Docflow.IFormalizedPowerOfAttorney formalizedPowerOfAttorney)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)signatureSetting).FunctionsContainer.SharedFunctions;
      var __funcMethod = __functions.GetType().GetMethod("GetFormalizedPowerOfAttorneySigningReason", new System.Type[] { typeof(global::Sungero.Docflow.IFormalizedPowerOfAttorney) });
      return (global::System.String)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] { formalizedPowerOfAttorney });
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.SignatureSettingFunctions" />
    internal static  void FillName(global::Sungero.Docflow.ISignatureSetting signatureSetting)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)signatureSetting).FunctionsContainer.SharedFunctions;
      var __funcMethod = __functions.GetType().GetMethod("FillName", new System.Type[] {  });
    global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] {  });
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.SignatureSettingFunctions" />
    internal static  global::System.Boolean IsRecipientPowerOfAttorneyRepresentative(global::Sungero.Docflow.ISignatureSetting signatureSetting)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)signatureSetting).FunctionsContainer.SharedFunctions;
      var __funcMethod = __functions.GetType().GetMethod("IsRecipientPowerOfAttorneyRepresentative", new System.Type[] {  });
      return (global::System.Boolean)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] {  });
    }

  }
}

// ==================================================================
// SignatureSettingServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
  public class SignatureSettingServerPublicFunctions : global::Sungero.Docflow.Server.ISignatureSettingServerPublicFunctions
  {
    public global::System.Linq.IQueryable<global::Sungero.Docflow.ISignatureSetting> GetSignatureSettings(global::System.Collections.Generic.List<global::Sungero.Company.IBusinessUnit> businessUnits, global::System.Collections.Generic.List<global::Sungero.Docflow.IDocumentKind> kinds)
    {
      return global::Sungero.Docflow.Functions.SignatureSetting.GetSignatureSettings(businessUnits, kinds);
    }
    public global::System.Linq.IQueryable<global::Sungero.Docflow.ISignatureSetting> GetSignatureSettingsByDocumentKind(global::Sungero.Docflow.IDocumentKind documentKind)
    {
      return global::Sungero.Docflow.Functions.SignatureSetting.GetSignatureSettingsByDocumentKind(documentKind);
    }
    public global::System.Boolean ReasonIsFormalizedPoA(global::Sungero.Docflow.ISignatureSetting signatureSetting)
    {
      return global::Sungero.Docflow.Functions.SignatureSetting.ReasonIsFormalizedPoA(signatureSetting);
    }
    public void UpdateSigningRole(global::Sungero.Docflow.ISignatureSetting signatureSetting, global::System.Boolean beforeDelete)
    {
global::Sungero.Docflow.Functions.SignatureSetting.UpdateSigningRole(signatureSetting, beforeDelete);
    }
  }
}

// ==================================================================
// SignatureSettingQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Queries
{
  public class SignatureSetting
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.Docflow.Server.SignatureSetting.SignatureSettingQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}
