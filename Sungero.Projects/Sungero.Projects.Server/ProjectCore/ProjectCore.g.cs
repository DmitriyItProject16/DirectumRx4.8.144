
// ==================================================================
// ProjectCore.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Server
{
    public class ProjectCoreFilter<T> :
      global::Sungero.Docflow.Server.ProjectBaseFilter<T>
      where T : class, global::Sungero.Projects.IProjectCore
    {
      private global::Sungero.Projects.IProjectCoreFilterState filter
      {
        get
        {
          return (Sungero.Projects.IProjectCoreFilterState)this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        var args = new global::Sungero.Domain.FilteringEventArgs();
        global::System.Linq.IQueryable<T> result;
        var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Projects.ProjectCoreFilteringServerHandler`1");
        if (filterType != null)
        {
          var genericType = filterType.MakeGenericType(typeof(T));
          var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { this.filter });
          var methodInfo = genericType.GetMethod("Filtering");
          result = (global::System.Linq.IQueryable<T>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
        }
        else
        {
          result = new global::Sungero.Projects.ProjectCoreFilteringServerHandler<T>(this.filter).Filtering(query, args);
        }
        if (args.DisableCheckRights)
        global::Sungero.Domain.Security.FilteringAccessRightsOptions.DisableCheckRights<T>();
        return result;
      }

      public ProjectCoreFilter(global::Sungero.Projects.IProjectCoreFilterState filter)
      : base(filter)
      {
      }

      protected ProjectCoreFilter()
      {
      }
    }
      public class ProjectCoreUiFilter<T> :
        global::Sungero.Docflow.Server.ProjectBaseUiFilter<T>
        where T : class, global::Sungero.Projects.IProjectCore
      {
        protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
        {
          return base.ApplyAppliedFilter(query);
        }
      }

    public class ProjectCoreSearchDialogModel : global::Sungero.Docflow.Server.ProjectBaseSearchDialogModel
        {
                  public override global::System.Int64? Id { get; protected set; }
                  public override global::System.String Name { get; protected set; }



                  public virtual global::System.String ShortName { get; protected set; }
                  public virtual global::System.String Note { get; protected set; }


                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Projects.IProjectKind> ProjectKind { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> InternalCustomer { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Parties.ICounterparty> ExternalCustomer { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> StartDate { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> EndDate { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Manager { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Administrator { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> ActualStartDate { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> ActualFinishDate { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Stage { get; protected set; }


                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public ProjectCoreTeamMembersModel TeamMembers { get; protected set; }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public ProjectCoreClassifierModel Classifier { get; protected set; }

        }


      public class ProjectCoreTeamMembersModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int64? Id { get; protected set; }


         }
      public class ProjectCoreClassifierModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int64? Id { get; protected set; }


         }



  public class ProjectCoreFilterForProjectKind<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Projects.IProjectKind
    where TSourceEntity : class, global::Sungero.Projects.IProjectCore
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Projects.ProjectCoreProjectKindPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { sourceEntity });
        var methodInfo = genericType.GetMethod("ProjectKindFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Projects.ProjectCoreProjectKindPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).ProjectKindFiltering(query, args);
      }
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectCoreFilterForProjectKind(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectCoreSearchFilterForProjectKind<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Projects.IProjectKind
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Projects.ProjectCoreProjectKindSearchPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType);
        var methodInfo = genericType.GetMethod("ProjectKindSearchDialogFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Projects.ProjectCoreProjectKindSearchPropertyFilteringServerHandler<TQueryEntity>().ProjectKindSearchDialogFiltering(query, args);
      }
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectCoreSearchFilterForProjectKind(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectCoreFilterForInternalCustomer<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IEmployee
    where TSourceEntity : class, global::Sungero.Projects.IProjectCore
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Projects.ProjectCoreInternalCustomerPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { sourceEntity });
        var methodInfo = genericType.GetMethod("InternalCustomerFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Projects.ProjectCoreInternalCustomerPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).InternalCustomerFiltering(query, args);
      }
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectCoreFilterForInternalCustomer(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectCoreSearchFilterForInternalCustomer<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IRecipient
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Projects.ProjectCoreInternalCustomerSearchPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType);
        var methodInfo = genericType.GetMethod("InternalCustomerSearchDialogFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Projects.ProjectCoreInternalCustomerSearchPropertyFilteringServerHandler<TQueryEntity>().InternalCustomerSearchDialogFiltering(query, args);
      }
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectCoreSearchFilterForInternalCustomer(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectCoreFilterForExternalCustomer<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Parties.ICounterparty
    where TSourceEntity : class, global::Sungero.Projects.IProjectCore
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Projects.ProjectCoreExternalCustomerPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { sourceEntity });
        var methodInfo = genericType.GetMethod("ExternalCustomerFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Projects.ProjectCoreExternalCustomerPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).ExternalCustomerFiltering(query, args);
      }
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectCoreFilterForExternalCustomer(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectCoreSearchFilterForExternalCustomer<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Parties.ICounterparty
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Projects.ProjectCoreExternalCustomerSearchPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType);
        var methodInfo = genericType.GetMethod("ExternalCustomerSearchDialogFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Projects.ProjectCoreExternalCustomerSearchPropertyFilteringServerHandler<TQueryEntity>().ExternalCustomerSearchDialogFiltering(query, args);
      }
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectCoreSearchFilterForExternalCustomer(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectCoreFilterForManager<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IEmployee
    where TSourceEntity : class, global::Sungero.Projects.IProjectCore
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Projects.ProjectCoreManagerPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { sourceEntity });
        var methodInfo = genericType.GetMethod("ManagerFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Projects.ProjectCoreManagerPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).ManagerFiltering(query, args);
      }
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectCoreFilterForManager(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectCoreSearchFilterForManager<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IRecipient
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Projects.ProjectCoreManagerSearchPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType);
        var methodInfo = genericType.GetMethod("ManagerSearchDialogFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Projects.ProjectCoreManagerSearchPropertyFilteringServerHandler<TQueryEntity>().ManagerSearchDialogFiltering(query, args);
      }
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectCoreSearchFilterForManager(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectCoreFilterForFolder<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IFolder
    where TSourceEntity : class, global::Sungero.Projects.IProjectCore
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Projects.ProjectCoreFolderPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { sourceEntity });
        var methodInfo = genericType.GetMethod("FolderFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Projects.ProjectCoreFolderPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).FolderFiltering(query, args);
      }
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectCoreFilterForFolder(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectCoreSearchFilterForFolder<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IFolder
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Projects.ProjectCoreFolderSearchPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType);
        var methodInfo = genericType.GetMethod("FolderSearchDialogFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Projects.ProjectCoreFolderSearchPropertyFilteringServerHandler<TQueryEntity>().FolderSearchDialogFiltering(query, args);
      }
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectCoreSearchFilterForFolder(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectCoreFilterForLeadingProject<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Projects.IProjectCore
    where TSourceEntity : class, global::Sungero.Projects.IProjectCore
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Projects.ProjectCoreLeadingProjectPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { sourceEntity });
        var methodInfo = genericType.GetMethod("LeadingProjectFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Projects.ProjectCoreLeadingProjectPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).LeadingProjectFiltering(query, args);
      }
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectCoreFilterForLeadingProject(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectCoreSearchFilterForLeadingProject<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Projects.IProjectCore
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Projects.ProjectCoreLeadingProjectSearchPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType);
        var methodInfo = genericType.GetMethod("LeadingProjectSearchDialogFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Projects.ProjectCoreLeadingProjectSearchPropertyFilteringServerHandler<TQueryEntity>().LeadingProjectSearchDialogFiltering(query, args);
      }
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectCoreSearchFilterForLeadingProject(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectCoreFilterForAdministrator<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IEmployee
    where TSourceEntity : class, global::Sungero.Projects.IProjectCore
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Projects.ProjectCoreAdministratorPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { sourceEntity });
        var methodInfo = genericType.GetMethod("AdministratorFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Projects.ProjectCoreAdministratorPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).AdministratorFiltering(query, args);
      }
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectCoreFilterForAdministrator(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectCoreSearchFilterForAdministrator<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IRecipient
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Projects.ProjectCoreAdministratorSearchPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType);
        var methodInfo = genericType.GetMethod("AdministratorSearchDialogFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Sungero.Projects.ProjectCoreAdministratorSearchPropertyFilteringServerHandler<TQueryEntity>().AdministratorSearchDialogFiltering(query, args);
      }
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectCoreSearchFilterForAdministrator(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::Sungero.Projects.Server.ProjectCoreFilter<global::Sungero.Projects.IProjectCore>))]
  [global::Sungero.Domain.UiFilter(typeof(global::Sungero.Projects.Server.ProjectCoreUiFilter<global::Sungero.Projects.IProjectCore>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Projects.Server.ProjectCoreFilterForProjectKind<global::Sungero.Projects.IProjectKind, global::Sungero.Projects.IProjectCore>), "ProjectKind")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Projects.Server.ProjectCoreSearchFilterForProjectKind<global::Sungero.Projects.IProjectKind>), "ProjectKind")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Projects.Server.ProjectCoreFilterForInternalCustomer<global::Sungero.Company.IEmployee, global::Sungero.Projects.IProjectCore>), "InternalCustomer")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Projects.Server.ProjectCoreSearchFilterForInternalCustomer<global::Sungero.CoreEntities.IRecipient>), "InternalCustomer")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Projects.Server.ProjectCoreFilterForExternalCustomer<global::Sungero.Parties.ICounterparty, global::Sungero.Projects.IProjectCore>), "ExternalCustomer")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Projects.Server.ProjectCoreSearchFilterForExternalCustomer<global::Sungero.Parties.ICounterparty>), "ExternalCustomer")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Projects.Server.ProjectCoreFilterForManager<global::Sungero.Company.IEmployee, global::Sungero.Projects.IProjectCore>), "Manager")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Projects.Server.ProjectCoreSearchFilterForManager<global::Sungero.CoreEntities.IRecipient>), "Manager")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Projects.Server.ProjectCoreFilterForFolder<global::Sungero.CoreEntities.IFolder, global::Sungero.Projects.IProjectCore>), "Folder")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Projects.Server.ProjectCoreSearchFilterForFolder<global::Sungero.CoreEntities.IFolder>), "Folder")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Projects.Server.ProjectCoreFilterForLeadingProject<global::Sungero.Projects.IProjectCore, global::Sungero.Projects.IProjectCore>), "LeadingProject")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Projects.Server.ProjectCoreSearchFilterForLeadingProject<global::Sungero.Projects.IProjectCore>), "LeadingProject")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Projects.Server.ProjectCoreFilterForAdministrator<global::Sungero.Company.IEmployee, global::Sungero.Projects.IProjectCore>), "Administrator")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Projects.Server.ProjectCoreSearchFilterForAdministrator<global::Sungero.CoreEntities.IRecipient>), "Administrator")]


  public class ProjectCore :
    global::Sungero.Docflow.Server.ProjectBase, global::Sungero.Projects.IProjectCore, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("561aa8c7-b281-494b-a0e4-0170c0b27f48");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Projects.Server.ProjectCore.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Projects.IProjectCore, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Name; }
      set { this.Name = value; }
    }

    public new virtual global::Sungero.Projects.IProjectCoreState State
    {
      get { return (global::Sungero.Projects.IProjectCoreState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Projects.Shared.ProjectCoreState(this);
    }

    public new virtual global::Sungero.Projects.IProjectCoreInfo Info
    {
      get { return (global::Sungero.Projects.IProjectCoreInfo)base.Info; }
    }

    public new virtual global::Sungero.Projects.IProjectCoreAccessRights AccessRights
    {
      get { return (global::Sungero.Projects.IProjectCoreAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Projects.Server.ProjectCoreAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.Projects.Server.ProjectCoreFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Projects.Shared.ProjectCoreFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.Projects.ProjectCoreServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.Projects.ProjectCoreSharedHandlers(this);
    }

    private global::System.String _ShortName;
    public virtual global::System.String ShortName
    {
      get
      {
        return this._ShortName;
      }

      set
      {
        this.SetPropertyValue("ShortName", this._ShortName, value, (propertyValue) => { this._ShortName = propertyValue; }, this.ShortNameChangedHandler);
      }
    }
    private global::System.DateTime? _StartDate;
    public virtual global::System.DateTime? StartDate
    {
      get
      {
        return this._StartDate;
      }

      set
      {
        this.SetPropertyValue("StartDate", this._StartDate, value, (propertyValue) => { this._StartDate = propertyValue; }, this.StartDateChangedHandler);
      }
    }
    private global::System.DateTime? _EndDate;
    public virtual global::System.DateTime? EndDate
    {
      get
      {
        return this._EndDate;
      }

      set
      {
        this.SetPropertyValue("EndDate", this._EndDate, value, (propertyValue) => { this._EndDate = propertyValue; }, this.EndDateChangedHandler);
      }
    }
    private global::System.String _Note;
    public virtual global::System.String Note
    {
      get
      {
        return this._Note;
      }

      set
      {
        this.SetPropertyValue("Note", this._Note, value, (propertyValue) => { this._Note = propertyValue; }, this.NoteChangedHandler);
      }
    }
    private global::System.DateTime? _ActualStartDate;
    public virtual global::System.DateTime? ActualStartDate
    {
      get
      {
        return this._ActualStartDate;
      }

      set
      {
        this.SetPropertyValue("ActualStartDate", this._ActualStartDate, value, (propertyValue) => { this._ActualStartDate = propertyValue; }, this.ActualStartDateChangedHandler);
      }
    }
    private global::System.DateTime? _ActualFinishDate;
    public virtual global::System.DateTime? ActualFinishDate
    {
      get
      {
        return this._ActualFinishDate;
      }

      set
      {
        this.SetPropertyValue("ActualFinishDate", this._ActualFinishDate, value, (propertyValue) => { this._ActualFinishDate = propertyValue; }, this.ActualFinishDateChangedHandler);
      }
    }
    private global::System.Int32? _ExecutionPercent;
    public virtual global::System.Int32? ExecutionPercent
    {
      get
      {
        return this._ExecutionPercent;
      }

      set
      {
        this.SetPropertyValue("ExecutionPercent", this._ExecutionPercent, value, (propertyValue) => { this._ExecutionPercent = propertyValue; }, this.ExecutionPercentChangedHandler);
      }
    }
    private global::System.DateTime? _Modified;
    public virtual global::System.DateTime? Modified
    {
      get
      {
        return this._Modified;
      }

      set
      {
        this.SetPropertyValue("Modified", this._Modified, value, (propertyValue) => { this._Modified = propertyValue; }, this.ModifiedChangedHandler);
      }
    }






    private static global::Sungero.Domain.Shared.EnumerationItems _StageItems = new global::Sungero.Domain.Shared.EnumerationItems(
      null,
      typeof(global::Sungero.Projects.ProjectCore.Stage),
      typeof(global::Sungero.Projects.Server.ProjectCore),
      "Stage");

    public static global::Sungero.Domain.Shared.EnumerationItems StageItems
    {
      get { return global::Sungero.Projects.Server.ProjectCore._StageItems; }
    }

    public virtual global::Sungero.Domain.Shared.EnumerationItems StageAllowedItems
    {
      get { return global::Sungero.Projects.Server.ProjectCore.StageItems; }
    }

    private global::Sungero.Core.Enumeration? _Stage;

    public virtual global::Sungero.Core.Enumeration? Stage
    {
      get { return this._Stage; }
      set { this.SetEnumPropertyValue("Stage", this._Stage, value, (propertyValue) => { this._Stage = propertyValue; }, this.StageChangedHandler, this.StageAllowedItems); }
    }


    private global::Sungero.Projects.IProjectKind _ProjectKind;
    public virtual global::Sungero.Projects.IProjectKind ProjectKind
    {
      get
      {
        return this._ProjectKind;
      }

      set
      {
        this.SetPropertyValue("ProjectKind", this._ProjectKind, value, (propertyValue) => { this._ProjectKind = propertyValue; }, this.ProjectKindChangedHandler);
      }
    }
    private global::Sungero.Company.IEmployee _InternalCustomer;
    public virtual global::Sungero.Company.IEmployee InternalCustomer
    {
      get
      {
        return this._InternalCustomer;
      }

      set
      {
        this.SetPropertyValue("InternalCustomer", this._InternalCustomer, value, (propertyValue) => { this._InternalCustomer = propertyValue; }, this.InternalCustomerChangedHandler);
      }
    }
    private global::Sungero.Parties.ICounterparty _ExternalCustomer;
    public virtual global::Sungero.Parties.ICounterparty ExternalCustomer
    {
      get
      {
        return this._ExternalCustomer;
      }

      set
      {
        this.SetPropertyValue("ExternalCustomer", this._ExternalCustomer, value, (propertyValue) => { this._ExternalCustomer = propertyValue; }, this.ExternalCustomerChangedHandler);
      }
    }
    private global::Sungero.Company.IEmployee _Manager;
    public virtual global::Sungero.Company.IEmployee Manager
    {
      get
      {
        return this._Manager;
      }

      set
      {
        this.SetPropertyValue("Manager", this._Manager, value, (propertyValue) => { this._Manager = propertyValue; }, this.ManagerChangedHandler);
      }
    }
    private global::Sungero.CoreEntities.IFolder _Folder;
    public virtual global::Sungero.CoreEntities.IFolder Folder
    {
      get
      {
        return this._Folder;
      }

      set
      {
        this.SetPropertyValue("Folder", this._Folder, value, (propertyValue) => { this._Folder = propertyValue; }, this.FolderChangedHandler);
      }
    }
    private global::Sungero.Projects.IProjectCore _LeadingProject;
    public virtual global::Sungero.Projects.IProjectCore LeadingProject
    {
      get
      {
        return this._LeadingProject;
      }

      set
      {
        this.SetPropertyValue("LeadingProject", this._LeadingProject, value, (propertyValue) => { this._LeadingProject = propertyValue; }, this.LeadingProjectChangedHandler);
      }
    }
    private global::Sungero.Company.IEmployee _Administrator;
    public virtual global::Sungero.Company.IEmployee Administrator
    {
      get
      {
        return this._Administrator;
      }

      set
      {
        this.SetPropertyValue("Administrator", this._Administrator, value, (propertyValue) => { this._Administrator = propertyValue; }, this.AdministratorChangedHandler);
      }
    }


    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Projects.IProjectCoreTeamMembers> _TeamMembers;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Projects.IProjectCoreTeamMembers> TeamMembers
    {
      get
      {
        if (this._TeamMembers == null)
        {
          this._TeamMembers = this.CreateTeamMembersCollection();
          this.SetTeamMembersEventHandlers();
        }
        return this._TeamMembers;
      }

      set
      {
        if (this._TeamMembers != null)
          this.UnsetChildCollectionEventHandlers(this._TeamMembers);

        this._TeamMembers = value;
        this.SetTeamMembersEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Projects.IProjectCoreTeamMembers> CreateTeamMembersCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Projects.IProjectCoreTeamMembers>() { RootEntity = this };
    }

    private void SetTeamMembersEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._TeamMembers, "TeamMembers");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._TeamMembers;
      changeNotifier.Added += this.TeamMembersAddedHandler;
      changeNotifier.Deleted += this.TeamMembersDeletedHandler;
      changeNotifier.Added += this.TeamMembersCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.TeamMembersCollectionUpdateEventHandler;
      changeNotifier.Updated += this.TeamMembersCollectionUpdateEventHandler;
    }

    private void TeamMembersCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled && this.IsPropertyChangedAppliedHandlerEnabled("TeamMembers"))
        this.TeamMembersChangedHandler();
    }
    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Projects.IProjectCoreClassifier> _Classifier;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Projects.IProjectCoreClassifier> Classifier
    {
      get
      {
        if (this._Classifier == null)
        {
          this._Classifier = this.CreateClassifierCollection();
          this.SetClassifierEventHandlers();
        }
        return this._Classifier;
      }

      set
      {
        if (this._Classifier != null)
          this.UnsetChildCollectionEventHandlers(this._Classifier);

        this._Classifier = value;
        this.SetClassifierEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Projects.IProjectCoreClassifier> CreateClassifierCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Projects.IProjectCoreClassifier>() { RootEntity = this };
    }

    private void SetClassifierEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._Classifier, "Classifier");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._Classifier;
      changeNotifier.Added += this.ClassifierAddedHandler;
      changeNotifier.Deleted += this.ClassifierDeletedHandler;
      changeNotifier.Added += this.ClassifierCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.ClassifierCollectionUpdateEventHandler;
      changeNotifier.Updated += this.ClassifierCollectionUpdateEventHandler;
    }

    private void ClassifierCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled && this.IsPropertyChangedAppliedHandlerEnabled("Classifier"))
        this.ClassifierChangedHandler();
    }



    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      var instance = Sungero.Metadata.Services.AppliedTypesManager.CreateInstance("Sungero.Projects.ProjectCoreCreatingFromServerHandler", new object[] { (global::Sungero.Projects.IProjectCore)entitySource, this.Info });
      if (instance != null)
        return (global::Sungero.Domain.Shared.EntityCreatingFromServerHandler)instance;

      return new global::Sungero.Projects.ProjectCoreCreatingFromServerHandler((global::Sungero.Projects.IProjectCore)entitySource, this.Info);
    }

    #region Framework events

    protected void ProjectKindChangedHandler()
    {
      var args = new global::Sungero.Projects.Shared.ProjectCoreProjectKindChangedEventArgs(this.State.Properties.ProjectKind, this.ProjectKind, this);
     ((global::Sungero.Projects.IProjectCoreSharedHandlers)this.SharedHandlers).ProjectKindChanged(args);
    }

    protected void ShortNameChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.ShortName, this.ShortName, this);
     ((global::Sungero.Projects.IProjectCoreSharedHandlers)this.SharedHandlers).ShortNameChanged(args);
    }

    protected void InternalCustomerChangedHandler()
    {
      var args = new global::Sungero.Projects.Shared.ProjectCoreInternalCustomerChangedEventArgs(this.State.Properties.InternalCustomer, this.InternalCustomer, this);
     ((global::Sungero.Projects.IProjectCoreSharedHandlers)this.SharedHandlers).InternalCustomerChanged(args);
    }

    protected void ExternalCustomerChangedHandler()
    {
      var args = new global::Sungero.Projects.Shared.ProjectCoreExternalCustomerChangedEventArgs(this.State.Properties.ExternalCustomer, this.ExternalCustomer, this);
     ((global::Sungero.Projects.IProjectCoreSharedHandlers)this.SharedHandlers).ExternalCustomerChanged(args);
    }

    protected void StartDateChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.StartDate, this.StartDate, this);
     ((global::Sungero.Projects.IProjectCoreSharedHandlers)this.SharedHandlers).StartDateChanged(args);
    }

    protected void EndDateChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.EndDate, this.EndDate, this);
     ((global::Sungero.Projects.IProjectCoreSharedHandlers)this.SharedHandlers).EndDateChanged(args);
    }

    protected void NoteChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Note, this.Note, this);
     ((global::Sungero.Projects.IProjectCoreSharedHandlers)this.SharedHandlers).NoteChanged(args);
    }

    protected void TeamMembersChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.Projects.IProjectCoreSharedHandlers)this.SharedHandlers).TeamMembersChanged(args);
    }

    protected void ManagerChangedHandler()
    {
      var args = new global::Sungero.Projects.Shared.ProjectCoreManagerChangedEventArgs(this.State.Properties.Manager, this.Manager, this);
     ((global::Sungero.Projects.IProjectCoreSharedHandlers)this.SharedHandlers).ManagerChanged(args);
    }

    protected void FolderChangedHandler()
    {
      var args = new global::Sungero.Projects.Shared.ProjectCoreFolderChangedEventArgs(this.State.Properties.Folder, this.Folder, this);
     ((global::Sungero.Projects.IProjectCoreSharedHandlers)this.SharedHandlers).FolderChanged(args);
    }

    protected void ClassifierChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.Projects.IProjectCoreSharedHandlers)this.SharedHandlers).ClassifierChanged(args);
    }

    protected void LeadingProjectChangedHandler()
    {
      var args = new global::Sungero.Projects.Shared.ProjectCoreLeadingProjectChangedEventArgs(this.State.Properties.LeadingProject, this.LeadingProject, this);
     ((global::Sungero.Projects.IProjectCoreSharedHandlers)this.SharedHandlers).LeadingProjectChanged(args);
    }

    protected void AdministratorChangedHandler()
    {
      var args = new global::Sungero.Projects.Shared.ProjectCoreAdministratorChangedEventArgs(this.State.Properties.Administrator, this.Administrator, this);
     ((global::Sungero.Projects.IProjectCoreSharedHandlers)this.SharedHandlers).AdministratorChanged(args);
    }

    protected void ActualStartDateChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.ActualStartDate, this.ActualStartDate, this);
     ((global::Sungero.Projects.IProjectCoreSharedHandlers)this.SharedHandlers).ActualStartDateChanged(args);
    }

    protected void ActualFinishDateChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.ActualFinishDate, this.ActualFinishDate, this);
     ((global::Sungero.Projects.IProjectCoreSharedHandlers)this.SharedHandlers).ActualFinishDateChanged(args);
    }

    protected void ExecutionPercentChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.IntegerPropertyChangedEventArgs(this.State.Properties.ExecutionPercent, this.ExecutionPercent, this);
     ((global::Sungero.Projects.IProjectCoreSharedHandlers)this.SharedHandlers).ExecutionPercentChanged(args);
    }

    protected void StageChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.Stage, this.Stage, this);
     ((global::Sungero.Projects.IProjectCoreSharedHandlers)this.SharedHandlers).StageChanged(args);
    }

    protected void ModifiedChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.Modified, this.Modified, this);
     ((global::Sungero.Projects.IProjectCoreSharedHandlers)this.SharedHandlers).ModifiedChanged(args);
    }



    protected virtual global::Sungero.Projects.ProjectCoreTeamMembersSharedCollectionHandlers CreateTeamMembersAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Projects.ProjectCoreTeamMembersSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.Projects.ProjectCoreTeamMembersSharedCollectionHandlers CreateTeamMembersDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Projects.ProjectCoreTeamMembersSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void TeamMembersAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      var type = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Projects.ProjectCoreTeamMembersSharedCollectionHandlers");
      if (type != null)
      {
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(type, new object[] { this, e.Value, null, e.Source });
        var methodInfo = type.GetMethod("TeamMembersAdded");
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { args });
      }
      else
      {
        var collectionHandlers = this.CreateTeamMembersAddedHandler(e);
        if (collectionHandlers != null)
        {
          var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
          collectionHandlers.TeamMembersAdded(args);
        }
      }
    }

    protected virtual void TeamMembersDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      var type = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Projects.ProjectCoreTeamMembersSharedCollectionHandlers");
      if (type != null)
      {
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(type, new object[] { this, null, e.Value, null });
        var methodInfo = type.GetMethod("TeamMembersDeleted");
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { args });
      }
      else
      {
        var collectionHandlers = this.CreateTeamMembersDeletedHandler(e);
        if (collectionHandlers != null)
        {
          var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
          collectionHandlers.TeamMembersDeleted(args);
        }
      }
    }


    protected virtual global::Sungero.Projects.ProjectCoreClassifierSharedCollectionHandlers CreateClassifierAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Projects.ProjectCoreClassifierSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.Projects.ProjectCoreClassifierSharedCollectionHandlers CreateClassifierDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Projects.ProjectCoreClassifierSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void ClassifierAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      var type = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Projects.ProjectCoreClassifierSharedCollectionHandlers");
      if (type != null)
      {
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(type, new object[] { this, e.Value, null, e.Source });
        var methodInfo = type.GetMethod("ClassifierAdded");
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { args });
      }
      else
      {
        var collectionHandlers = this.CreateClassifierAddedHandler(e);
        if (collectionHandlers != null)
        {
          var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
          collectionHandlers.ClassifierAdded(args);
        }
      }
    }

    protected virtual void ClassifierDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      var type = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Projects.ProjectCoreClassifierSharedCollectionHandlers");
      if (type != null)
      {
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(type, new object[] { this, null, e.Value, null });
        var methodInfo = type.GetMethod("ClassifierDeleted");
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { args });
      }
      else
      {
        var collectionHandlers = this.CreateClassifierDeletedHandler(e);
        if (collectionHandlers != null)
        {
          var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
          collectionHandlers.ClassifierDeleted(args);
        }
      }
    }


    #endregion


    public ProjectCore()
    {
    }

  }
}

// ==================================================================
// ProjectCoreHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects
{
  public partial class ProjectCoreProjectKindPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Projects.IProjectKind
  {
    private global::Sungero.Projects.IProjectCore _obj
    {
      get { return (global::Sungero.Projects.IProjectCore)this.Entity; }
    }

    public ProjectCoreProjectKindPropertyFilteringServerHandler(global::Sungero.Projects.IProjectCore entity)
      : base(entity)
    {
    }
  }

  public partial class ProjectCoreProjectKindSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Projects.IProjectKind
  {

    public virtual global::System.Linq.IQueryable<T> ProjectKindSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ProjectCoreProjectKindSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ProjectCoreInternalCustomerPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IEmployee
  {
    private global::Sungero.Projects.IProjectCore _obj
    {
      get { return (global::Sungero.Projects.IProjectCore)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> InternalCustomerFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ProjectCoreInternalCustomerPropertyFilteringServerHandler(global::Sungero.Projects.IProjectCore entity)
      : base(entity)
    {
    }
  }

  public partial class ProjectCoreInternalCustomerSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IRecipient
  {

    public virtual global::System.Linq.IQueryable<T> InternalCustomerSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ProjectCoreInternalCustomerSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ProjectCoreExternalCustomerPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.ICounterparty
  {
    private global::Sungero.Projects.IProjectCore _obj
    {
      get { return (global::Sungero.Projects.IProjectCore)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> ExternalCustomerFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ProjectCoreExternalCustomerPropertyFilteringServerHandler(global::Sungero.Projects.IProjectCore entity)
      : base(entity)
    {
    }
  }

  public partial class ProjectCoreExternalCustomerSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.ICounterparty
  {

    public virtual global::System.Linq.IQueryable<T> ExternalCustomerSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ProjectCoreExternalCustomerSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ProjectCoreManagerPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IEmployee
  {
    private global::Sungero.Projects.IProjectCore _obj
    {
      get { return (global::Sungero.Projects.IProjectCore)this.Entity; }
    }

    public ProjectCoreManagerPropertyFilteringServerHandler(global::Sungero.Projects.IProjectCore entity)
      : base(entity)
    {
    }
  }

  public partial class ProjectCoreManagerSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IRecipient
  {

    public virtual global::System.Linq.IQueryable<T> ManagerSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ProjectCoreManagerSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ProjectCoreFolderPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IFolder
  {
    private global::Sungero.Projects.IProjectCore _obj
    {
      get { return (global::Sungero.Projects.IProjectCore)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> FolderFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ProjectCoreFolderPropertyFilteringServerHandler(global::Sungero.Projects.IProjectCore entity)
      : base(entity)
    {
    }
  }

  public partial class ProjectCoreFolderSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IFolder
  {

    public virtual global::System.Linq.IQueryable<T> FolderSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ProjectCoreFolderSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ProjectCoreLeadingProjectPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Projects.IProjectCore
  {
    private global::Sungero.Projects.IProjectCore _obj
    {
      get { return (global::Sungero.Projects.IProjectCore)this.Entity; }
    }

    public ProjectCoreLeadingProjectPropertyFilteringServerHandler(global::Sungero.Projects.IProjectCore entity)
      : base(entity)
    {
    }
  }

  public partial class ProjectCoreLeadingProjectSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Projects.IProjectCore
  {

    public virtual global::System.Linq.IQueryable<T> LeadingProjectSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ProjectCoreLeadingProjectSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ProjectCoreAdministratorPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IEmployee
  {
    private global::Sungero.Projects.IProjectCore _obj
    {
      get { return (global::Sungero.Projects.IProjectCore)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> AdministratorFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ProjectCoreAdministratorPropertyFilteringServerHandler(global::Sungero.Projects.IProjectCore entity)
      : base(entity)
    {
    }
  }

  public partial class ProjectCoreAdministratorSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IRecipient
  {

    public virtual global::System.Linq.IQueryable<T> AdministratorSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ProjectCoreAdministratorSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



  public partial class ProjectCoreFilteringServerHandler<T>
    : global::Sungero.Docflow.ProjectBaseFilteringServerHandler<T>  
    where T : class, global::Sungero.Projects.IProjectCore
  {
    private global::Sungero.Projects.IProjectCoreFilterState _filter
    {
      get
      {
        return (Sungero.Projects.IProjectCoreFilterState)this.Filter;
      }
    }

    public ProjectCoreFilteringServerHandler(global::Sungero.Projects.IProjectCoreFilterState filter)
    : base(filter)
    {
    }

    protected ProjectCoreFilteringServerHandler()
    {
    }

      public virtual global::System.Linq.IQueryable<Sungero.Projects.IProjectKind> ProjectKindFiltering(global::System.Linq.IQueryable<Sungero.Projects.IProjectKind> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        return query;
      }

      public virtual global::System.Linq.IQueryable<Sungero.Company.IEmployee> ProjectManagerFiltering(global::System.Linq.IQueryable<Sungero.Company.IEmployee> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        return query;
      }

      public virtual global::System.Linq.IQueryable<Sungero.Projects.IProjectCore> LeadingProjectFiltering(global::System.Linq.IQueryable<Sungero.Projects.IProjectCore> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        return query;
      }

      public virtual global::System.Linq.IQueryable<Sungero.Company.IEmployee> InternalCustomerFiltering(global::System.Linq.IQueryable<Sungero.Company.IEmployee> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        return query;
      }

      public virtual global::System.Linq.IQueryable<Sungero.Parties.ICounterparty> ExternalCustomerFiltering(global::System.Linq.IQueryable<Sungero.Parties.ICounterparty> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        return query;
      }


  }

  public partial class ProjectCoreUiFilteringServerHandler<T>
    : global::Sungero.Docflow.ProjectBaseUiFilteringServerHandler<T>
    where T : class, global::Sungero.Projects.IProjectCore
  {
    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.UiFilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }
  }

  public partial class ProjectCoreSearchDialogServerHandler : global::Sungero.Docflow.ProjectBaseSearchDialogServerHandler
   {
     private global::Sungero.Projects.Server.ProjectCoreSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.Projects.Server.ProjectCoreSearchDialogModel)this.Dialog;
       }
     }

     public ProjectCoreSearchDialogServerHandler(global::Sungero.Projects.Server.ProjectCoreSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class ProjectCoreServerHandlers : global::Sungero.Docflow.ProjectBaseServerHandlers
  {
    private global::Sungero.Projects.IProjectCore _obj
    {
      get { return (global::Sungero.Projects.IProjectCore)this.Entity; }
    }

    public ProjectCoreServerHandlers(global::Sungero.Projects.IProjectCore entity)
      : base(entity)
    {
    }
  }

  public partial class ProjectCoreCreatingFromServerHandler : global::Sungero.Docflow.ProjectBaseCreatingFromServerHandler
  {
    private global::Sungero.Projects.IProjectCore _source
    {
      get { return (global::Sungero.Projects.IProjectCore)this.Source; }
    }

    private global::Sungero.Projects.IProjectCoreInfo _info
    {
      get { return (global::Sungero.Projects.IProjectCoreInfo)this._Info; }
    }

    public ProjectCoreCreatingFromServerHandler(global::Sungero.Projects.IProjectCore source, global::Sungero.Projects.IProjectCoreInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// ProjectCoreEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Server
{
}

// ==================================================================
// ProjectCoreAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Server
{
  public class ProjectCoreAccessRights : 
    Sungero.Docflow.Server.ProjectBaseAccessRights, Sungero.Projects.IProjectCoreAccessRights
  {

    public ProjectCoreAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class ProjectCoreTypeAccessRights : 
    Sungero.Docflow.Server.ProjectBaseTypeAccessRights, Sungero.Projects.IProjectCoreAccessRights
  {

    public ProjectCoreTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// ProjectCoreRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Server
{
    public class ProjectCoreRepositoryImplementer<T> : 
      global::Sungero.Docflow.Server.ProjectBaseRepositoryImplementer<T>,
      global::Sungero.Projects.IProjectCoreRepositoryImplementer<T>
      where T : global::Sungero.Projects.IProjectCore 
    {
       public new global::Sungero.Projects.IProjectCoreAccessRights AccessRights
       {
          get { return (global::Sungero.Projects.IProjectCoreAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Projects.IProjectCoreInfo Info
       {
          get { return (global::Sungero.Projects.IProjectCoreInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Projects.Server.ProjectCoreTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// ProjectCorePanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Server
{
    public class ProjectCoreProjectKindPanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Projects.IProjectCore
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Projects.IProjectKind>)query;
        var typedState = (global::Sungero.Projects.IProjectCoreFilterState)this.State;
        var handlers = new global::Sungero.Projects.ProjectCoreFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.ProjectKindFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Projects.IProjectKind>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Projects.IProjectCore>(query);
      }
    }

    public class ProjectCoreProjectManagerPanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Projects.IProjectCore
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IEmployee>)query;
        var typedState = (global::Sungero.Projects.IProjectCoreFilterState)this.State;
        var handlers = new global::Sungero.Projects.ProjectCoreFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.ProjectManagerFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IEmployee>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Projects.IProjectCore>(query);
      }
    }

    public class ProjectCoreLeadingProjectPanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Projects.IProjectCore
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Projects.IProjectCore>)query;
        var typedState = (global::Sungero.Projects.IProjectCoreFilterState)this.State;
        var handlers = new global::Sungero.Projects.ProjectCoreFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.LeadingProjectFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Projects.IProjectCore>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Projects.IProjectCore>(query);
      }
    }

    public class ProjectCoreInternalCustomerPanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Projects.IProjectCore
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IEmployee>)query;
        var typedState = (global::Sungero.Projects.IProjectCoreFilterState)this.State;
        var handlers = new global::Sungero.Projects.ProjectCoreFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.InternalCustomerFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IEmployee>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Projects.IProjectCore>(query);
      }
    }

    public class ProjectCoreExternalCustomerPanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Projects.IProjectCore
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Parties.ICounterparty>)query;
        var typedState = (global::Sungero.Projects.IProjectCoreFilterState)this.State;
        var handlers = new global::Sungero.Projects.ProjectCoreFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.ExternalCustomerFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Parties.ICounterparty>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Projects.IProjectCore>(query);
      }
    }

}

// ==================================================================
// ProjectCoreServerFunctions.g.cs
// ==================================================================

namespace Sungero.Projects.Server
{
  public partial class ProjectCoreFunctions : global::Sungero.Docflow.Server.ProjectBaseFunctions
  {
    private global::Sungero.Projects.IProjectCore _obj
    {
      get { return (global::Sungero.Projects.IProjectCore)this.Entity; }
    }

    public ProjectCoreFunctions(global::Sungero.Projects.IProjectCore entity) : base(entity) { }
  }
}

// ==================================================================
// ProjectCoreFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Functions
{
  internal static class ProjectCore
  {
    /// <redirect project="Sungero.Projects.Server" type="Sungero.Projects.Server.ProjectCoreFunctions" />
    internal static  void AddDocumentToFolder(global::Sungero.Projects.IProjectCore projectCore, global::Sungero.Content.IElectronicDocument document)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)projectCore).FunctionsContainer.ServerFunctions;
      var __funcMethod = __functions.GetType().GetMethod("AddDocumentToFolder", new System.Type[] { typeof(global::Sungero.Content.IElectronicDocument) });
    global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] { document });
    }
    /// <redirect project="Sungero.Projects.Server" type="Sungero.Projects.Server.ProjectCoreFunctions" />
    internal static  void UpdateClassifier(global::Sungero.Projects.IProjectCore projectCore)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)projectCore).FunctionsContainer.ServerFunctions;
      var __funcMethod = __functions.GetType().GetMethod("UpdateClassifier", new System.Type[] {  });
    global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] {  });
    }
    /// <redirect project="Sungero.Projects.Server" type="Sungero.Projects.Server.ProjectCoreFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::System.Linq.IQueryable<global::Sungero.Docflow.IOfficialDocument> GetProjectDocuments(global::Sungero.Projects.IProjectCore projectCore)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)projectCore).FunctionsContainer.ServerFunctions;
      var __funcMethod = __functions.GetType().GetMethod("GetProjectDocuments", new System.Type[] {  });
      return (global::System.Linq.IQueryable<global::Sungero.Docflow.IOfficialDocument>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] {  });
    }
    /// <redirect project="Sungero.Projects.Server" type="Sungero.Projects.Server.ProjectCoreFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::Sungero.Docflow.IOfficialDocument CreateProjectDocument(global::Sungero.Projects.IProjectCore projectCore)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)projectCore).FunctionsContainer.ServerFunctions;
      var __funcMethod = __functions.GetType().GetMethod("CreateProjectDocument", new System.Type[] {  });
      return (global::Sungero.Docflow.IOfficialDocument)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] {  });
    }
    /// <redirect project="Sungero.Projects.Server" type="Sungero.Projects.Server.ProjectCoreFunctions" />
    internal static  global::System.Collections.Generic.List<global::Sungero.Projects.IProjectCore> GetProjectsManagerOrAdministrator(global::Sungero.CoreEntities.IRecipient recipient)
    {
      var __funcType = Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Sungero.Projects.Server.ProjectCoreFunctions");
      if (__funcType != null)
      {    
        var __funcMethod = __funcType.GetMethod("GetProjectsManagerOrAdministrator",
          System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic,
          null, new System.Type[] { typeof(global::Sungero.CoreEntities.IRecipient) }, null);
        return (global::System.Collections.Generic.List<global::Sungero.Projects.IProjectCore>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, null, new object[] { recipient });
      }
      else
      {
        return global::Sungero.Projects.Server.ProjectCoreFunctions.GetProjectsManagerOrAdministrator(recipient);
      }
    }

  }
}

// ==================================================================
// ProjectCoreServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Server
{
  public class ProjectCoreServerPublicFunctions : global::Sungero.Projects.Server.IProjectCoreServerPublicFunctions
  {
    public void AddDocumentToFolder(global::Sungero.Projects.IProjectCore projectCore, global::Sungero.Content.IElectronicDocument document)
    {
global::Sungero.Projects.Functions.ProjectCore.AddDocumentToFolder(projectCore, document);
    }
  }
}

// ==================================================================
// ProjectCoreQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Queries
{
  public class ProjectCore
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.Projects.Server.ProjectCore.ProjectCoreQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}
